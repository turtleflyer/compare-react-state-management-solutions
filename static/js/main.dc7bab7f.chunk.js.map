{"version":3,"sources":["internal_packages/perfomance-info/DisplayInfo.tsx","internal_packages/perfomance-info/TipsPoolProvider.tsx","internal_packages/perfomance-info/InfoMark.tsx","internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/control-panel/Button.tsx","internal_packages/control-panel/InputField.tsx","internal_packages/control-panel/styles.ts","internal_packages/control-panel/ChooseGrid.tsx","internal_packages/control-panel/DisableOrEnableRowsButton.tsx","internal_packages/control-panel/MassivePaintButton.tsx","internal_packages/control-panel/MeasuredControlButton.tsx","internal_packages/control-panel/ControlPanel.tsx","internal_packages/draw-pixels/drawPixels.ts","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/controlStage.tsx","component_packages/redux-hooks-implementation/State/actionTypes.ts","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/controlStage.ts","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/use-interstate-implementation/State/storeKeysMethods.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/controlStage.ts","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","App.tsx","index.js"],"names":["outerBoxStyle","display","width","height","color","backgroundColor","borderRadius","justifyContent","alignItems","innerBoxStyle","flexWrap","whiteSpace","elementStyle","margin","DisplayInfo","info","useState","fontSize","setFontSize","ref","e","getBoundingClientRect","initialFontSize","style","map","key","cloneElement","props","createTipsPoolMethods","dispatchersPool","addTipHandler","handler","removeTipHandler","filter","nextHandler","hideOtherTips","except","forEach","TipsPoolContext","createContext","TipsPoolProvider","popupDelay","children","tipsPoolMethods","Provider","value","infoMarkStyle","flexShrink","fontWeight","cursor","infoTipStyle","position","padding","boxShadow","InfoTipBox","popupInfo","left","bottom","clearDelay","toHide","onMouseOver","onFocus","onMouseLeave","onBlur","InfoMark","infoMarkRef","useRef","delayTimeoutID","infoTipBoxPosition","setInfoTipBoxPosition","tipHandler","useCallback","useContext","Error","hideInfoTipOnMouseLeave","current","setTimeout","clearTimeout","showInfoTip","x","y","useEffect","role","tabIndex","document","documentElement","clientHeight","scrollTop","AcknowledgeTip","href","target","PerformanceInfo","status","data","TTI","TBT","Math","round","error","message","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","scheduleNext","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","updateStartMeasureCallback","measureFromCreating","name","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","observe","entryTypes","longTasksList","getEntriesByType","every","task","performance","mark","createObserver","conditionalObserverResult","callback","useMemo","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","marginRight","Button","onClick","addStyle","type","calcStyle","InputField","label","onChange","onSubmit","insertElementBefore","insertElementAfter","preventDefault","buttonContainerStyle","ChooseGrid","gridSize","useGridSize","inputValue","setInputValue","WrapDisplay","startMeasure","nextGridSize","parseInt","onGridChosen","marginBottom","DisableOrEnableRowsButton","useOnPushButton","onPushButton","renderInfoContainerStyle","MassivePaintButton","paintRandomPixels","painterComponents","checkResultForPaintRandomPixels","usePaintRandomPixels","Array","isArray","percentsInput","setPercentsInput","input","percentsNumber","MeasuredControlButton","ControlPanel","headline","repaintRow","useRepaintRow","useDisableRows","useEnableRows","paintRandomSinglePixel","usePaintRandomSinglePixel","borderTop","drawPixels","totalNumber","numberToDraw","flagToWrite","numberToLeave","pixels","fill","_","i","pickedPixels","pickPixel","floor","random","push","pop","range","getRandomColor","calcColor","slice","toString","padStart","storeAtoms","storeAtomsMethods","newAtom","drawPixelToPaint","randomIndex","atomToSet","getNextAtom","defaultValue","atom","default","choiceForPixelPlaceholderKey","colorForAlternativeKeyPrefix","gridSizeKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","getGridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceKeys","c","createAlternativeForChoiceAtoms","alternativeForChoiceAtoms","getAlternativeForChoiceAtoms","createFreshKey","alternatives","useAlternative","useRecoilState","activeChoice","setActiveChoice","colorsState","useColorState","prevColor","nextPotentialChoice","altForChoiceAtom","useRecoilValue","alt","ActionType","possibleAlternative","setAlternative","useSetRecoilState","atomToPaint","setAtomToPaint","paintRandomPixel","prev","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","pixelsToPaint","setPixelsToPaint","prevPixels","percentage","allPixelsNumber","p","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","PixelsStage","lines","setLines","flexGrow","currentLine","App","refreshKey","createKey","useRefreshApp","commandToCreateRefreshKey","flexDirection","storeKeys","storeKeysMethods","newKey","initState","createSelector","k","state","getGridSize","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","initialState","rememberActiveChoice","dispatch","useDispatch","REPAINT_ROW","useSelector","DISABLE_ROW","ENABLE_ROW","pixel","SWITCH_PIXEL_CHOICE","payload","SWITCH_MULTIPLE_PIXELS","altControl","possibleAltControl","nextKey","CREATE_NEW_PIXEL_ENTRY","createNewPixelEntryAction","appReducer","action","updatePixel","stateUpdate","reduce","altKey","update","initializeState","entries","createStore","store","provideStore","setNewKey","useCreateStore","commandToCreateFreshStore","rememberActiveChoiceKey","goInterstate","initInterstate","useInterstate","readInterstate","setInterstate","createColorForChoiceDefState","acceptSelector","altControlKey","possibleAltKey","setKey","appsContainerStyle","ReactDOM","render","getElementById"],"mappings":"uPAMMA,EAA+B,CACnCC,QAAS,OACTC,MAAO,IACPC,OAAQ,GACRC,MAAO,QACPC,gBAAiB,OACjBC,aAAc,EACdC,eAAgB,SAChBC,WAAY,UAGRC,EAA+B,CACnCR,QAAS,OACTS,SAAU,SACVC,WAAY,UAGRC,EAA8B,CAClCC,OAAQ,SAGGC,EAAuD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EAChDC,mBAAwB,MADwB,mBACzEC,EADyE,KAC/DC,EAD+D,KAUhF,OAAOH,EACL,qBAEII,IAVM,SAACC,GACX,GAAIA,IAAMH,EAAU,CAAC,IACXf,EAAUkB,EAAEC,wBAAZnB,MACRA,EA9BgB,KA8BSgB,EAAaI,KAAmCpB,KAQvEqB,MAAM,uCAAMvB,GAAkBS,GAAzB,IAAwCQ,SAAQ,OAAEA,QAAF,IAAEA,IArCvC,KAkCpB,SAMGF,EAAKS,KAAI,SAACJ,GAAD,YACK,kBAANA,EACL,gCAAYG,MAAOX,EAAgBa,IAAKL,GACrCA,GAGHM,uBAAaN,EAAD,YAAC,eACRA,EAAEO,OADK,IAEVJ,MAAM,2BAAD,QAAC,EAAOH,EAAEO,MAAMJ,aAAhB,QAAyB,IAAQX,WAM9C,qBAAWW,MAAM,2BAAMvB,GAAP,IAAsBK,gBAAiB,mB,QCjDrDuB,EAAwB,WAC5B,IAAIC,EAAkC,GAEtC,MAAO,CACLC,cAAe,SAACC,GACdF,EAAe,sBAAOA,GAAP,CAAwBE,KAGzCC,iBAAkB,SAACD,GACjBF,EAAkBA,EAAgBI,QAAO,SAACC,GAAD,OAAiBA,IAAgBH,MAG5EI,cAAe,SAACC,GACdP,EAAgBQ,SAAQ,SAACH,GAAD,OAAiBA,IAAgBE,GAAUF,UAUnEI,EAAkBC,wBAA2C,MAEtDC,EAAgD,SAAC,GAAoC,IAAD,IAAjCC,kBAAiC,MAApB,IAAoB,EAAfC,EAAe,EAAfA,SAAe,EACrE1B,mBAASY,GAA5Be,EADwF,oBAG/F,OACE,cAACL,EAAgBM,SAAjB,CAAgCC,MAAO,CAAEF,kBAAiBF,cAA1D,SACGC,KCnCDI,EAA+B,CACnC7C,QAAS,OACTM,eAAgB,SAChBC,WAAY,SACZuC,WAAY,EACZ9B,SAAU,QACV+B,WAAY,SACZ5C,MAAO,OACPC,gBAAiB,qBACjBH,MAAO,QACPC,OAAQ,QACRG,aAAc,QACd2C,OAAQ,WAGJC,EAA8B,CAClCC,SAAU,WACVxC,WAAY,SACZT,MAAO,IACPkD,QAAS,GACThD,MAAO,QACPC,gBAAiB,qBACjBY,SAAU,OACVoC,UAAW,8BAGPC,EAMD,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,OAAxC,OACH,qBAEIpC,MAAM,2BAAM2B,GAAP,IAAqBM,OAAMC,WAChCG,YAAaF,EACbG,QAASH,EACTI,aAAcH,EACdI,OAAQJ,EANZ,SASGJ,KAIQS,EAA2E,SAAC,GAGlF,IAAD,MAFJzC,aAEI,MAFI,GAEJ,EADJgC,EACI,EADJA,UAEMU,EAAcC,iBAAuB,MACrCC,EAAiBD,iBAA8B,MAFjD,EAIgDlD,mBAClD,MALE,mBAIGoD,EAJH,KAIuBC,EAJvB,KAQEC,EAAaC,uBAAY,kBAAMF,EAAsB,QAAO,IAR9D,YDTwDG,qBAAWlC,UCSnE,QAYD,WACC,MAAMmC,MAAM,qDADb,GAFK9B,EAVJ,EAUIA,gBAAiBF,EAVrB,EAUqBA,WAMnBiC,EAA0B,WAC9BP,EAAeQ,QAAUC,YAAW,kBAAMP,EAAsB,QAAO5B,IAGnEiB,EAAa,WACjBS,EAAeQ,SAAWE,aAAaV,EAAeQ,SACtDR,EAAeQ,QAAU,MAGrBG,EAAc,WAClB,GAAIV,EACFV,QADF,CAMA,IAAIO,EAAYU,QAKd,MAAMF,MAAM,8CAJZ9B,EAAgBR,cAAcmC,GADP,MAENL,EAAYU,QAAQtD,wBAA7B0D,EAFe,EAEfA,EAAGC,EAFY,EAEZA,EACXX,EAAsB,CAAEU,IAAGC,QAY/B,OANAC,qBAAU,WAGR,OAFAtC,EAAgBb,cAAcwC,GAEvB,kBAAM3B,EAAgBX,iBAAiBsC,MAC7C,IAGD,qCACE,qBAEInD,IAAK8C,EACL1C,MAAM,2BAAMuB,GAAkBvB,GAC9BqC,YAAakB,EACbjB,QAASiB,EACThB,aAAcY,EACdX,OAAQW,EACRQ,KAAM,OACNC,SAAU,EATd,eAcCf,GACC,cAAC,EAAD,CAGIb,YACAC,KAAMY,EAAmBW,EAAI,GAC7BtB,OACE2B,SAASC,gBAAgBC,aACzBF,SAASC,gBAAgBE,UACzBnB,EAAmBY,EACnB,EACFtB,aACAC,OAAQe,QC1Hdc,EAAqB,kBAEzB,cADA,CACA,sBACE,+DADF,+JAGc,mBAASC,KAAM,uBAAwBC,OAAQ,QAA/C,kBAHd,KAKE,uBACA,uBACA,+DAPF,4JASc,mBAASD,KAAM,uBAAwBC,OAAQ,QAA/C,kBATd,SAcWC,EAA6C,SAAChE,GACzD,OAAQA,EAAMiE,QACZ,IAAK,OAAS,IAAD,EACUjE,EAAMkE,KAAnBC,EADG,EACHA,IAAKC,EADF,EACEA,IACb,OACE,cAAC,EAAD,CAEIhF,KAAM,CAAC,QAAD,OACIiF,KAAKC,MAAMH,GADf,qBACgCE,KAAKC,MAAMF,GAD3C,MAEJ,cAAC,EAAD,CAA8BxC,UAAW,cAAC,EAAD,KAA3B,cAOxB,IAAK,UACH,OAAO,cAAC,EAAD,CAAmBxC,KAAM,CAAC,8BAEnC,IAAK,QACH,OACE,cAAC,EAAD,CAEIA,KAAM,CAAC,QAAS,cAAC,EAAD,CAA8BwC,UAAW5B,EAAMuE,MAAMC,SAAvC,cASxC,OAAO,cAAC,EAAD,KCtDHC,EAAoB,IAAIC,IAEvB,SAASC,EAA6BC,GAAe,IAAD,EAEnDC,GAAQ,UAACJ,EAAkBK,IAAIF,UAAvB,SAAmC,GAAK,EAGtD,OAFAH,EAAkBM,IAAIH,EAAQC,GAExB,GAAN,OAAUD,EAAV,YAAoBC,GCPf,IAAMG,EAA4B,ICIzC,SAASC,EACPC,EACAC,EACAC,EACAC,GAIA,YAFQC,IAARJ,GAAqBhC,aAAagC,GAE3BG,EAASE,aACZtC,YAAW,WACTkC,EAASK,aACLJ,EAAWK,qBACbJ,EAASK,WAEVV,GACFG,EAASK,aAGhB,SAASG,EACPC,EACAC,EACAC,EACAC,GACW,IAAD,SACqCA,QADrC,IACqCA,IAAsB,CACnEC,UAAWH,EACXI,SAAU,GAFOC,EADT,EACFF,UAA0BC,EADxB,EACwBA,SAI5BE,EAAQN,EAAQK,EAChBE,GAAUD,GAASnB,EAEzB,MAAO,CACLb,IAAKiC,EAAS,EAAI/B,KAAKgC,IAAI,EAAGP,EAAMD,GACpCzB,IAAKgC,EACD,EACAR,EACAvB,KAAKgC,IACH,EACAF,EDzC4B,GCyCKF,EDzCL,GCyCyCA,EAAWE,I,IC9BlFG,EAAwBC,oBAAxBD,oBACFE,EACJF,GACAA,EAAoBG,SAAS,SAC7BH,EAAoBG,SAAS,YAE/B,SAASC,EAA4BC,GACnC,OAAOH,EAGF,IAAMI,EAKT,SAAC,GAAyE,IAA7DC,EAA4D,EAAtE9F,SAA2BsE,EAA2C,EAA3CA,SAAUyB,EAAiC,EAAjCA,2BAClCC,EAA8B1B,EAA9B0B,oBAAqBC,EAAS3B,EAAT2B,KAD8C,EAGpD3H,oBAAS,kBAAMsF,EAAU,OAACqC,QAAD,IAACA,IAAQ,6BAAlDC,EAHoE,sBAIjC5H,oBAAgC,WACxE,OAAImH,EACK,CAAEtC,KAAM,KAAMD,OAAQ,SAGxB,CACLC,KAAM,KACND,OAAQ,QACRM,MAAOzB,MAAM,kEAZ0D,mBAIpEoE,EAJoE,KAIrDC,EAJqD,KAerEC,EAAkB7E,kBAAO,GAf4C,EAgBvClD,oBAAS,kBAC3CmH,EDGG,SACLS,EACAI,EACAP,GAEA,IAGIQ,EACAC,EACAxB,EALAyB,GAAU,EACV5B,EAAU,EACV6B,EAAc,EAIZrC,EAAa,CAAEK,qBAAqB,GAE1C,SAASC,IACP2B,EAAoB,CAElBnD,KAAMyB,EAAgBC,EAAS2B,EAAWvB,UAAWyB,EAAa1B,GAClE9B,OAAQ,SAIZ,IAAMyD,EAAkB,IAAInB,qBAAoB,SAACoB,EAAMxC,GAAc,IAC3DM,EAAwBL,EAAxBK,oBAOR,GALA6B,EAAYrC,EAAsBqC,EAAWnC,EAAUC,EAAY,CACjEG,cAAc,EACdG,WAGE8B,GAAW/B,EAAqB,CAGlC,GAFA+B,GAAU,GAELD,EAAW,CACd,IAAMK,EAAWD,EAAKE,iBAAiBZ,GAEvC,KAAIW,EAASE,OAAS,GAYpB,OARAT,EAAoB,CAClBpD,OAAQ,QACRC,KAAM,KACNK,MAAOzB,MAAM,6DAEfwE,EAAYrC,EAAsBqC,EAAWnC,EAAUC,EAAY,CACjEG,cAAc,KAVQ,IAAD,cACTqC,EADS,GACtBL,EADsB,KAEvBpC,EAAS4C,QAAQ,CAAEC,WAAY,CAAC,cAcpC,IAAMC,EAAgBN,EAAKO,iBAAiB,YAExCD,EAAcH,OAAS,GACzBG,EAAcE,OAAM,SAACC,GAAU,IACrBpC,EAAwBoC,EAAxBpC,UAAWC,EAAamC,EAAbnC,SAEnB,GAAKF,EAEE,CACL,GAAIC,EAAYyB,GAAezC,EAM7B,OALAsC,EAAYrC,EAAsBqC,EAAWnC,EAAUC,EAAY,CACjEG,cAAc,IAEhBG,KAEO,EAGTE,GAAWK,EDnHe,QCwG1BF,EAAqBqC,EAgBvB,OAFAX,EAAczB,EAAYC,GAEnB,UAIXhB,EAAsBqC,EAAWnC,EAAUC,EAAY,CAAEG,cAAc,OAc3E,OAVAuB,GAA2B,WACzBlB,EAAU,EACV6B,EAAc,EACdF,OAAYjC,EACZS,OAAqBT,EACrB+B,EAAoB,CAAEpD,OAAQ,UAAWC,KAAM,OAC/CwD,EAAgBK,QAAQ,CAAEC,WAAY,CAAC,OAAQ,cAC/CK,YAAYC,KAAKrB,MAGZ,CACLS,EAEA,WAGE,OAFAtC,EAAWK,qBAAsB,EAE1B,WACLiC,EAAgBlC,aAChB8B,EAAYrC,EAAsBqC,EAAWI,EAAiBtC,EAAY,CACxEG,cAAc,OCxGNgD,CAAetB,EAAcE,EAAkBL,GAA8B,QADtF0B,EAhBoE,oBAqBzE9B,KACAU,EAAgBpE,SAChB+D,IACA,YACmByB,EADnB,MAEST,QAAQ,CAAEC,WAAY,CAAC,OAAQ,cACxCK,YAAYC,KAAKrB,IAuBnB,OApBA3D,qBAAU,WACR,GAAIoD,IAAwD,CAAC,IAClD+B,EADiD,YACrCD,EADqC,MAQ1D,OANApB,EAAgBpE,SAAU,EAEtB+D,GACFI,EAAiB,CAAElD,OAAQ,UAAWC,KAAM,OAGvCuE,OAIR,IAE8BC,mBAC/B,kBAAM3I,uBAAa8G,EAAwDK,KAC3E,CAACA,KC9DCyB,EAAsC,CAC1C5B,qBAAqB,GAGhB,SAAS6B,IAES,IADvBvD,EACsB,uDADsB,GAEtCwD,EAAc,2BAAQF,GAAgBtD,GACtCyD,EAAkBvG,kBAA0C,eAF5C,EAIUlD,mBAA+B,CAC7D,YAAkE,IAA3C0B,EAA0C,EAA1CA,SACrB,OACE,cAAC,EAAD,CAEIsE,SAAUwD,EACV/B,2BAA4B,SAACiC,GAC3BD,EAAgB9F,QAAU+F,GAJhC,SAQGhI,KAKP,kBAAM+H,EAAgB9F,aApBF,mBAIfgG,EAJe,KAuBtB,OAAOA,ECtCT,IAAMpJ,EAAuB,CAAErB,MAAO,IAAKC,OAAQ,GAAIF,QAAS,QAAS2K,YAAa,GAEzEC,EAKR,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,SAAgD,IAAtCC,YAAsC,MAA/B,SAA+B,MAArBrC,YAAqB,MAAd,QAAc,EACzDsC,EAAS,2BAAQ1J,GAAUwJ,GAEjC,OAAO,+DAAcxJ,MAAO0J,EAAWD,QAAUF,EAAU,CAAEA,WAAY,OAAlE,aAA4EnC,MCVxEuC,EASR,SAAC,GASC,IARLC,EAQI,EARJA,MACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,SAMI,IALJxI,aAKI,MALI,GAKJ,MAJJ3C,aAII,MAJI,GAIJ,EAHJ6K,EAGI,EAHJA,SACAO,EAEI,EAFJA,oBACAC,EACI,EADJA,mBAEMhK,EAAuB,CAAErB,SAC/B,OACE,uBAEImL,SAAU,SAACjK,GACTA,EAAEoK,iBACM,OAARH,QAAQ,IAARA,KAAWjK,IAEbG,MAAM,aAAGtB,QAAS,SAAY8K,GANlC,UASGO,EACD,kCACGH,EACD,uBAAaH,KAAM,OAAQI,WAAUvI,QAAOtB,aAE7CgK,MCpCME,EAAsC,CAAExL,QAAS,OAAQY,OAAQ,iBCWjE6K,EAAkC,SAAC/J,GAAW,IAAD,EAClDgK,EAAQ,UAAGhK,EAAMgK,gBAAT,QAAqBhK,EAAMiK,cADe,EAEpB5K,mBAAS,GAAD,OAAI2K,IAFQ,mBAEjDE,EAFiD,KAErCC,EAFqC,OAGpBvB,EAAgB,CAAE7B,qBAAqB,IAHnB,mBAGjDqD,EAHiD,KAGpCC,EAHoC,KAexD,OACE,gCACE,cAAC,EAAD,CAEIb,MAAO,oBACPC,SAf+C,SAAChK,GACtD0K,EAAc1K,EAAEsE,OAAO7C,QAejBwI,SAZS,WACfW,IACA,IAAMC,EAAeC,SAASL,EAAY,IAC1ClK,EAAMwK,aAAa,CAAER,SAAUM,EAAe,EAAIA,EAAeN,KAU3D9I,MAAOgJ,EACPd,SAAS,2BAAMU,GAAP,IAA6BW,aAAc,QACnDb,mBACE,cAAC,EAAD,CAEIP,KAAM,SACNrC,KAAM,cACNoC,SAAU,CAAE7K,MAAO,OAAQW,OAAQ,sBAM7C,cAACkL,EAAD,UACE,cAAC,EAAD,CAAuBlG,KAAM,aCxCxBwG,EAGR,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,gBAAiB3D,EAAW,EAAXA,KACjB4D,EAAeD,IADa,EAEE/B,IAFF,mBAE3BwB,EAF2B,KAEdC,EAFc,KAIlC,OACE,sBAAWzK,MAAOkK,EAAlB,UACE,cAAC,EAAD,CAEIX,QACEyB,GACC,WACCP,IACAO,KAEJ5D,SAGJ,cAACoD,EAAD,UACE,cAAC,EAAD,CAAuBlG,KAAM,aCpB/B2G,EAA0C,CAAE3L,OAAQ,eAAgBV,OAAQ,IAgBrEsM,EAA4C,SAAC9K,GACxD,IAAI+K,EACAC,EAEJ,GAAIhL,EAAM+K,kBAAmB,CAAC,IAAD,EACc,CAAC/K,EAAM+K,kBAAmB,IAAlEA,EAD0B,KACPC,EADO,SAEtB,CACL,IAAMC,EAAkCjL,EAAMkL,uBADzC,EAGoCC,MAAMC,QAAQH,GACnDA,EACA,CAACA,EAAiC,IALjC,mBAGJF,EAHI,KAGeC,EAHf,KAN2D,MAcxB3L,mBAAS,GAAD,OA/BhB,KAiBgC,mBAc3DgM,EAd2D,KAc5CC,EAd4C,OAe9B1C,IAf8B,mBAe3DwB,EAf2D,KAe9CC,EAf8C,KA8BlE,OACE,qCACE,gCACE,cAAC,EAAD,CAEIb,MAAO,MACPtI,MAAOmK,EACP5B,SAXc,SAAC,GAAuE,IAApD8B,EAAmD,EAApExH,OAAU7C,MACnCoK,EAAiBC,IAWT7B,SArBS,WACjBW,IACA,IAAMmB,EAAiBjB,SAASc,EAAe,IAE/CG,GAAkB,GAAKA,GAvCQ,IAwC3BT,EAAkBS,GAClBF,EAAiB,MAgBb/M,MAAO,GACP6K,SAAUU,EACVH,oBAAqB,cAAC,EAAD,CAAcN,KAAM,SAAUrC,KAAM,6BAG7D,qBAAWpH,MAAOiL,EAAlB,SACE,cAACT,EAAD,UACE,cAAC,EAAD,CAAuBlG,KAAM,cAIlC8G,MCjEMS,EAAwD,SAACzL,GAAW,IAAD,EACxE4K,EAAY,UAAG5K,EAAM4K,oBAAT,QAAyB5K,EAAM2K,kBAD6B,EAE1C/B,IAF0C,mBAEvEwB,EAFuE,KAE1DC,EAF0D,KAI9E,OACE,sBAAWzK,MAAOkK,EAAlB,UACE,cAAC,EAAD,CAEIX,QAAS,WACPkB,IACAO,KAEF5D,KAAMhH,EAAMgH,OAGhB,cAACoD,EAAD,UACE,cAAC,EAAD,CAAuBlG,KAAM,aCPxBwH,EAAsC,SAAC1L,GAClD,OACE,sBAAWJ,MAAO,CAAEV,OAAQ,mBAA5B,UACE,qBAAWU,MAAO,CAAEV,OAAQ,YAA5B,SACE,iCAASc,EAAM2L,aAEjB,cAAC,EAAD,4BAEI3E,KAAM,YACFhH,EAAM4L,WACN,CAAEhB,aAAc5K,EAAM4L,YACtB,CAAEjB,gBAAiB3K,EAAM6L,kBAGjC,cAAC,EAAD,CAEI7E,KAAM,mBACN2D,gBAAiB3K,EAAM8L,iBAG3B,cAAC,EAAD,CAEI9E,KAAM,kBACN2D,gBAAiB3K,EAAM+L,gBAG3B,cAAC,EAAD,4BAEI/E,KAAM,sBACFhH,EAAMgM,uBACN,CAAEpB,aAAc5K,EAAMgM,wBACtB,CAAErB,gBAAiB3K,EAAMiM,8BAGjC,cAAC,EAAD,eACOjM,EAAM+K,kBACP,CAAEA,kBAAmB/K,EAAM+K,mBAC3B,CAAEG,qBAAsBlL,EAAMkL,wBAEpC,qBAAWtL,MAAO,CAAEsM,UAAW,mBAAoBhN,OAAQ,YAC3D,cAAC,EAAD,4BAEIsL,aAAcxK,EAAMwK,mBACGlF,IAAnBtF,EAAMgK,SACN,CAAEC,YAAajK,EAAMiK,aACrB,CAAED,SAAUhK,EAAMgK,iB,OCjEzB,SAASmC,EAAWC,EAAqBC,GAC9C,GAAID,EAAcC,EAChB,MAAMvJ,MAAM,0CAUd,IAZ8E,MAM5EuJ,EAAeD,EAAc,EAAI,EAAC,EAAMA,EAAcC,GAAgB,EAAC,EAAOA,GANF,mBAKvEC,EALuE,KAK1DC,EAL0D,KAOxEC,EAASrB,MAAMiB,GAClBK,KAAK,MACL5M,KAAI,SAAC6M,EAAGC,GAAJ,OAAUA,KACXC,EAAyB,GAExBJ,EAAO1E,OAASyE,GAAe,CACpC,IAAMM,EAAYxI,KAAKyI,MAAMzI,KAAK0I,SAAWP,EAAO1E,QAEhDwE,GACFM,EAAaI,KAAKR,EAAOK,IAI3BA,EAAYL,EAAO1E,OAAS,EAAK0E,EAAOK,GAAaL,EAAOS,MAAUT,EAAOS,MAG/E,OAAOX,EAAcM,EAAeJ,ECtBtC,IAAMU,EAAQ,SACP,SAASC,EAAe1O,GAC7B,IAAI2O,EAAY/I,KAAKC,MAAMiG,SAAS9L,EAAM4O,MAAM,GAAI,IAAMH,GAAS7I,KAAK0I,SAAW,EAAI,KAGvF,MAAM,IAAN,QAFAK,EAAYA,EAAYF,EAAQE,EAAYF,EAAQE,GAE/BE,SAAS,IAAIC,SAAS,EAAG,MCJhD,IAAIC,EAAa,GAUJC,EAAuC,SAC7CC,GACHF,EAAWR,KAAKU,IAFPD,EAAuC,SAK9Cd,GACF,OAAOa,EAAWb,IANTc,EAAuC,WAUhDD,EAAa,ICnBV,SAASG,EAAiBvB,GAC/B,IAAMwB,EAAcvJ,KAAKyI,MAAMzI,KAAK0I,SAAWX,GACzCyB,EAAYJ,EAAsBG,GAExC,IAAKC,EACH,MAAM/K,MAAM,wBAGd,OAAO+K,ECPF,IAAMC,EAAc,SAAwBlJ,EAAWmJ,GAAnC,OACzBC,YAAK,CAAElO,IAAK6E,EAAWC,GAASqJ,QAASF,KCD9BG,GAA+B,mBAM/BC,GAA+B,wBAgB/BC,GAAc,YCHdC,GAAY,UAEZC,GAAgC,SAACC,GAAD,OAC3CT,EAAY,GAAD,OACNK,GADM,YAC0BI,GACnCpB,EAAekB,MAGNG,GAAgCR,YAAK,CAChDlO,IAAKoO,GACLD,QAAS,IAGEQ,GAAqCT,YAAK,CACrDlO,IAAKqO,GACLF,QAASI,KAGPK,GAAeV,YAAK,CAAElO,IAAKsO,GAAaH,QP/Bf,KOgChBU,GAAkB,kBAA2BD,IAC7CE,GAA2BZ,YAAK,CAAElO,IDXR,yBCWsCmO,QAAS,IAEhFY,GAA4B,CAAC,EAAG,GAAahP,KACjD,SAACiP,GAAD,gBD/B2C,yBC+B3C,YAA2CA,MAGhCC,GAAkC,kBAI7CF,GAAyBhP,KAAI,SAACC,EAAK6M,GAAN,OAC3BqB,YAAK,CAAElO,IAAKA,EAAKmO,QAAS,CAAED,KAAMM,GAA8B3B,UAGhEqC,GAA4BD,KAEnBE,GAA+B,kBAGvCD,IAECE,GAAiB,kBAAcvK,EAAW,gBCrCnCkH,GAAgB,WAC3B,IACMsD,EAD4BF,KACapP,IAAIuP,IAFJ,EAOPC,YAAeT,IAPR,mBAOxCU,EAPwC,KAO1BC,EAP0B,KAQzCC,EAAcL,EAAatP,IAAI4P,IAErC,OAAO,WACL,IAAMC,EAAYF,EAAYF,GAAc,GACtCK,EAAuB,EAAIL,EAES,OAAtCH,EAAaQ,IACfJ,EAAgBI,GAGiB,OAA/BR,EAAaG,IACfE,EAAYF,GAAc,GAAGnC,EAAeuC,MAKlD,SAASN,GACPQ,GAEA,OAAOC,YAAeD,GAGxB,SAASH,GAAcK,GAA4D,IAAD,EAChF,OAAOT,YAAc,iBAACS,QAAD,IAACA,OAAD,EAACA,EAAK9B,YAAN,QAAcS,IAG9B,IC3DKsB,GD2DCjE,GAAiB,WAC5B,IAAMkD,EAA4BC,KAD0B,EAEdI,YAAeL,EAA0B,IAF3B,mBAErDgB,EAFqD,KAEhCC,EAFgC,KAGtDV,EAAkBW,YAAkBtB,IAE1C,OAA+B,OAAxBoB,OACH1K,EACA,WACE2K,EAAe,MACfV,EAAgB,KAIXxD,GAAgB,WAC3B,IAAMiD,EAA4BC,KADyB,EAEbI,YAAeL,EAA0B,IAF5B,mBAEpDgB,EAFoD,KAE/BC,EAF+B,KAI3D,OAA+B,OAAxBD,EACH,WACEC,EAAe,CACbjC,KAAMM,GAA8B,WAGxChJ,GAGO2G,GAA4B,WACvC,IAAMyC,EAAeC,KACf3E,EAAW6F,YAAenB,GAF2B,EAGrBrP,mBAAS,CAAE2O,KAAMQ,KAHI,mBAGpD2B,EAHoD,KAGvCC,EAHuC,KAIrDC,EAAmBH,YAAkBC,EAAYnC,MAMvD,OAJA1K,qBAAU,WACR+M,GAAiB,SAACC,GAAD,OAAW,EAAIA,OAC/B,CAACH,IAEG,WACLC,EAAe,CAAEpC,KAAML,EAAiB,KAAD,IAAC3D,EAAY,QAIlDuG,GAA4D,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAC7DC,EAAYP,YAAkBM,GAMpC,OAJAlN,qBAAU,WACRmN,GAAU,SAACC,GAAD,OAAiB,EAAIA,OAC9B,CAACD,IAEG,8BAGIvF,GAAuB,WAClC,IAAMwD,EAAeC,KACf3E,EAAW6F,YAAenB,GAFuD,EAG7CrP,mBAAwB,IAHqB,mBAGhFsR,EAHgF,KAGjEC,EAHiE,KASvF,OAJAtN,qBAAU,kBAAMsN,GAAiB,SAACC,GAAD,OAAiBA,EAAW/I,OAAS,EAAI,GAAK+I,OAAc,CAC3FF,IAGK,CACL,SAACG,GACC,IAAMC,EAAe,SAAG/G,EAAY,GAGpC4G,EACEzE,EAAW4E,EAHgBA,EAAkBD,EArGzB,KAwG6BjR,KAAI,SAACmR,GAAD,aAEnD,aADA,CACC,GAAD,CAEIR,gBAAe,UACb/C,EAAsBuD,UADT,QAEZ,WACC,MAAMlO,MAAM,sBADb,UAQb6N,IAIS1G,GAAc,WACzB,IAAMyE,EAAeC,KAErB,OAAOkB,YAAenB,IE/IlB9O,GAAuB,CAAEpB,OAAQ,OAAQD,MAAO,QAEzC0S,GAAyD,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACjEzS,EAAQoR,YAAeqB,GACvBC,EAAY,2BAAQvR,IAAR,IAAelB,gBAAiBD,IAElD,OAAO,qBAAWmB,MAAOuR,KCDdC,GAGR,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACX1R,EAAuB,CAAEpB,OAAQ6S,EAAW9S,MAAO8S,GADxB,EAEWhS,mBAASmP,IAFpB,mBAE1B+C,EAF0B,KAEVC,EAFU,KAG3BjD,EAASsB,YAAe0B,GACxBvC,EAA4BC,KAC5BwC,EAAoB5B,YAAeb,EAA0BT,IAQnE,OANAjL,qBAAU,WACR,IAAMoO,EAAW5D,EAAYI,GAA8BoD,GAC3D7D,EAAuBiE,GACvBF,EAAkBE,KACjB,IAGD,qBAAW9R,QAAX,SACG6R,GAAqBF,IAAmB/C,IACvC,cAAC,GAAD,CAAa0C,eAAgBO,EAAkBzD,UCvBjDpO,GAAuB,CAAEtB,QAAS,QAE3BqT,GAIR,SAAC,GAAgD,IAA9C5Q,EAA6C,EAA7CA,SAAU+G,EAAmC,EAAnCA,OAAQuJ,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3BjS,mBAAgC,MADL,mBAC5CuS,EAD4C,KACtCC,EADsC,KAWnD,OARAvO,qBAAU,WACR,IAAMwO,EAAW3G,MAAMrD,GACpB2E,KAAK,MACL5M,KAAI,kBAAM,wBAAC,GAAD,CAAoBwR,YAAWC,YAAaxR,IAAK6E,EAAW,cAEzEkN,EAAQC,KACP,CAACR,EAAWxJ,EAAQuJ,IAGrB,gCACE,qBAAWzR,SAAX,SAAqBgS,IACpB7Q,MClBMgR,GAAkB,WAC7B,IAAMrD,EAAeC,KACf3E,EAAW6F,YAAenB,GAFG,EAGTrP,mBAA8B,MAHrB,mBAG5B2S,EAH4B,KAGrBC,EAHqB,KA8BnC,OAAO,qBAAWrS,MAAO,CAAEsS,SAAU,GAAK1S,IAzB9B,SAACC,GACX,GAAIA,IAAMuS,EAAO,CAKf,IALgB,IACRxT,EAAWiB,EAAEC,wBAAblB,OACF6S,EAAS,UAAM7S,EAASwL,EAAf,MACXmI,EAAmC,KAE9BxF,EAAI,EAAGA,EAAI3C,EAAU2C,IAC5BwF,EACE,cAAC,GAAD,CAEIrK,OAAQkC,EACRqH,YACAC,WAAatH,EAAW2C,EAAI,GAAK,EAJrC,SAOGwF,IAKP1E,IACAwE,EAASE,KAIN,SAA2CH,KCvBvCI,GAAU,WAAO,IAAD,EPmDA,WAA+D,IAAD,EACzD/S,mBAAS6P,IADgD,mBAClFmD,EADkF,KACtEC,EADsE,KASzF,MAAO,CAACD,EAN0B,SAAC,GAAwC,IAAtCrI,EAAqC,EAArCA,SACnCgF,GAA4BD,KAC5BL,GAAeV,YAAK,CAAElO,IAAKsO,GAAaH,QAASjE,IACjDsI,EAAUpD,MOxDoCqD,GADrB,mBACpBF,EADoB,KACRG,EADQ,KAG3B,OACE,cAAC,IAAD,UACE,sBAEI5S,MAAO,CACLtB,QAAS,OACTmU,cAAe,SACfvT,OAAQ,uBAEVY,IAAKuS,EAPT,UAUE,cAAC,GAAD,IACA,cAAC,EAAD,CAEI1G,SAAU,qCACVE,iBACAC,kBACAC,iBACAE,6BACAf,wBACAjB,eACAO,aAAcgI,U,QCtCtBE,GAAY,GAOHC,GAAqC,SAC3CC,GACHF,GAAU1F,KAAK4F,IAFND,GAAqC,SAK5ChG,GACF,OAAO+F,GAAU/F,IANRgG,GAAqC,WAU9CD,GAAY,K,SNjBJ3C,K,oDAAAA,E,+CAAAA,E,qDAAAA,E,sCAAAA,E,oCAAAA,E,uCAAAA,Q,KOEL,ICYH8C,GCdSC,GAAiB,SAAwBC,GAAxB,OAA+D,SAC3FC,GAD2F,OAExFA,EAAMD,KAEEE,GAAcH,GAAe,Y,QCN7B5E,GAA+B,mBCc/BW,GAA2B,CAAC,EAAG,GAAGhP,KAC7C,SAACiP,GAAD,gBDHgD,yBCGhD,YAAgDA,MAGrCoE,GAA0C,SACrD3E,GAC0D,IAAD,EACnD4E,EAAyBxO,EAAW,GAAD,ODfC,wBCeD,YACJ4J,IAE/B9P,EAAQ0O,EAZS,WAcvB,OAAO,EAAP,kBACG0B,GAAyBN,GAAU4E,GADtC,eAEGA,EAAyB1U,GAF5B,GAMW2U,GAAe,CAAEC,qBAAsB,GChBvCxH,GAAgB,WAC3B,IAAMyH,EAAWC,eAEjB,OAAO,WACLD,ELcyE,CAC3EjK,KAAM0G,GAAWyD,gBKXN1H,GAAiB,WAC5B,IAAMwH,EAAWC,eAIjB,OAAyB,OAFHE,aAAYX,GAAejE,GAAyB,UAGtEvJ,EACA,WACEgO,ELNqE,CAC3EjK,KAAM0G,GAAW2D,gBKSN3H,GAAgB,WAC3B,IAAMuH,EAAWC,eAIjB,OAAyB,OAFHE,aAAYX,GAAejE,GAAyB,KAGtE,WACEyE,ELbmE,CACzEjK,KAAM0G,GAAW4D,mBKcbrO,GAGO2G,GAA4B,WACvC,IAAMqH,EAAWC,eACXvJ,EAAWyJ,aAAYR,IAE7B,OAAO,WLxC8B,IACrCW,EKwCEN,GLxCFM,EMVK,SAA0BxH,GAC/B,IAAMwB,EAAcvJ,KAAKyI,MAAMzI,KAAK0I,SAAWX,GACzCwH,EAAQjB,GAAqB/E,GACnC,IAAKgG,EACH,MAAM9Q,MAAM,wBAGd,OAAO8Q,ED2C4BjG,CAAiB,KAAD,IAAC3D,EAAY,ILvCd,CAClDX,KAAM0G,GAAW8D,oBACjBC,QAAS,CAAEF,cKyCA1I,GAAuB,WAClC,IAAMoI,EAAWC,eACXvJ,EAAWyJ,aAAYR,IAE7B,OAAO,SAACnC,GACN,IL1CFtE,EK0CQuE,EAAe,SAAG/G,EAAY,GAGpCsJ,GL7CF9G,EK+CML,EAAW4E,EAJcA,EAAkBD,EAjDvB,KAqD6BjR,KAC/C,SAACmR,GAAD,uBACE2B,GAAqB3B,UADvB,QAEG,WACC,MAAMlO,MAAM,sBADb,MLjD0C,CACrDuG,KAAM0G,GAAWgE,uBACjBD,QAAS,CAAEtH,eKwDAvC,GAAc,kBAAcwJ,aAAYR,KEzE/CrT,GAAuB,CAAEpB,OAAQ,OAAQD,MAAO,QAEzC0S,GAAiD,SAAC,GAAoB,IAAlB+C,EAAiB,EAAjBA,WACzDvV,EAAQgV,aAAYX,GAAekB,IACnC7C,EAAY,2BAAQvR,IAAR,IAAelB,gBAAiBD,IAElD,OAAO,qBAAWmB,MAAOuR,KCAdC,GAGR,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACX1R,EAAuB,CAAEpB,OAAQ6S,EAAW9S,MAAO8S,GADxB,EAGWhS,mBAC1C6O,IAJ+B,mBAG1BqD,EAH0B,KAGVC,EAHU,KAO3BjD,EAASkF,aAAYX,GAAevB,IACpC0C,EAAqBR,aAAYX,GAAejE,GAAyBN,KACzE+E,EAAWC,eASjB,OAPAjQ,qBAAU,WACR,IAAM4Q,EAAUvP,EAAWuJ,IAC3ByE,GAAsBuB,GACtBZ,ERzBqC,SACvCM,EACArF,GAFuC,MAGc,CACrDlF,KAAM0G,GAAWoE,uBACjBL,QAAS,CAAEF,QAAOrF,WQoBP6F,CAA0BF,EAAS5C,IAC5CE,EAAkB0C,KACjB,IAGD,qBAAWtU,QAAX,SACGqU,GAAsB1C,EAAe,KAAOrD,IAC3C,cAAC,GAAD,CAAa8F,WAAYC,OC9B3BrU,GAAuB,CAAEtB,QAAS,QAE3BqT,GAIR,SAAC,GAAgD,IAA9C5Q,EAA6C,EAA7CA,SAAU+G,EAAmC,EAAnCA,OAAQuJ,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3BjS,mBAAgC,MADL,mBAC5CuS,EAD4C,KACtCC,EADsC,KAWnD,OARAvO,qBAAU,WACR,IAAMwO,EAAW3G,MAAMrD,GACpB2E,KAAK,MACL5M,KAAI,kBAAM,wBAAC,GAAD,CAAoBwR,YAAWC,YAAaxR,IAAK6E,EAAW,cAEzEkN,EAAQC,KACP,CAACR,EAAWxJ,EAAQuJ,IAGrB,gCACE,qBAAWzR,SAAX,SAAqBgS,IACpB7Q,MClBMgR,GAAkB,WAC7B,IAAM/H,EAAWyJ,aAAYR,IADM,EAET5T,mBAA8B,MAFrB,mBAE5B2S,EAF4B,KAErBC,EAFqB,KA6BnC,OAAO,qBAAWrS,MAAO,CAAEsS,SAAU,GAAK1S,IAzB9B,SAACC,GACX,GAAIA,IAAMuS,EAAO,CAKf,IALgB,IACRxT,EAAWiB,EAAEC,wBAAblB,OACF6S,EAAS,UAAM7S,EAASwL,EAAf,MACXmI,EAAmC,KAE9BxF,EAAI,EAAGA,EAAI3C,EAAU2C,IAC5BwF,EACE,cAAC,GAAD,CAEIrK,OAAQkC,EACRqH,YACAC,WAAatH,EAAW2C,EAAI,GAAK,EAJrC,SAOGwF,IAKPQ,KACAV,EAASE,KAIN,SAA2CH,K,STlBvCqC,GAAa,WAAqD,IAApDrB,EAAmD,uDAA3CH,GAAWyB,EAAgC,uCAC5E,OAAQA,EAAOjL,MACb,KAAK0G,GAAWoE,uBAAyB,IAAD,EAGlCG,EADFR,QAAWvF,EAFyB,EAEzBA,OAAQqF,EAFiB,EAEjBA,MAGrB,OAAO,2BAAKZ,GAAZ,mBAAoBY,EAAQrF,IAG9B,KAAKwB,GAAW8D,oBAAsB,IAEvBD,EACTU,EADFR,QAAWF,MAGb,OAAO,2BAAKZ,GAAUuB,EAAY,GAAaX,IAGjD,KAAK7D,GAAWgE,uBAAyB,IAE1BvH,EACT8H,EADFR,QAAWtH,OAGPgI,EAAchI,EAAOiI,OAAOF,EAAa,IAE/C,OAAO,2BAAKvB,GAAUwB,GAGxB,KAAKzE,GAAW2D,YAAc,IAAD,EAC3B,OAAO,2BAAKV,GAAZ,wBAAoBnE,GAAyB,GAAK,MAAlD,sCAA8E,GAA9E,IAGF,KAAKkB,GAAW4D,WACd,OAAO,2BACFX,GACwC,OAAvCA,EAAMnE,GAAyB,IAC/BqE,GAAwC,GACxC,MAIR,KAAKnD,GAAWyD,YAAc,IACElE,EAAiB0D,EAAvCK,qBAC0CqB,EAAW1B,EAApDnE,GAAyBS,IAC5BK,EAAuB,EAAIL,EAEjC,OAAO,uCACF0D,GAC0D,OAAzDA,EAAMnE,GAAyBc,IAC/B,GACA,CAAE0D,qBAAsB1D,IACb,OAAX+E,EAAkB,GAAlB,gBAA0BA,EAASvH,EAAe6F,EAAM0B,MAIhE,QACE,OAAO1B,EAGX,SAASuB,EAAYI,EAAef,GAClC,IAAMlD,EAAasC,EAAMY,GAEzB,OAAO,2BAAKe,GAAZ,mBAAqBf,EAAS,EAAIlD,MAIzBkE,GAAkB,SAAC5K,GAC9B6I,GAAS,uCACJO,IAEC,CAAC,EAAG,GAAaqB,QACnB,SAACI,EAAS/F,GAAV,mBAAC,eAAqB+F,GAAY3B,GAAwCpE,MAC1E,KALK,IAQP9E,cUhEJ,SAASkF,KACP,OAAOvK,EAAW,eChBb,IAAMyN,GAAU,WAAO,IAAD,EDPC,WAIxB,IAAD,EAC2B/S,oBAAiD,WAG7E,OAFAuV,G3BJyB,I2BMlBE,aAAYT,OAJlB,mBACIU,EADJ,KACWC,EADX,OAO6B3V,mBAAS6P,IAPtC,mBAOImD,EAPJ,KAOgB4C,EAPhB,KAeH,MAAO,CAACF,EAAO1C,EANmB,SAAC,GAA8C,IAA5CrI,EAA2C,EAA3CA,SACnC4K,GAAgB5K,GAChBgL,EAAaF,aAAYT,KACzBY,EAAU/F,MCR2CgG,GAD5B,mBACpBH,EADoB,KACb1C,EADa,KACD8C,EADC,KAG3B,OACE,cAAC,KAAD,CAAgBJ,QAAOjV,IAAKuS,EAA5B,SACE,sBAEIzS,MAAO,CACLtB,QAAS,OACTmU,cAAe,SACfvT,OAAQ,uBALd,UASE,cAAC,GAAD,IACA,cAAC,EAAD,CAEIyM,SAAU,0CACVE,iBACAC,kBACAC,iBACAE,6BACAf,wBACAjB,eACAO,aAAc2K,UCrCtBzC,GAAY,GAUHC,GAAqC,SAC3CC,GACHF,GAAU1F,KAAK4F,IAFND,GAAqC,SAK5ChG,GACF,OAAO+F,GAAU/F,IANRgG,GAAqC,WAU9CD,GAAY,I,gBCtBHxE,GAA+B,mBAiB/BE,GAAc,YAMdgH,GAA0B,yBCA1BvG,GAA2B,CAAC,EAAG,GAAGhP,KAC7C,SAACiP,GAAD,gBDZgD,yBCYhD,YAAgDA,M,GAG8BuG,eAAjEC,G,GAAAA,eAAgBC,G,GAAAA,cAAeC,G,GAAAA,eAAgBC,G,GAAAA,cAIjDvC,GAA0C,SACrD3E,GAC0D,IAAD,IACjB,CACtC5J,EAAW,GAAD,OD7B8B,wBC6B9B,YAAoC4J,IAC9CpB,EAfqB,YAahBgG,EADkD,KAC1B1U,EAD0B,KAMzD,OAAO,EAAP,kBACGoQ,GAAyBN,GAAU4E,GADtC,eAEGA,EAAyB1U,GAF5B,GAMI2U,IAAY,sBACflF,GAA+B,GADhB,gBAEfE,G/BrC0B,I+BmCX,gBAGfgH,GAA0B,GAHX,IAMlBE,GAAe,2BAAKlC,IAAiBsC,OACrC,IAAMxG,GAAiB,kBAAcvK,EAAW,gBAkBhD,SAAS+Q,KACP,MAAQ,CAAC,EAAG,GAAajB,QACvB,SAACI,EAAS/F,GAAV,mBAAC,eAAqB+F,GAAY3B,GAAwCpE,MAC1E,ICvDJ,IAEalD,GAAa,WACxB6J,IAAc,SAACzC,GAAW,IACW1D,EAAiB0D,EAA3CoC,0BACyCV,EAAW1B,EAApDnE,GAAyBS,IAC5BK,EAAuB,EAAIL,EAEjC,OAAO,2BACwD,OAAzD0D,EAAMnE,GAAyBc,IAC9B,GADD,gBAEGyF,GAA0BzF,IAClB,OAAX+E,EACC,GADD,gBAEGA,EAASvH,EAAe6F,EAAM0B,UAK9B5I,GAAiB,kBAC5ByJ,GAAcI,gBAAe,mBACT,OADS,EAAI9G,GAAyB,SAEpDvJ,EACA,WACEmQ,IAAc,4CACX5G,GAAyB,GAAK,MADnB,eAEXuG,GAA0B,GAFf,UAOXrJ,GAAgB,kBAC3BwJ,GAAcI,gBAAe,mBACT,OADS,EAAI9G,GAAyB,IAEpD,WACE4G,IAAc,kBAAMvC,GAAwC,YAE9D5N,MAGK0G,GAAyB,WACpCyJ,GCxDK,SAA0BrJ,GAC/B,IAAMwB,EAAcvJ,KAAKyI,MAAMzI,KAAK0I,SAAWX,GACzCyB,EAAY8E,GAAqB/E,GAEvC,IAAKC,EACH,MAAM/K,MAAM,wBAGd,OAAO+K,EDiDLF,CAAiB,KAAD,IAAC6H,GAAepH,IAAgB,KAChD,SAACkC,GAAD,OAAW,EAAIA,MAINvF,GAAoB,SAAC+F,GAChC,IAAMC,EAAe,SAAGyE,GAAepH,IAAgB,GAGvDjC,EAAW4E,EAFkBA,EAAkBD,EAjDrB,KAmDuBjR,KAAI,SAACmR,GAAO,IAAD,EAC1DyE,GAAa,UACX9C,GAAqB3B,UADV,QAER,WACC,MAAMlO,MAAM,sBADb,IAIH,SAAC4N,GAAD,OAAiB,EAAIA,SEvErB9Q,GAAuB,CAAEpB,OAAQ,OAAQD,MAAO,QAEzC0S,GAAoD,SAAC,GAAuB,IAArB2E,EAAoB,EAApBA,cAC5DnX,EAAQ8W,GAAcK,GACtBzE,EAAY,2BAAQvR,IAAR,IAAelB,gBAAiBD,IAElD,OAAO,qBAAWmB,MAAOuR,KCFdC,GAGR,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACX1R,EAAuB,CAAEpB,OAAQ6S,EAAW9S,MAAO8S,GADxB,EAGWhS,mBAC1C6O,IAJ+B,mBAG1BqD,EAH0B,KAGVC,EAHU,KAO3BjD,EAASgH,GAAchE,GACvBsE,EAAiBN,GAAc1G,GAAyBN,IAS9D,OAPAjL,qBAAU,WACR,IAAM4Q,EAAUvP,EAAWuJ,IAC3ByE,GAAsBuB,GACtBuB,GAAcvB,EAAS5C,GACvBE,EAAkB0C,KACjB,IAGD,qBAAWtU,QAAX,SACGiW,GAAkBtE,IAAmBrD,IACpC,cAAC,GAAD,CAAa0H,cAAeC,OC1B9BjW,GAAuB,CAAEtB,QAAS,QAE3BqT,GAIR,SAAC,GAAgD,IAA9C5Q,EAA6C,EAA7CA,SAAU+G,EAAmC,EAAnCA,OAAQuJ,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EAC3BjS,mBAAgC,MADL,mBAC5CuS,EAD4C,KACtCC,EADsC,KAWnD,OARAvO,qBAAU,WACR,IAAMwO,EAAW3G,MAAMrD,GACpB2E,KAAK,MACL5M,KAAI,kBAAM,wBAAC,GAAD,CAAoBwR,YAAWC,YAAaxR,IAAK6E,EAAW,cAEzEkN,EAAQC,KACP,CAACR,EAAWxJ,EAAQuJ,IAGrB,gCACE,qBAAWzR,SAAX,SAAqBgS,IACpB7Q,MClBMgR,GAAkB,WAAO,IAAD,EACT1S,mBAA8B,MADrB,mBAC5B2S,EAD4B,KACrBC,EADqB,KA6BnC,OAAO,qBAAWrS,MAAO,CAAEsS,SAAU,GAAK1S,IA1B9B,SAACC,GACX,GAAIA,IAAMuS,EAAO,CAMf,IALA,IAAMhI,EAAWwL,GAAepH,IACxB5P,EAAWiB,EAAEC,wBAAblB,OACF6S,EAAS,UAAM7S,EAASwL,EAAf,MACXmI,EAAmC,KAE9BxF,EAAI,EAAGA,EAAI3C,EAAU2C,IAC5BwF,EACE,cAAC,GAAD,CAEIrK,OAAQkC,EACRqH,YACAC,WAAatH,EAAW2C,EAAI,GAAK,EAJrC,SAOGwF,IAKPQ,KACAV,EAASE,KAIN,SAA2CH,KCvBvCI,GAAU,WAAO,IAAD,EPwCA,WAA+D,IAAD,EACnE/S,mBAAS6P,IAD0D,mBAClFpP,EADkF,KAC7EgW,EAD6E,KAazF,MAAO,CAAChW,EAVwB,SAAC,GAA8C,IAA5CkK,EAA2C,EAA3CA,SACjCsL,GAAe,uCACVlC,IACAsC,MAFS,mBAGXtH,GAAcpE,KAGjB8L,EAAO5G,MOjDuCqD,GADrB,mBACpBF,EADoB,KACRG,EADQ,KAG3B,OACE,sBAEI5S,MAAO,CACLtB,QAAS,OACTmU,cAAe,SACfvT,OAAQ,uBAEVY,IAAKuS,EAPT,UAUE,cAAC,GAAD,IACA,cAAC,EAAD,CAEI1G,SAAU,6CACVC,cACAE,kBACAC,iBACAC,0BACAjB,qBACAf,SAAUwL,GAAepH,IACzB5D,aAAcgI,QC/BlBuD,GAAoC,CAAEzX,QAAS,QAExC8T,GAAU,kBACrB,cAAC,EAAD,UACE,sBAAWxS,MAAO,CAAEtB,QAAS,OAAQmU,cAAe,SAAUjU,OAAQ,sBAAtE,UACE,qBAAWoB,MAAO,CAAEV,OAAQ,eAAgBmC,WAAY,QAAxD,qBACA,sBAAWzB,MAAO,CAAEtB,QAAS,OAAQ4T,SAAU,GAA/C,UACE,qBAAWtS,MAAOmW,GAAlB,SACE,cAAC,GAAD,MAEF,qBAAWnW,MAAOmW,GAAlB,SACE,cAAC,GAAD,MAEF,qBAAWnW,MAAOmW,GAAlB,SACE,cAAC,GAAD,e,MChBVC,IAASC,OAAO,cAAC,GAAD,IAASxS,SAASyS,eAAe,W","file":"static/js/main.dc7bab7f.chunk.js","sourcesContent":["import React, { cloneElement, useState } from 'react';\nimport type { CSSProperties, FC } from 'react';\n\nconst boxInnerWidth = 164;\nconst initialFontSize = 12;\n\nconst outerBoxStyle: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  color: 'white',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst innerBoxStyle: CSSProperties = {\n  display: 'flex',\n  flexWrap: 'nowrap',\n  whiteSpace: 'nowrap',\n};\n\nconst elementStyle: CSSProperties = {\n  margin: '0 5px',\n};\n\nexport const DisplayInfo: FC<{ info?: (JSX.Element | string)[] }> = ({ info }) => {\n  const [fontSize, setFontSize] = useState<number | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !fontSize) {\n      const { width } = e.getBoundingClientRect();\n      width > boxInnerWidth && setFontSize((initialFontSize * boxInnerWidth) / width);\n    }\n  };\n\n  return info ? (\n    <div\n      {...{\n        ref,\n        style: { ...outerBoxStyle, ...innerBoxStyle, fontSize: fontSize ?? initialFontSize },\n      }}\n    >\n      {info.map((e) =>\n        typeof e === 'string' ? (\n          <span {...{ style: elementStyle }} key={e}>\n            {e}\n          </span>\n        ) : (\n          cloneElement(e, {\n            ...e.props,\n            style: { ...(e.props.style ?? {}), ...elementStyle },\n          })\n        )\n      )}\n    </div>\n  ) : (\n    <div {...{ style: { ...outerBoxStyle, backgroundColor: 'transparent' } }} />\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useContext, useState } from 'react';\n\ninterface TipsPoolMethods {\n  addTipHandler: (dispatcher: () => void) => void;\n  removeTipHandler: (dispatcher: () => void) => void;\n  hideOtherTips: (except: () => void) => void;\n}\n\nconst createTipsPoolMethods = (): TipsPoolMethods => {\n  let dispatchersPool: (() => void)[] = [];\n\n  return {\n    addTipHandler: (handler) => {\n      dispatchersPool = [...dispatchersPool, handler];\n    },\n\n    removeTipHandler: (handler) => {\n      dispatchersPool = dispatchersPool.filter((nextHandler) => nextHandler !== handler);\n    },\n\n    hideOtherTips: (except) => {\n      dispatchersPool.forEach((nextHandler) => nextHandler !== except && nextHandler());\n    },\n  };\n};\n\ninterface TipsPoolContextValue {\n  tipsPoolMethods: TipsPoolMethods;\n  popupDelay: number;\n}\n\nconst TipsPoolContext = createContext<TipsPoolContextValue | null>(null);\n\nexport const TipsPoolProvider: FC<{ popupDelay?: number }> = ({ popupDelay = 100, children }) => {\n  const [tipsPoolMethods] = useState(createTipsPoolMethods);\n\n  return (\n    <TipsPoolContext.Provider {...{ value: { tipsPoolMethods, popupDelay } }}>\n      {children}\n    </TipsPoolContext.Provider>\n  );\n};\n\nexport const useTipsPool = (): TipsPoolContextValue | null => useContext(TipsPoolContext);\n","import type { CSSProperties, FC } from 'react';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTipsPool } from './TipsPoolProvider';\n\nconst infoMarkStyle: CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexShrink: 0,\n  fontSize: '1.2em',\n  fontWeight: 'bolder',\n  color: 'gray',\n  backgroundColor: 'rgb(228, 232, 255)',\n  width: '1.2em',\n  height: '1.2em',\n  borderRadius: '0.6em',\n  cursor: 'default',\n};\n\nconst infoTipStyle: CSSProperties = {\n  position: 'absolute',\n  whiteSpace: 'normal',\n  width: 200,\n  padding: 10,\n  color: 'black',\n  backgroundColor: 'rgb(228, 232, 255)',\n  fontSize: '14px',\n  boxShadow: '3px 3px rgb(141, 144, 166)',\n};\n\nconst InfoTipBox: FC<{\n  popupInfo: JSX.Element | string;\n  left: number;\n  bottom: number;\n  clearDelay: () => void;\n  toHide: () => void;\n}> = ({ popupInfo, left, bottom, clearDelay, toHide }) => (\n  <div\n    {...{\n      style: { ...infoTipStyle, left, bottom },\n      onMouseOver: clearDelay,\n      onFocus: clearDelay,\n      onMouseLeave: toHide,\n      onBlur: toHide,\n    }}\n  >\n    {popupInfo}\n  </div>\n);\n\nexport const InfoMark: FC<{ style?: CSSProperties; popupInfo: JSX.Element | string }> = ({\n  style = {},\n  popupInfo,\n}) => {\n  const infoMarkRef = useRef<HTMLDivElement>(null);\n  const delayTimeoutID = useRef<NodeJS.Timeout | null>(null);\n\n  const [infoTipBoxPosition, setInfoTipBoxPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n\n  const tipHandler = useCallback(() => setInfoTipBoxPosition(null), []);\n\n  const { tipsPoolMethods, popupDelay } =\n    useTipsPool() ??\n    (() => {\n      throw Error('TipsPoolProvider should be in the root of the app');\n    })();\n\n  const hideInfoTipOnMouseLeave = () => {\n    delayTimeoutID.current = setTimeout(() => setInfoTipBoxPosition(null), popupDelay);\n  };\n\n  const clearDelay = () => {\n    delayTimeoutID.current && clearTimeout(delayTimeoutID.current);\n    delayTimeoutID.current = null;\n  };\n\n  const showInfoTip = () => {\n    if (infoTipBoxPosition) {\n      clearDelay();\n\n      return;\n    }\n\n    if (infoMarkRef.current) {\n      tipsPoolMethods.hideOtherTips(tipHandler);\n      const { x, y } = infoMarkRef.current.getBoundingClientRect();\n      setInfoTipBoxPosition({ x, y });\n    } else {\n      throw Error('(PerformanceInfo) Info tip mark must exist');\n    }\n  };\n\n  useEffect(() => {\n    tipsPoolMethods.addTipHandler(tipHandler);\n\n    return () => tipsPoolMethods.removeTipHandler(tipHandler);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div\n        {...{\n          ref: infoMarkRef,\n          style: { ...infoMarkStyle, ...style },\n          onMouseOver: showInfoTip,\n          onFocus: showInfoTip,\n          onMouseLeave: hideInfoTipOnMouseLeave,\n          onBlur: hideInfoTipOnMouseLeave,\n          role: 'link',\n          tabIndex: 0,\n        }}\n      >\n        i\n      </div>\n      {infoTipBoxPosition && (\n        <InfoTipBox\n          /* eslint-disable @typescript-eslint/no-magic-numbers */\n          {...{\n            popupInfo,\n            left: infoTipBoxPosition.x + 10,\n            bottom:\n              document.documentElement.clientHeight -\n              document.documentElement.scrollTop -\n              infoTipBoxPosition.y +\n              5,\n            clearDelay,\n            toHide: hideInfoTipOnMouseLeave,\n          }}\n          /* eslint-enable @typescript-eslint/no-magic-numbers */\n        />\n      )}\n    </>\n  );\n};\n","import type { MetricsComponentProps } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { DisplayInfo } from './DisplayInfo';\nimport { InfoMark } from './InfoMark';\n\nconst AcknowledgeTip: FC = () => (\n  /* eslint-disable react/jsx-one-expression-per-line */\n  <>\n    <strong>TTI (Time to Interactive)</strong> metric measures the time until the main sub-resources\n    of the page have rendered and it is capable of reliably responding to user input quickly\n    (similar to <a {...{ href: 'https://web.dev/tti/', target: 'blank' }}>that</a>\n    ).\n    <br />\n    <br />\n    <strong>TBT (Total Blocking Time)</strong> measures the total amount of time until TTI in the\n    chunks where the main thread was blocked for long enough to prevent input responsiveness\n    (similar to <a {...{ href: 'https://web.dev/tbt/', target: 'blank' }}>that</a>).\n  </>\n  /* eslint-enable */\n);\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = (props) => {\n  switch (props.status) {\n    case 'done': {\n      const { TTI, TBT } = props.data;\n      return (\n        <DisplayInfo\n          {...{\n            info: [\n              `TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`,\n              <InfoMark key=\"InfoTip\" {...{ popupInfo: <AcknowledgeTip /> }} />,\n            ],\n          }}\n        />\n      );\n    }\n\n    case 'pending':\n      return <DisplayInfo {...{ info: ['performance measuring...'] }} />;\n\n    case 'error':\n      return (\n        <DisplayInfo\n          {...{\n            info: ['error', <InfoMark key=\"InfoTip\" {...{ popupInfo: props.error.message }} />],\n          }}\n        />\n      );\n\n    default:\n      break;\n  }\n\n  return <DisplayInfo />;\n};\n\nexport { TipsPoolProvider } from './TipsPoolProvider';\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<MetricsComponentProps>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps({\n            status: 'error',\n            data: null,\n            error: Error('(usePerfObserver) No long task has been registered'),\n          });\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps({ status: 'pending', data: null });\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<MetricsComponentProps>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return {\n      data: null,\n      status: 'error',\n      error: Error('(usePerfObserver) The browser does not support the library'),\n    };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps({ status: 'pending', data: null });\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => undefined);\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","import type { ButtonHTMLAttributes, CSSProperties, FC, MouseEventHandler } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  addStyle?: CSSProperties;\n  type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];\n  name?: string;\n}> = ({ onClick, addStyle, type = 'button', name = 'start' }) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type, ...(onClick ? { onClick } : null) }}>{name}</button>;\n};\n","import type { ChangeEventHandler, CSSProperties, FC, FormEventHandler } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  onSubmit?: FormEventHandler<HTMLFormElement>;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n  insertElementBefore?: JSX.Element;\n  insertElementAfter?: JSX.Element;\n}> = ({\n  label,\n  onChange,\n  onSubmit,\n  value = '',\n  width = 65,\n  addStyle,\n  insertElementBefore,\n  insertElementAfter,\n}) => {\n  const style: CSSProperties = { width };\n  return (\n    <form\n      {...{\n        onSubmit: (e) => {\n          e.preventDefault();\n          onSubmit?.(e);\n        },\n        style: { display: 'block', ...addStyle },\n      }}\n    >\n      {insertElementBefore}\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n      {insertElementAfter}\n    </form>\n  );\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","import { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { ChangeEventHandler, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport type ChooseGridProps = HookOrNotProp<'gridSize', number> & {\n  onGridChosen: (p: { gridSize: number }) => void;\n};\n\nexport const ChooseGrid: FC<ChooseGridProps> = (props) => {\n  const gridSize = props.gridSize ?? props.useGridSize();\n  const [inputValue, setInputValue] = useState(`${gridSize}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  const onChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const onSubmit = (): void => {\n    startMeasure();\n    const nextGridSize = parseInt(inputValue, 10);\n    props.onGridChosen({ gridSize: nextGridSize > 0 ? nextGridSize : gridSize });\n  };\n\n  return (\n    <div>\n      <InputField\n        {...{\n          label: 'input grid size: ',\n          onChange,\n          onSubmit,\n          value: inputValue,\n          addStyle: { ...buttonContainerStyle, marginBottom: '2px' },\n          insertElementAfter: (\n            <Button\n              {...{\n                type: 'submit',\n                name: 'change grid',\n                addStyle: { width: 'auto', margin: '3px 5px 0 10px' },\n              }}\n            />\n          ),\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { buttonContainerStyle } from './styles';\n\nexport type DisableOrEnableRowsHook = () => (() => void) | undefined;\n\nexport const DisableOrEnableRowsButton: FC<{\n  useOnPushButton: DisableOrEnableRowsHook;\n  name: 'disable odd rows' | 'enable odd rows';\n}> = ({ useOnPushButton, name }) => {\n  const onPushButton = useOnPushButton();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          onClick:\n            onPushButton &&\n            (() => {\n              startMeasure();\n              onPushButton();\n            }),\n          name,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport const ONE_HUNDRED_PERCENT = 100;\nconst DEF_PIXELS_PERCENT_TO_PAINT = 30;\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\ntype MassivePaintCallback = (percentage: number) => void;\n\nexport type PaintRandomPixels =\n  | {\n      paintRandomPixels: MassivePaintCallback;\n      usePaintRandomPixels?: undefined;\n    }\n  | {\n      usePaintRandomPixels:\n        | (() => MassivePaintCallback)\n        | (() => [MassivePaintCallback, JSX.Element[]]);\n      paintRandomPixels?: undefined;\n    };\n\nexport const MassivePaintButton: FC<PaintRandomPixels> = (props) => {\n  let paintRandomPixels: MassivePaintCallback;\n  let painterComponents: JSX.Element[];\n\n  if (props.paintRandomPixels) {\n    [paintRandomPixels, painterComponents] = [props.paintRandomPixels, []];\n  } else {\n    const checkResultForPaintRandomPixels = props.usePaintRandomPixels();\n\n    [paintRandomPixels, painterComponents] = Array.isArray(checkResultForPaintRandomPixels)\n      ? checkResultForPaintRandomPixels\n      : [checkResultForPaintRandomPixels, []];\n  }\n\n  const [percentsInput, setPercentsInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  const startPaint = (): void => {\n    startMeasure();\n    const percentsNumber = parseInt(percentsInput, 10);\n\n    percentsNumber >= 0 && percentsNumber <= ONE_HUNDRED_PERCENT\n      ? paintRandomPixels(percentsNumber)\n      : setPercentsInput('0');\n  };\n\n  const percentCallback = ({ target: { value: input } }: ChangeEvent<HTMLInputElement>): void => {\n    setPercentsInput(input);\n  };\n\n  return (\n    <>\n      <div>\n        <InputField\n          {...{\n            label: 'n: ',\n            value: percentsInput,\n            onChange: percentCallback,\n            onSubmit: startPaint,\n            width: 40,\n            addStyle: buttonContainerStyle,\n            insertElementBefore: <Button {...{ type: 'submit', name: 'paint n% random pixels' }} />,\n          }}\n        />\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {painterComponents}\n    </>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { buttonContainerStyle } from './styles';\n\ntype MeasuredControlButtonProps = { name: string } & HookOrNotProp<'onPushButton'>;\n\nexport const MeasuredControlButton: FC<MeasuredControlButtonProps> = (props) => {\n  const onPushButton = props.onPushButton ?? props.useOnPushButton();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          onClick: () => {\n            startMeasure();\n            onPushButton();\n          },\n          name: props.name,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport type { ChooseGridProps } from './ChooseGrid';\nimport { ChooseGrid } from './ChooseGrid';\nimport { DisableOrEnableRowsButton, DisableOrEnableRowsHook } from './DisableOrEnableRowsButton';\nimport type { HookOrNotProp } from './HookOrNotProp';\nimport type { PaintRandomPixels } from './MassivePaintButton';\nimport { MassivePaintButton } from './MassivePaintButton';\nimport { MeasuredControlButton } from './MeasuredControlButton';\n\nexport const DEF_GRID_SIZE = 32;\ntype ControlPanelProps = {\n  headline: string;\n  useDisableRows: DisableOrEnableRowsHook;\n  useEnableRows: DisableOrEnableRowsHook;\n} & HookOrNotProp<'repaintRow'> &\n  HookOrNotProp<'paintRandomSinglePixel'> &\n  PaintRandomPixels &\n  ChooseGridProps;\n\nexport const ControlPanel: FC<ControlPanelProps> = (props) => {\n  return (\n    <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n      <div {...{ style: { margin: '0 0 10px' } }}>\n        <strong>{props.headline}</strong>\n      </div>\n      <MeasuredControlButton\n        {...{\n          name: 're-paint',\n          ...(props.repaintRow\n            ? { onPushButton: props.repaintRow }\n            : { useOnPushButton: props.useRepaintRow }),\n        }}\n      />\n      <DisableOrEnableRowsButton\n        {...{\n          name: 'disable odd rows',\n          useOnPushButton: props.useDisableRows,\n        }}\n      />\n      <DisableOrEnableRowsButton\n        {...{\n          name: 'enable odd rows',\n          useOnPushButton: props.useEnableRows,\n        }}\n      />\n      <MeasuredControlButton\n        {...{\n          name: 'paint random pixel',\n          ...(props.paintRandomSinglePixel\n            ? { onPushButton: props.paintRandomSinglePixel }\n            : { useOnPushButton: props.usePaintRandomSinglePixel }),\n        }}\n      />\n      <MassivePaintButton\n        {...(props.paintRandomPixels\n          ? { paintRandomPixels: props.paintRandomPixels }\n          : { usePaintRandomPixels: props.usePaintRandomPixels })}\n      />\n      <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n      <ChooseGrid\n        {...{\n          onGridChosen: props.onGridChosen,\n          ...(props.gridSize === undefined\n            ? { useGridSize: props.useGridSize }\n            : { gridSize: props.gridSize }),\n        }}\n      />\n    </div>\n  );\n};\n","export function drawPixels(totalNumber: number, numberToDraw: number): number[] {\n  if (totalNumber < numberToDraw) {\n    throw Error('Number to draw must be less than total');\n  }\n\n  const [flagToWrite, numberToLeave] =\n    numberToDraw < totalNumber / 2 ? [true, totalNumber - numberToDraw] : [false, numberToDraw];\n  const pixels = Array(totalNumber)\n    .fill(null)\n    .map((_, i) => i);\n  const pickedPixels: number[] = [];\n\n  while (pixels.length > numberToLeave) {\n    const pickPixel = Math.floor(Math.random() * pixels.length);\n\n    if (flagToWrite) {\n      pickedPixels.push(pixels[pickPixel]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    pickPixel < pixels.length - 1 ? (pixels[pickPixel] = pixels.pop()!) : pixels.pop();\n  }\n\n  return flagToWrite ? pickedPixels : pixels;\n}\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\nconst range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport const getNextAtom = <K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> =>\n  atom({ key: getNextKey(prefix), default: defaultValue });\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoiceKeyPrefix = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<\n  AlternativeForChoice,\n  HoldColorForAlternativeAtom | null\n>;\nexport type AlternativeForChoice = typeof alternativeForChoiceKeyPrefix;\nexport type HoldColorForAlternativeAtom = {\n  atom: Atom<ColorForAlternative>;\n};\n\nexport const gridSizeKey = 'grid-size';\n\nexport interface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport type { RecoilState } from 'recoil';\nimport { atom } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  Atom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoiceKeyPrefix,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const createColorForAlternativeAtom = (choice: PixelChoice): Atom<ColorForAlternative> =>\n  getNextAtom(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativeKeyPrefix,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nlet gridSizeAtom = atom({ key: gridSizeKey, default: DEF_GRID_SIZE });\nexport const getGridSizeAtom = (): RecoilState<number> => gridSizeAtom;\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nconst alternativeForChoiceKeys = ([0, 1] as const).map(\n  (c) => `${alternativeForChoiceKeyPrefix}-${c}`\n) as [string, string];\n\nexport const createAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] =>\n  alternativeForChoiceKeys.map((key, i) =>\n    atom({ key: key, default: { atom: createColorForAlternativeAtom(i as PixelChoice) } })\n  ) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nlet alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n\nexport const getAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] => alternativeForChoiceAtoms;\n\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [refreshKey, createKey] = useState(createFreshKey);\n\n  const commandToCreateRefreshKey = ({ gridSize }: { gridSize: number }) => {\n    alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n    gridSizeAtom = atom({ key: gridSizeKey, default: gridSize });\n    createKey(createFreshKey);\n  };\n\n  return [refreshKey, commandToCreateRefreshKey];\n};\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { SetterOrUpdater, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  choiceForPixelPlaceholderAtom,\n  colorForAlternativePlaceholderAtom,\n  createColorForAlternativeAtom,\n  getAlternativeForChoiceAtoms,\n  getGridSizeAtom,\n  rememberActiveChoiceAtom,\n} from './State/State';\nimport type {\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorValue,\n  HoldColorForAlternativeAtom,\n  PixelChoice,\n} from './State/StateInterface';\nimport { storeAtomsMethods } from './State/storeAtomsMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\ntype ManageColorState = [ColorValue, SetterOrUpdater<ColorValue>];\n\nexport const useRepaintRow = (): (() => void) => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const alternatives = alternativeForChoiceAtoms.map(useAlternative) as [\n    HoldColorForAlternativeAtom | null,\n    HoldColorForAlternativeAtom | null\n  ];\n\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n  const colorsState = alternatives.map(useColorState) as [ManageColorState, ManageColorState];\n\n  return (): void => {\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  };\n};\n\nfunction useAlternative(\n  altForChoiceAtom: AlternativeForChoiceAtom\n): HoldColorForAlternativeAtom | null {\n  return useRecoilValue(altForChoiceAtom);\n}\n\nfunction useColorState(alt: HoldColorForAlternativeAtom | null): ManageColorState {\n  return useRecoilState(alt?.atom ?? colorForAlternativePlaceholderAtom);\n}\n\nexport const useDisableRows = (): (() => void) | undefined => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  return possibleAlternative === null\n    ? undefined\n    : () => {\n        setAlternative(null);\n        setActiveChoice(0);\n      };\n};\n\nexport const useEnableRows = (): (() => void) | undefined => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n\n  return possibleAlternative === null\n    ? () => {\n        setAlternative({\n          atom: createColorForAlternativeAtom(1),\n        });\n      }\n    : undefined;\n};\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [atomToPaint]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (): void => {\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  };\n};\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const usePaintRandomPixels = (): [(percentage: number) => void, JSX.Element[]] => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [pixelsToPaint, setPixelsToPaint] = useState<JSX.Element[]>([]);\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  return [\n    (percentage: number): void => {\n      const allPixelsNumber = gridSize ** 2;\n      const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n      setPixelsToPaint(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => (\n          // eslint-disable-next-line react/jsx-key\n          <PixelToPaint\n            {...{\n              pixelChoiceAtom:\n                storeAtomsMethods.get(p) ??\n                (() => {\n                  throw Error('It must be defined');\n                })(),\n            }}\n          />\n        ))\n      );\n    },\n    pixelsToPaint,\n  ];\n};\n\nexport const useGridSize = (): number => {\n  const gridSizeAtom = getGridSizeAtom();\n\n  return useRecoilValue(gridSizeAtom);\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  DISABLE_ROW = 'alternatives/disableRow',\n  ENABLE_ROW = 'alternatives/enableRow',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.DISABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.ENABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { choiceForPixelPlaceholderAtom, getAlternativeForChoiceAtoms } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getGridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  useDisableRows,\n  useEnableRows,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshApp } from './State/State';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <RecoilRoot>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n          key: refreshKey,\n        }}\n      >\n        <PixelsStage />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"recoil\" library',\n            useRepaintRow,\n            useDisableRows,\n            useEnableRows,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateRefreshKey,\n          }}\n        />\n      </div>\n    </RecoilRoot>\n  );\n};\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport const createNewPixelEntryAction = (\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> => ({\n  type: ActionType.CREATE_NEW_PIXEL_ENTRY,\n  payload: { pixel, choice },\n});\n\nexport const switchPixelChoiceAction = (\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> => ({\n  type: ActionType.SWITCH_PIXEL_CHOICE,\n  payload: { pixel },\n});\n\nexport const switchMultiplePixelsAction = (\n  pixels: ChoiceForPixel[]\n): ActionReturn<ActionType.SWITCH_MULTIPLE_PIXELS> => ({\n  type: ActionType.SWITCH_MULTIPLE_PIXELS,\n  payload: { pixels },\n});\n\nexport const disableRowAction = (): ActionReturn<ActionType.DISABLE_ROW> => ({\n  type: ActionType.DISABLE_ROW,\n});\n\nexport const enableRowAction = (): ActionReturn<ActionType.ENABLE_ROW> => ({\n  type: ActionType.ENABLE_ROW,\n});\n\nexport const repaintRowAction = (): ActionReturn<ActionType.REPAINT_ROW> => ({\n  type: ActionType.REPAINT_ROW,\n});\n","import { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  initialState,\n} from './State';\nimport type {\n  AlternativeForChoiceState,\n  ChoiceForPixel,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initState: State;\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nexport const appReducer = (state = initState, action: ActionReturn): State => {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n\n      return { ...state, ...updatePixel({} as State, pixel) };\n    }\n\n    case ActionType.SWITCH_MULTIPLE_PIXELS: {\n      const {\n        payload: { pixels },\n      } = action;\n\n      const stateUpdate = pixels.reduce(updatePixel, {} as State);\n\n      return { ...state, ...stateUpdate };\n    }\n\n    case ActionType.DISABLE_ROW: {\n      return { ...state, [alternativeForChoiceKeys[1]]: null, rememberActiveChoice: 0 };\n    }\n\n    case ActionType.ENABLE_ROW: {\n      return {\n        ...state,\n        ...(state[alternativeForChoiceKeys[1]] === null\n          ? createColorForAlternativeForChoiceEntry(1)\n          : null),\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n          ? {}\n          : { rememberActiveChoice: nextPotentialChoice }),\n        ...(altKey === null ? {} : { [altKey]: getRandomColor(state[altKey]) }),\n      };\n    }\n\n    default:\n      return state;\n  }\n\n  function updatePixel(update: State, pixel: ChoiceForPixel) {\n    const prevChoice = state[pixel];\n\n    return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n  }\n};\n\nexport const initializeState = (gridSize: number): void => {\n  initState = {\n    ...initialState,\n\n    ...([0, 1] as const).reduce(\n      (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n      {} as ColorForAlternativeState & AlternativeForChoiceState\n    ),\n\n    gridSize,\n  };\n};\n","import type { State } from './StateInterface';\n\nexport const createSelector = <K extends keyof State>(k: K): ((state: State) => State[K]) => (\n  state: State\n) => state[k];\n\nexport const getGridSize = createSelector('gridSize');\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport interface GridSizeState {\n  gridSize: number;\n}\n\nexport interface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { alternativeForChoicePlaceholderKey, colorForAlternativeKeyPrefix } from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const colorForAlternativeKey = getNextKey(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative\n  );\n  const color = getRandomColor(DEF_COLOR);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nexport const initialState = { rememberActiveChoice: 0 } as State;\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  disableRowAction,\n  enableRowAction,\n  repaintRowAction,\n  switchMultiplePixelsAction,\n  switchPixelChoiceAction,\n} from './State/actions';\nimport { createSelector, getGridSize } from './State/selectors';\nimport { alternativeForChoiceKeys } from './State/State';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const useRepaintRow = (): (() => void) => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(repaintRowAction());\n  };\n};\n\nexport const useDisableRows = (): (() => void) | undefined => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? undefined\n    : () => {\n        dispatch(disableRowAction());\n      };\n};\n\nexport const useEnableRows = (): (() => void) | undefined => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? () => {\n        dispatch(enableRowAction());\n      }\n    : undefined;\n};\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return () => {\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  };\n};\n\nexport const usePaintRandomPixels = (): ((percentage: number) => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return (percentage: number) => {\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n    dispatch(\n      switchMultiplePixelsAction(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n          (p) =>\n            storeKeysMethods.get(p) ??\n            (() => {\n              throw Error('It must be defined');\n            })()\n        )\n      )\n    );\n  };\n};\n\nexport const useGridSize = (): number => useSelector(getGridSize);\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '../State/selectors';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector(createSelector(altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { createSelector } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useSelector(createSelector(choiceForPixel));\n  const possibleAltControl = useSelector(createSelector(alternativeForChoiceKeys[choice]));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { useState } from 'react';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport type { State } from './StateInterface';\n\nexport const useCreateStore = (): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  (p: { gridSize: number }) => void\n] => {\n  const [store, provideStore] = useState<Store<State, ActionReturn<ActionType>>>(() => {\n    initializeState(DEF_GRID_SIZE);\n\n    return createStore(appReducer);\n  });\n\n  const [refreshKey, setNewKey] = useState(createFreshKey);\n\n  const commandToCreateFreshStore = ({ gridSize }: { gridSize: number }): void => {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  };\n\n  return [store, refreshKey, commandToCreateFreshStore];\n};\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport {\n  useDisableRows,\n  useEnableRows,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"react-redux\" library',\n            useRepaintRow,\n            useDisableRows,\n            useEnableRows,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateFreshStore,\n          }}\n        />\n      </div>\n    </Provider>\n  );\n};\n","import type { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\n\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n\n  get: (i: number) => ChoiceForPixel | undefined;\n\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport const gridSizeKey = 'grid-size';\n\nexport interface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport { goInterstate, Interstate } from 'use-interstate';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const { initInterstate, useInterstate, readInterstate, setInterstate } = goInterstate<\n  State & Interstate\n>();\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const [colorForAlternativeKey, color] = [\n    getNextKey(`${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative),\n    getRandomColor(DEF_COLOR),\n  ];\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\ninitInterstate({ ...initialState, ...createColorForChoiceDefState() });\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [key, setKey] = useState(createFreshKey);\n\n  const commandToCreateFreshKey = ({ gridSize }: { gridSize: number }): void => {\n    initInterstate({\n      ...initialState,\n      ...createColorForChoiceDefState(),\n      [gridSizeKey]: gridSize,\n    });\n\n    setKey(createFreshKey);\n  };\n\n  return [key, commandToCreateFreshKey];\n};\n\nfunction createColorForChoiceDefState(): ColorForAlternativeState & AlternativeForChoiceState {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as ColorForAlternativeState & AlternativeForChoiceState\n  );\n}\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  readInterstate,\n  setInterstate,\n  useInterstate,\n} from './State/State';\nimport type {\n  ColorForAlternativeState,\n  PixelChoice,\n  RememberActiveChoiceState,\n} from './State/StateInterface';\nimport { gridSizeKey, rememberActiveChoiceKey } from './State/StateInterface';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const repaintRow = (): void => {\n  setInterstate((state) => {\n    const { [rememberActiveChoiceKey]: activeChoice } = state;\n    const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    return {\n      ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n        ? ({} as RememberActiveChoiceState)\n        : { [rememberActiveChoiceKey]: nextPotentialChoice }),\n      ...(altKey === null\n        ? ({} as ColorForAlternativeState)\n        : { [altKey]: getRandomColor(state[altKey]) }),\n    };\n  });\n};\n\nexport const useDisableRows = (): (() => void) | undefined =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? undefined\n      : () => {\n          setInterstate(() => ({\n            [alternativeForChoiceKeys[1]]: null,\n            [rememberActiveChoiceKey]: 0,\n          }));\n        }\n  );\n\nexport const useEnableRows = (): (() => void) | undefined =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? () => {\n          setInterstate(() => createColorForAlternativeForChoiceEntry(1));\n        }\n      : undefined\n  );\n\nexport const paintRandomSinglePixel = (): void => {\n  setInterstate(\n    drawPixelToPaint(readInterstate(gridSizeKey) ** 2),\n    (prev) => (1 - prev) as PixelChoice\n  );\n};\n\nexport const paintRandomPixels = (percentage: number): void => {\n  const allPixelsNumber = readInterstate(gridSizeKey) ** 2;\n  const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n  drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => {\n    setInterstate(\n      storeKeysMethods.get(p) ??\n        (() => {\n          throw Error('It must be defined');\n        })(),\n\n      (prevChoice) => (1 - prevChoice) as PixelChoice\n    );\n  });\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeKeysMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlKey: ColorForAlternative }> = ({ altControlKey }) => {\n  const color = useInterstate(altControlKey);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { alternativeForChoiceKeys, setInterstate, useInterstate } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useInterstate(choiceForPixel);\n  const possibleAltKey = useInterstate(alternativeForChoiceKeys[choice]);\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    setInterstate(nextKey, defChoice);\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltKey && choiceForPixel !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlKey: possibleAltKey }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { readInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const gridSize = readInterstate(gridSizeKey);\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport {\n  paintRandomPixels,\n  paintRandomSinglePixel,\n  repaintRow,\n  useDisableRows,\n  useEnableRows,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { readInterstate, useRefreshApp } from './State/State';\nimport { gridSizeKey } from './State/StateInterface';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <div\n      {...{\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '10px auto 10px 10px',\n        },\n        key: refreshKey,\n      }}\n    >\n      <PixelsStage />\n      <ControlPanel\n        {...{\n          headline: 'Implemented using \"use-interstate\" library',\n          repaintRow,\n          useDisableRows,\n          useEnableRows,\n          paintRandomSinglePixel,\n          paintRandomPixels,\n          gridSize: readInterstate(gridSizeKey),\n          onGridChosen: commandToCreateRefreshKey,\n        }}\n      />\n    </div>\n  );\n};\n","import { TipsPoolProvider } from '@compare-react-state-management-solutions/performance-info';\nimport { App as RecoilApp } from '@compare-react-state-management-solutions/recoil-component';\nimport { App as ReduxHooksApp } from '@compare-react-state-management-solutions/redux-hooks-component';\nimport { App as UseInterstateApp } from '@compare-react-state-management-solutions/use-interstate-component';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst appsContainerStyle: CSSProperties = { display: 'flex' };\n\nexport const App: FC = () => (\n  <TipsPoolProvider>\n    <div {...{ style: { display: 'flex', flexDirection: 'column', height: 'calc(100vh - 20px)' } }}>\n      <div {...{ style: { margin: '5px 0 0 10px', fontWeight: 'bold' } }}>v.2.0.0</div>\n      <div {...{ style: { display: 'flex', flexGrow: 1 } }}>\n        <div {...{ style: appsContainerStyle }}>\n          <ReduxHooksApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <RecoilApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <UseInterstateApp />\n        </div>\n      </div>\n    </div>\n  </TipsPoolProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}