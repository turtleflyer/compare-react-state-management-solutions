{"version":3,"sources":["internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/reusable-components/InputField.tsx","component_packages/recoil-implementation/reusable-components/Spinner.tsx","component_packages/recoil-implementation/reusable-components/DelayedInput.tsx","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/controls/ChooseGrid.tsx","component_packages/recoil-implementation/reusable-components/Button.tsx","component_packages/recoil-implementation/controls/styles.ts","component_packages/recoil-implementation/controls/DisableEnableButtons.tsx","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/controls/MassivePaintButton.tsx","component_packages/recoil-implementation/controls/RandomPaintButton.tsx","component_packages/recoil-implementation/controls/RepaintButton.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/use-interstate-implementation/helpers/getNextAtom.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/reusable-components/InputField.tsx","component_packages/use-interstate-implementation/reusable-components/Spinner.tsx","component_packages/use-interstate-implementation/reusable-components/DelayedInput.tsx","component_packages/use-interstate-implementation/State/storeAtomsMethods.ts","component_packages/use-interstate-implementation/controls/ChooseGrid.tsx","component_packages/use-interstate-implementation/reusable-components/Button.tsx","component_packages/use-interstate-implementation/controls/styles.ts","component_packages/use-interstate-implementation/controls/DisableEnableButtons.tsx","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/controls/MassivePaintButton.tsx","component_packages/use-interstate-implementation/controls/RandomPaintButton.tsx","component_packages/use-interstate-implementation/controls/RepaintButton.tsx","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","component_packages/redux-connect-implementation/State/StateInterface.ts","component_packages/redux-connect-implementation/State/State.ts","component_packages/redux-connect-implementation/helpers/getNextAtom.ts","component_packages/redux-connect-implementation/reusable-components/InputField.tsx","component_packages/redux-connect-implementation/reusable-components/Spinner.tsx","component_packages/redux-connect-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-connect-implementation/State/selectors.ts","component_packages/redux-connect-implementation/State/storeKeysMethods.ts","component_packages/redux-connect-implementation/State/actionTypes.ts","component_packages/redux-connect-implementation/controls/ChooseGrid.tsx","component_packages/redux-connect-implementation/reusable-components/Button.tsx","component_packages/redux-connect-implementation/State/actions.ts","component_packages/redux-connect-implementation/controls/styles.ts","component_packages/redux-connect-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-connect-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-connect-implementation/controls/MassivePaintButton.tsx","component_packages/redux-connect-implementation/State/reducer.ts","component_packages/redux-connect-implementation/controls/RandomPaintButton.tsx","component_packages/redux-connect-implementation/controls/RepaintButton.tsx","component_packages/redux-connect-implementation/pixels-components/Pixel.tsx","component_packages/redux-connect-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-connect-implementation/App.tsx","component_packages/redux-connect-implementation/State/store.ts","App.tsx","index.js"],"names":["style","display","width","height","fontSize","color","padding","backgroundColor","borderRadius","justifyContent","PerformanceInfo","data","status","TTI","TBT","Math","round","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","clearTimeout","scheduleNext","setTimeout","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","children","updateStartMeasureCallback","measureFromCreating","name","useState","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","useRef","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","props","observe","entryTypes","longTasksList","getEntriesByType","every","task","info","performance","mark","createObserver","conditionalObserverResult","current","useEffect","callback","useMemo","cloneElement","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","range","getRandomColor","calcColor","parseInt","slice","random","toString","padStart","getNextAtom","defaultValue","atom","key","default","choiceForPixelPlaceholderKey","colorForAlternativePlaceholderKey","alternativeForChoicePlaceholderKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceAtoms","map","c","InputField","label","onChange","value","addStyle","type","baseStyle","marginRight","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","useMultiState","inputValue","showSpin","inputState","setInputState","alignItems","e","input","target","records","activeTimeoutId","waitDelay","storeAtoms","storeAtomsMethods","newAtom","push","i","ChooseGrid","gridSize","useRecoilValue","toRefresh","setAlternatives","a","useSetRecoilState","setGridSize","setter","useRefreshApp","refresher","inputKey","WrapDisplay","startMeasure","nextGridSize","marginBottom","Button","calcStyle","onClick","buttonContainerStyle","margin","DisableEnableButtons","setActiveChoice","manageAlternativesState","useRecoilState","perfMeasureAssets","evenOrOdd","prevAtom","drawPixelToPaint","totalNumber","randomIndex","floor","atomToSet","Error","renderInfoContainerStyle","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","MassivePaintButton","percentInput","setPercentInput","pixelsToPaint","setPixelsToPaint","prevPixels","checkPercent","percent","allPixelsNumber","pixelsNumberToPaint","pixelsAtoms","RandomPaintButton","atomToPaint","setAtomToPaint","paintRandomPixel","prev","RepaintButton","alternatives","colorsState","activeChoice","prevColor","nextPotentialChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","Array","fill","PixelsStage","stageHeight","setStageHeight","lines","useSmartMemo","currentLine","flexGrow","ref","getBoundingClientRect","App","flexDirection","borderTop","gridSizeKey","rememberActiveChoiceKey","alternativeForChoiceKeys","createAlternativeForChoiceAtoms","k","initialState","storedAtoms","addAtoms","atoms","forEach","record","getAtom","getUseInterstate","useInterstate","Scope","createFreshKey","beAwareWhenChosen","setAlternativesOfChoices","alternativesRecord","setColors","both","createKey","useRefreshScope","keyForScope","commandToCreateFreshKeyForScope","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","defInitialState","rememberActiveChoice","getChoiceForPixel","state","getColorForAlternative","getAlternativeForChoice","getGridSize","ActionType","storeKeys","storeKeysMethods","newKey","refreshKeyPlaceholder","connect","refreshKey","generateRefreshKey","switchPixelChoiceAction","pixel","SWITCH_PIXEL_CHOICE","payload","switchAlternatives","alternativeOfChoice","SWITCH_ALTERNATIVES","switchPixelChoice","p","pixels","repaintRow","REPAINT_ROW","altControl","ControlPixelInner","possibleAltControl","createPixel","CREATE_NEW_PIXEL_ENTRY","nextKey","appReducer","action","CHOOSE_GRID","REMEMBER_ACTIVE_CHOICE","TURN_ON_ALTERNATIVE","prevValue","colorForAlternativeForChoiceEntry","alternative","initializeState","reduce","entries","createStore","store","provideStore","useCreateStore","commandToCreateFreshStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f37f30dd.chunk.js","sourcesContent":["import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<Required<MetricsComponentProps>>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps((props) => ({ ...props, status: 'error' }));\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps((info) => ({ ...info, status: 'pending' }));\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from 'get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<Required<MetricsComponentProps>>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return { data: null, status: 'error' };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps((info) => ({ ...info, status: 'pending' }));\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => {});\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","const range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import { getNextKey } from 'get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return atom({ key: getNextKey(prefix), default: defaultValue });\n}\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\nexport interface CarryAtom<K extends keyof State> {\n  atom: Atom<K>;\n}\n\nexport type CarryAtomColorForAlternative = CarryAtom<ColorForAlternative> | null;\n\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: CarryAtomColorForAlternative;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getNextKey } from 'get-next-key';\nimport { getRandomColor } from 'random-color';\nimport { useState } from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { atom, useSetRecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  Atom,\n  CarryAtomColorForAlternative,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): Atom<ColorForAlternative> {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativePlaceholderKey,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport const gridSizeAtom = atom({ key: gridSizeKey, default: DEF_GRID_SIZE });\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nexport const alternativeForChoiceAtoms = (([0, 1] as const).map((c) =>\n  atom({\n    key: `${alternativeForChoicePlaceholderKey}-${c}`,\n    default: { atom: createColorForAlternativeAtom(c) },\n  })\n) as readonly AlternativeForChoiceAtom[]) as readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n];\n\nexport function createAlternativeForChoiceAtoms(): readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] {\n  return (([0, 1] as const).map((c) =>\n    atom({\n      key: `${alternativeForChoicePlaceholderKey}-${c}`,\n      default: { atom: createColorForAlternativeAtom(c) },\n    })\n  ) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nlet chooseGridInputKey: string;\n\nexport function useRefreshApp(): [({ gridSize }: { gridSize: number }) => void, string] {\n  const [, toRefresh] = useState({});\n  const setAlternatives = (alternativeForChoiceAtoms.map((a) =>\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useSetRecoilState(a)\n  ) as readonly SetterOrUpdater<CarryAtomColorForAlternative>[]) as readonly [\n    SetterOrUpdater<CarryAtomColorForAlternative>,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n  const setGridSize = useSetRecoilState(gridSizeAtom);\n\n  chooseGridInputKey = getNextKey('choose-grid-input');\n\n  return [\n    ({ gridSize }) => {\n      setAlternatives.every((setter, i) =>\n        setter({ atom: createColorForAlternativeAtom(i as PixelChoice) })\n      );\n      setGridSize(gridSize);\n      toRefresh({});\n    },\n    chooseGridInputKey,\n  ];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { gridSizeAtom, useRefreshApp } from '../State/State';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n}> = ({ addStyle = {} }) => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [refresher, inputKey] = useRefreshApp();\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.reset();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    refresher({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n          key: inputKey,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  createColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtom,\n  CarryAtomColorForAlternative,\n  ColorForAlternative,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  type ManageAlternativesState = [\n    CarryAtomColorForAlternative,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n\n  const manageAlternativesState = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilState(atom)\n  ) as readonly ManageAlternativesState[]) as readonly [\n    ManageAlternativesState,\n    ManageAlternativesState\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      const prevAtom = manageAlternativesState[evenOrOdd][0];\n\n      perfMeasureAssets[evenOrOdd][1]();\n\n      if (!prevAtom) {\n        setActiveChoice(evenOrOdd);\n        manageAlternativesState[evenOrOdd][1]({\n          atom: createColorForAlternativeAtom(evenOrOdd),\n        } as CarryAtom<ColorForAlternative>);\n      } else {\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        manageAlternativesState[evenOrOdd][1](null);\n      }\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtomColorForAlternative,\n  ColorValue,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternatives = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilValue(atom)\n  ) as readonly CarryAtomColorForAlternative[]) as readonly [\n    CarryAtomColorForAlternative,\n    CarryAtomColorForAlternative\n  ];\n\n  type ManageColorsState = [ColorValue, SetterOrUpdater<ColorValue>];\n  const colorsState = ([0, 1].map((i) =>\n    useRecoilState(alternatives[i]?.atom ?? colorForAlternativePlaceholderAtom)\n  ) as readonly ManageColorsState[]) as readonly [ManageColorsState, ManageColorsState];\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\n\nexport const App: FC = () => {\n  return (\n    <RecoilRoot>\n      <div {...{ style: { display: 'inline-block' } }}>\n        <div\n          {...{\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              height: 'calc(100vh - 20px)',\n              margin: '10px auto 10px 10px',\n            },\n          }}\n        >\n          <PixelsStage />\n          <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n            <div {...{ style: { margin: '0 0 10px' } }}>\n              <strong>Implemented using &apos;recoil&apos; library</strong>\n            </div>\n            <RepaintButton />\n            <DisableEnableButtons />\n            <RandomPaintButton />\n            <MassivePaintButton />\n            <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n            <ChooseGrid />\n          </div>\n        </div>\n      </div>\n    </RecoilRoot>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternativeAtom | null;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getUseInterstate } from '@smart-hooks/use-interstate';\nimport { getNextKey } from 'get-next-key';\nimport { getRandomColor } from 'random-color';\nimport { useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  Atom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nfunction createAlternativeForChoiceAtoms() {\n  return (alternativeForChoiceKeys.map((k, i) => [\n    k,\n    createColorForAlternativeAtom(i as PixelChoice),\n  ]) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [colorForAlternativePlaceholderKey]: DEF_COLOR,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\nlet storedAtoms: State = { ...initialState };\n\nfunction addAtoms<K extends keyof State>(...atoms: Atom<K>[]): void {\n  atoms.forEach(([key, record]) => {\n    storedAtoms = { ...storedAtoms, [key]: record };\n  });\n}\n\naddAtoms(...createAlternativeForChoiceAtoms());\n\nexport function getAtom<K extends keyof State>(key: K): Atom<K> {\n  return [key, storedAtoms[key]] as [K, State[K]];\n}\n\nexport const { useInterstate, Scope } = getUseInterstate<State>();\n\nfunction createFreshKey(): string {\n  return getNextKey('scope');\n}\n\nexport function useRefreshScope(): [string, ({ gridSize }: { gridSize: number }) => void] {\n  const [key, createKey] = useState(createFreshKey);\n\n  function commandToCreateFreshKeyForScope({ gridSize }: { gridSize: number }): void {\n    addAtoms([gridSizeKey, gridSize], ...createAlternativeForChoiceAtoms());\n    createKey(createFreshKey);\n  }\n\n  return [key, commandToCreateFreshKeyForScope];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getAtom, useInterstate } from '../State/State';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.reset();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeAtom,\n  getAtom,\n  useInterstate,\n} from '../State/State';\nimport type { ColorForAlternativeAtom, PixelChoice } from '../State/StateInterface';\nimport { rememberActiveChoiceKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useInterstate(...getAtom(rememberActiveChoiceKey)).set();\n\n  type SetColorForAlternativeAtom = SetInterstate<ColorForAlternativeAtom | null>;\n\n  const setAlternativesOfChoices = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).set()\n  ) as readonly SetColorForAlternativeAtom[]) as readonly [\n    SetColorForAlternativeAtom,\n    SetColorForAlternativeAtom\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      setAlternativesOfChoices[evenOrOdd]((prevAtom) => {\n        if (!prevAtom) {\n          setActiveChoice(evenOrOdd);\n          return createColorForAlternativeAtom(evenOrOdd);\n        }\n\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n\n        return null;\n      });\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useInterstate(...pixelChoiceAtom).set();\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey, gridSizeKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [atomToPaint, setAtomToPaint] = useState({ atom: getAtom(choiceForPixelPlaceholderKey) });\n  const paintRandomPixel = useInterstate(...atomToPaint.atom).set();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from 'performance-info';\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom, ColorValue, PixelChoice } from '../State/StateInterface';\nimport {\n  colorForAlternativePlaceholderKey,\n  rememberActiveChoiceKey,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternativesRecord = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).get()\n  ) as readonly (ColorForAlternativeAtom | null)[]) as readonly [\n    ColorForAlternativeAtom | null,\n    ColorForAlternativeAtom | null\n  ];\n  const setColors = ([0, 1].map((i) =>\n    useInterstate(...(alternativesRecord[i] ?? getAtom(colorForAlternativePlaceholderKey))).set()\n  ) as readonly SetInterstate<ColorValue>[]) as readonly [\n    SetInterstate<ColorValue>,\n    SetInterstate<ColorValue>\n  ];\n  const [activeChoice, setActiveChoice] = useInterstate(...getAtom(rememberActiveChoiceKey)).both();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    setColors[activeChoice]((prevColor) => {\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n      if (alternativesRecord[nextPotentialChoice] !== null) {\n        setActiveChoice(nextPotentialChoice);\n      }\n      if (alternativesRecord[activeChoice] !== null) {\n        return getRandomColor(prevColor);\n      }\n      return prevColor;\n    });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useInterstate(...altControlAtom).get();\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixelAtom>(\n    getAtom(choiceForPixelPlaceholderKey)\n  );\n  const choice = useInterstate(...choiceForPixel).get();\n  const possibleStateAtom = useInterstate(...getAtom(alternativeForChoiceKeys[choice])).get();\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlAtom: possibleStateAtom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { Scope, useRefreshScope } from './State/State';\n\nexport const App: FC = () => {\n  const [keyForScope, commandToCreateFreshKeyForScope] = useRefreshScope();\n\n  return (\n    <Scope {...{ key: keyForScope }}>\n      <div {...{ style: { display: 'inline-block' } }}>\n        <div\n          {...{\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              height: 'calc(100vh - 20px)',\n              margin: '10px auto 10px 10px',\n            },\n          }}\n        >\n          <PixelsStage />\n          <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n            <div {...{ style: { margin: '0 0 10px' } }}>\n              <strong>Implemented using &apos;use-interstate&apos; library</strong>\n            </div>\n            <RepaintButton />\n            <DisableEnableButtons />\n            <RandomPaintButton />\n            <MassivePaintButton />\n            <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n            <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshKeyForScope }} />\n          </div>\n        </div>\n      </div>\n    </Scope>\n  );\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  colorForAlternativePlaceholderKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nfunction createColorForAlternativeAtom(choice: PixelChoice) {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport function createColorForAlternativeForChoiceEntry(\n  choice: PixelChoice\n): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  const [colorForAlternativeKey, color] = createColorForAlternativeAtom(choice);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n}\n\nexport const defInitialState: Readonly<Partial<State>> = { rememberActiveChoice: 0 };\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: ActionType.CREATE_NEW_PIXEL_ENTRY;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: ActionType.SWITCH_PIXEL_CHOICE; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID\n      ? { type: ActionType.CHOOSE_GRID; payload: { gridSize: number } }\n      : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: ActionType.REMEMBER_ACTIVE_CHOICE; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE\n      ? { type: ActionType.TURN_ON_ALTERNATIVE; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES\n      ? { type: ActionType.SWITCH_ALTERNATIVES; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: ActionType.REPAINT_ROW } : never);\n","import { getNextKey } from 'get-next-key';\nimport { PerformanceInfo } from 'performance-info';\nimport React, { CSSProperties, FC, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getGridSize } from '../State/selectors';\nimport type { State } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nconst refreshKeyPlaceholder = 'refresh-input';\n\nexport const ChooseGrid = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function ChooseGrid({ addStyle = {}, beAwareWhenChosen, gridSize }) {\n    const [refreshKey, generateRefreshKey] = useState(() => getNextKey(refreshKeyPlaceholder));\n    const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n    function inputCallback(input: string) {\n      startMeasure();\n      storeKeysMethods.reset();\n      const nextGridSize = parseInt(input, 10) || gridSize;\n      beAwareWhenChosen(nextGridSize);\n      generateRefreshKey(getNextKey(refreshKeyPlaceholder));\n    }\n\n    return (\n      <div {...{ style: addStyle }}>\n        <DelayedInput\n          {...{\n            label: 'input grid size: ',\n            inputCallback,\n            value: `${gridSize}`,\n            addStyle: { marginBottom: '2px' },\n            key: refreshKey,\n          }}\n        />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{\n    addStyle?: CSSProperties;\n    beAwareWhenChosen: (gridSize: number) => void;\n    gridSize: number;\n  }>\n);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { choice: alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { choice: alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons = connect(null, {\n  switchAlternatives: switchAlternativeAction,\n})(function DisableEnableButtons({ switchAlternatives }) {\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      switchAlternatives(evenOrOdd);\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n} as FC<{\n  switchAlternatives: (activeChoice: PixelChoice) => void;\n}>);\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function MassivePaintButton({ gridSize, switchPixelChoice }) {\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ChoiceForPixel[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    pixelsToPaint.forEach((p) => switchPixelChoice(p));\n    setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels));\n  }, [pixelsToPaint, switchPixelChoice]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixels: ChoiceForPixel[] = [];\n\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let pixel: ChoiceForPixel;\n      do {\n        pixel = drawPixelToPaint(allPixelsNumber);\n      } while (pixels.includes(pixel));\n      pixels.push(pixel);\n    }\n\n    setPixelsToPaint(pixels);\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import { getRandomColor } from 'random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  defInitialState,\n} from './State';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initialState: Readonly<Partial<State>>;\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n      const prevChoice = state[pixel];\n\n      return { ...state, [pixel]: (1 - prevChoice) as PixelChoice };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n        };\n      }\n\n      return state;\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n          rememberActiveChoice: choice,\n        };\n      }\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[choice]]: null,\n        rememberActiveChoice: (1 - choice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction createSetOfEntries(): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as Pick<State, ColorForAlternative | AlternativeForChoice>\n  );\n}\n\nexport function initializeState(gridSize: number): void {\n  initialState = { ...defInitialState, gridSize, ...createSetOfEntries() };\n}\n","import { PerformanceInfo } from 'performance-info';\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function RandomPaintButton({ gridSize, switchPixelChoice }) {\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    switchPixelChoice(drawPixelToPaint(gridSize ** 2));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton = connect(null, { repaintRow: repaintRowAction })(\n  function RepaintButton({ repaintRow }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver();\n\n    function repaintCallback() {\n      startMeasure();\n      repaintRow();\n    }\n\n    return (\n      <div {...{ style: buttonContainerStyle }}>\n        <Button {...{ callback: repaintCallback, name: 're-paint' }} />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{ repaintRow: () => void }>\n);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, ColorValue, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel = connect(\n  (state: State, { altControl }: { altControl: ColorForAlternative }) => ({\n    color: getColorForAlternative(state, altControl),\n  })\n)(function Pixel({ color }) {\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n} as FC<{ color: ColorValue }>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type {\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nconst ControlPixelInner = connect(\n  (state: State, { choiceForPixel }: { choiceForPixel: ChoiceForPixel }) => ({\n    possibleAltControl: getAlternativeForChoice(\n      state,\n      alternativeForChoiceKeys[getChoiceForPixel(state, choiceForPixel)]\n    ),\n  })\n)(function ControlPixelInner({ possibleAltControl }) {\n  return possibleAltControl ? <Pixel {...{ altControl: possibleAltControl }} /> : null;\n} as FC<{\n  possibleAltControl: ColorForAlternative | null;\n}>);\n\nexport const ControlPixel = connect(null, {\n  createPixel: createNewPixelEntryAction,\n})(function ControlPixel({ pixelSize, defChoice, createPixel }) {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    createPixel(nextKey, defChoice);\n    storeKeysMethods.push(nextKey);\n    setChoiceForPixel(nextKey);\n  }, [createPixel, defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {choiceForPixel === choiceForPixelPlaceholderKey ? null : (\n        <ControlPixelInner {...{ choiceForPixel }} />\n      )}\n    </div>\n  );\n} as FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n  createPixel: (pixel: ChoiceForPixel, choice: PixelChoice) => void;\n}>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice, State } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function PixelsStage({ gridSize }) {\n    const [stageHeight, setStageHeight] = useState(0);\n\n    const lines: ReactElement | null = useSmartMemo(() => {\n      if (!stageHeight) {\n        return null;\n      }\n\n      const pixelSize = `${stageHeight / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      return currentLine as ReactElement;\n    }, [gridSize, stageHeight]);\n\n    const ref = (e: HTMLDivElement | null) => {\n      if (e && !stageHeight) {\n        const { height } = e.getBoundingClientRect();\n        setStageHeight(height);\n      }\n    };\n\n    return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n  } as FC<{ gridSize: number }>\n);\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store }}>\n      <div {...{ style: { display: 'inline-block' } }}>\n        <div\n          {...{\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              height: 'calc(100vh - 20px)',\n              margin: '10px auto 10px 10px',\n            },\n          }}\n        >\n          <PixelsStage />\n          <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n            <div {...{ style: { margin: '0 0 10px' } }}>\n              <strong>\n                Implemented using &apos;react-redux&apos; (connect components) library\n              </strong>\n            </div>\n            <RepaintButton />\n            <DisableEnableButtons />\n            <RandomPaintButton />\n            <MassivePaintButton />\n            <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n            <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshStore }} />\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","import { useState } from 'react';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport { DEF_GRID_SIZE } from './State';\nimport type { State } from './StateInterface';\n\nexport function useCreateStore(): [\n  Store<State, ActionReturn<ActionType>>,\n  (gridSize: number) => void\n] {\n  const [store, provideStore] = useState<Store<State, ActionReturn<ActionType>>>(() => {\n    initializeState(DEF_GRID_SIZE);\n\n    return createStore(appReducer);\n  });\n\n  function commandToCreateFreshStore(gridSize: number): void {\n    initializeState(gridSize);\n\n    return provideStore(createStore(appReducer));\n  }\n\n  return [store, commandToCreateFreshStore];\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { App as RecoilApp } from 'recoil-component';\nimport { App as UseInterstateApp } from 'use-interstate-component';\nimport { App as ReduxConnectApp } from 'redux-connect-component';\n\nexport const App: FC = () => {\n  return (\n    <div {...{ style: { display: 'flex' } }}>\n      <div>\n        <RecoilApp />\n      </div>\n      <div>\n        <UseInterstateApp />\n      </div>\n      <div>\n        <ReduxConnectApp />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}