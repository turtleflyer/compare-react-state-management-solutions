{"version":3,"sources":["internal_packages/perfomance-info/DisplayInfo.tsx","internal_packages/perfomance-info/TipsPoolProvider.tsx","internal_packages/perfomance-info/InfoMark.tsx","internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/reusable-components/InputField.tsx","component_packages/recoil-implementation/reusable-components/Spinner.tsx","component_packages/recoil-implementation/reusable-components/DelayedInput.tsx","component_packages/recoil-implementation/controls/ChooseGrid.tsx","component_packages/recoil-implementation/reusable-components/Button.tsx","component_packages/recoil-implementation/controls/styles.ts","component_packages/recoil-implementation/controls/DisableEnableButtons.tsx","internal_packages/draw-pixels/drawPixels.ts","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/controls/MassivePaintButton.tsx","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/controls/RandomPaintButton.tsx","component_packages/recoil-implementation/controls/RepaintButton.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-connect-implementation/State/StateInterface.ts","component_packages/redux-connect-implementation/State/State.ts","component_packages/redux-connect-implementation/helpers/getNextAtom.ts","component_packages/redux-connect-implementation/reusable-components/InputField.tsx","component_packages/redux-connect-implementation/reusable-components/Spinner.tsx","component_packages/redux-connect-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-connect-implementation/State/selectors.ts","component_packages/redux-connect-implementation/controls/ChooseGrid.tsx","component_packages/redux-connect-implementation/State/actionTypes.ts","component_packages/redux-connect-implementation/reusable-components/Button.tsx","component_packages/redux-connect-implementation/controls/styles.ts","component_packages/redux-connect-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-connect-implementation/State/actions.ts","component_packages/redux-connect-implementation/State/storeKeysMethods.ts","component_packages/redux-connect-implementation/controls/MassivePaintButton.tsx","component_packages/redux-connect-implementation/controls/RandomPaintButton.tsx","component_packages/redux-connect-implementation/State/reducer.ts","component_packages/redux-connect-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-connect-implementation/controls/RepaintButton.tsx","component_packages/redux-connect-implementation/pixels-components/Pixel.tsx","component_packages/redux-connect-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-connect-implementation/State/store.ts","component_packages/redux-connect-implementation/App.tsx","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/helpers/getNextAtom.ts","component_packages/redux-hooks-implementation/reusable-components/InputField.tsx","component_packages/redux-hooks-implementation/reusable-components/Spinner.tsx","component_packages/redux-hooks-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/controls/ChooseGrid.tsx","component_packages/redux-hooks-implementation/State/actionTypes.ts","component_packages/redux-hooks-implementation/reusable-components/Button.tsx","component_packages/redux-hooks-implementation/controls/styles.ts","component_packages/redux-hooks-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/controls/MassivePaintButton.tsx","component_packages/redux-hooks-implementation/controls/RandomPaintButton.tsx","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/controls/RepaintButton.tsx","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/use-interstate-implementation/helpers/getNextAtom.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/reusable-components/InputField.tsx","component_packages/use-interstate-implementation/reusable-components/Spinner.tsx","component_packages/use-interstate-implementation/reusable-components/DelayedInput.tsx","component_packages/use-interstate-implementation/controls/ChooseGrid.tsx","component_packages/use-interstate-implementation/reusable-components/Button.tsx","component_packages/use-interstate-implementation/controls/styles.ts","component_packages/use-interstate-implementation/controls/DisableEnableButtons.tsx","component_packages/use-interstate-implementation/State/storeAtomsMethods.ts","component_packages/use-interstate-implementation/controls/MassivePaintButton.tsx","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/controls/RandomPaintButton.tsx","component_packages/use-interstate-implementation/controls/RepaintButton.tsx","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","App.tsx","index.js"],"names":["outerBoxStyle","display","width","height","color","backgroundColor","borderRadius","justifyContent","alignItems","innerBoxStyle","flexWrap","whiteSpace","elementStyle","margin","DisplayInfo","info","useState","fontSize","setFontSize","ref","e","getBoundingClientRect","initialFontSize","style","map","cloneElement","props","createTipsPoolMethods","dispatchersPool","addInfoTipBoxPositionDispatcher","dispatcher","removeInfoTipBoxPositionDispatcher","filter","d","zeroInfoTipBoxPositions","except","forEach","TipsPoolContext","createContext","TipsPoolProvider","children","tipsPoolMethods","useMemo","Provider","value","infoMarkStyle","flexShrink","fontWeight","cursor","infoTipStyle","position","padding","boxShadow","InfoTipBox","popupInfo","left","bottom","clearDelay","toHide","onMouseOver","onFocus","onMouseLeave","onBlur","InfoMark","infoMarkRef","useRef","delayTimeoutID","infoTipBoxPosition","setInfoTipBoxPosition","useContext","setTipToHideOnMouseLeave","current","setTimeout","clearTimeout","showTip","Error","x","y","useEffect","role","tabIndex","document","documentElement","clientHeight","scrollTop","AknowlageTip","href","target","PerformanceInfo","status","data","TTI","TBT","Math","round","error","message","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","scheduleNext","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","updateStartMeasureCallback","measureFromCreating","name","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","observe","entryTypes","longTasksList","getEntriesByType","every","task","performance","mark","createObserver","conditionalObserverResult","callback","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","range","getRandomColor","calcColor","parseInt","slice","random","toString","padStart","getNextAtom","defaultValue","atom","key","default","choiceForPixelPlaceholderKey","colorForAlternativePlaceholderKey","alternativeForChoicePlaceholderKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceAtoms","c","createFreshKey","InputField","label","onChange","addStyle","type","baseStyle","marginRight","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","useMultiState","inputValue","showSpin","inputState","setInputState","input","records","activeTimeoutId","waitDelay","ChooseGrid","beAwareWhenChosen","gridSize","useRecoilValue","WrapDisplay","startMeasure","nextGridSize","marginBottom","Button","calcStyle","onClick","buttonContainerStyle","DisableEnableButtons","setActiveChoice","useSetRecoilState","manageAlternativesState","useRecoilState","perfMeasureAssets","i","evenOrOdd","prevAtom","drawPixels","totalNumber","numberToDraw","flagToWrite","numberToLeave","pixels","Array","fill","_","pickedPixels","pickPixel","floor","push","pop","storeAtoms","storeAtomsMethods","newAtom","renderInfoContainerStyle","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","MassivePaintButton","percentInput","setPercentInput","pixelsToPaint","setPixelsToPaint","prevPixels","checkPercent","percent","allPixelsNumber","p","drawPixelToPaint","randomIndex","atomToSet","RandomPaintButton","atomToPaint","setAtomToPaint","paintRandomPixel","prev","RepaintButton","alternatives","colorsState","activeChoice","prevColor","nextPotentialChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","PixelsStage","lines","setLines","flexGrow","currentLine","_App","refreshKey","createKey","setAlternatives","a","setGridSize","setter","useRefreshApp","commandToCreateRefreshKey","flexDirection","borderTop","App","alternativeForChoiceKeys","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","defInitialState","rememberActiveChoice","getChoiceForPixel","state","getColorForAlternative","getAlternativeForChoice","getGridSize","ActionType","connect","switchAlternatives","alternativeOfChoice","SWITCH_ALTERNATIVES","payload","storeKeys","storeKeysMethods","newKey","switchMultiplePixels","SWITCH_MULTIPLE_PIXELS","initialState","switchPixelChoice","pixel","SWITCH_PIXEL_CHOICE","repaintRow","REPAINT_ROW","altControl","ControlPixelInner","possibleAltControl","createPixel","CREATE_NEW_PIXEL_ENTRY","nextKey","appReducer","action","updatePixel","update","stateUpdate","reduce","CHOOSE_GRID","REMEMBER_ACTIVE_CHOICE","TURN_ON_ALTERNATIVE","prevValue","colorForAlternativeForChoiceEntry","alternative","initializeState","entries","store","createStore","provideStore","setNewKey","useCreateStore","commandToCreateFreshStore","useSelector","dispatch","useDispatch","getEvenOrOddRowSwitch","createNewPixelEntryAction","gridSizeKey","rememberActiveChoiceKey","createAlternativeForChoiceAtoms","k","storedAtoms","addAtoms","atoms","record","getAtom","getUseInterstate","useInterstate","Scope","setAlternativesOfChoices","alternativesRecord","setColors","both","appsContainerStyle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0221bf08.chunk.js","sourcesContent":["import React, { cloneElement, useState } from 'react';\nimport type { CSSProperties, FC } from 'react';\n\nconst boxInnerWidth = 164;\nconst initialFontSize = 12;\n\nconst outerBoxStyle: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  color: 'white',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst innerBoxStyle: CSSProperties = {\n  display: 'flex',\n  flexWrap: 'nowrap',\n  whiteSpace: 'nowrap',\n};\n\nconst elementStyle: CSSProperties = {\n  margin: '0 5px',\n};\n\nexport const DisplayInfo: FC<{ info?: (JSX.Element | string)[] }> = ({ info }) => {\n  const [fontSize, setFontSize] = useState<number | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !fontSize) {\n      const { width } = e.getBoundingClientRect();\n      width > boxInnerWidth && setFontSize((initialFontSize * boxInnerWidth) / width);\n    }\n  };\n\n  return info ? (\n    <div\n      {...{\n        ref,\n        style: { ...outerBoxStyle, ...innerBoxStyle, fontSize: fontSize ?? initialFontSize },\n      }}\n    >\n      {info.map((e) =>\n        typeof e === 'string' ? (\n          <span {...{ style: elementStyle }}>{e}</span>\n        ) : (\n          cloneElement(e, {\n            ...e.props,\n            style: { ...(e.props.style ?? {}), ...elementStyle },\n          })\n        )\n      )}\n    </div>\n  ) : (\n    <div {...{ style: { ...outerBoxStyle, backgroundColor: 'transparent' } }} />\n  );\n};\n","import React, { createContext, useContext, useMemo } from 'react';\nimport type { Dispatch, FC } from 'react';\n\ntype InfoTipBoxPositionDispather = Dispatch<\n  React.SetStateAction<{\n    x: number;\n    y: number;\n  } | null>\n>;\n\ninterface TipsPoolMethods {\n  addInfoTipBoxPositionDispatcher: (dispatcher: InfoTipBoxPositionDispather) => void;\n  removeInfoTipBoxPositionDispatcher: (dispatcher: InfoTipBoxPositionDispather) => void;\n  zeroInfoTipBoxPositions: (except: InfoTipBoxPositionDispather) => void;\n}\n\nconst createTipsPoolMethods = (): TipsPoolMethods => {\n  let dispatchersPool: InfoTipBoxPositionDispather[] = [];\n\n  return {\n    addInfoTipBoxPositionDispatcher: (dispatcher) => {\n      dispatchersPool = [...dispatchersPool, dispatcher];\n    },\n\n    removeInfoTipBoxPositionDispatcher: (dispatcher) => {\n      dispatchersPool = dispatchersPool.filter((d) => d !== dispatcher);\n    },\n\n    zeroInfoTipBoxPositions: (except) => {\n      dispatchersPool.forEach((d) => d !== except && d(null));\n    },\n  };\n};\n\nconst TipsPoolContext = createContext(createTipsPoolMethods());\n\nexport const TipsPoolProvider: FC = ({ children }) => {\n  const tipsPoolMethods = useMemo(createTipsPoolMethods, []);\n\n  return (\n    <TipsPoolContext.Provider {...{ value: tipsPoolMethods }}>{children}</TipsPoolContext.Provider>\n  );\n};\n\nexport const useTipsPoolMethods = (): TipsPoolMethods => useContext(TipsPoolContext);\n","import React, { useEffect, useRef, useState } from 'react';\nimport type { CSSProperties, FC } from 'react';\nimport { useTipsPoolMethods } from './TipsPoolProvider';\n\nconst POPUP_DELAY = 1000;\n\nconst infoMarkStyle: CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexShrink: 0,\n  fontSize: '1.2em',\n  fontWeight: 'bolder',\n  color: 'gray',\n  backgroundColor: 'rgb(228, 232, 255)',\n  width: '1.2em',\n  height: '1.2em',\n  borderRadius: '0.6em',\n  cursor: 'default',\n};\n\nconst infoTipStyle: CSSProperties = {\n  position: 'absolute',\n  whiteSpace: 'normal',\n  width: 200,\n  padding: 10,\n  color: 'black',\n  backgroundColor: 'rgb(228, 232, 255)',\n  fontSize: '14px',\n  boxShadow: '3px 3px rgb(141, 144, 166)',\n};\n\nconst InfoTipBox: FC<{\n  popupInfo: JSX.Element | string;\n  left: number;\n  bottom: number;\n  clearDelay: () => void;\n  toHide: () => void;\n}> = ({ popupInfo, left, bottom, clearDelay, toHide }) => (\n  <div\n    {...{\n      style: { ...infoTipStyle, left, bottom },\n      onMouseOver: clearDelay,\n      onFocus: clearDelay,\n      onMouseLeave: toHide,\n      onBlur: toHide,\n    }}\n  >\n    {popupInfo}\n  </div>\n);\n\nexport const InfoMark: FC<{ style?: CSSProperties; popupInfo: JSX.Element | string }> = ({\n  style = {},\n  popupInfo,\n}) => {\n  const infoMarkRef = useRef<HTMLDivElement>(null);\n  const delayTimeoutID = useRef<NodeJS.Timeout | null>(null);\n  const [infoTipBoxPosition, setInfoTipBoxPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n  const tipsPoolMethods = useTipsPoolMethods();\n\n  const setTipToHideOnMouseLeave = () => {\n    delayTimeoutID.current = setTimeout(() => setInfoTipBoxPosition(null), POPUP_DELAY);\n  };\n\n  const clearDelay = () => {\n    delayTimeoutID.current && clearTimeout(delayTimeoutID.current);\n    delayTimeoutID.current = null;\n  };\n\n  const showTip = () => {\n    if (infoTipBoxPosition) {\n      clearDelay();\n      return;\n    }\n\n    if (infoMarkRef.current) {\n      tipsPoolMethods.zeroInfoTipBoxPositions(setInfoTipBoxPosition);\n      const { x, y } = infoMarkRef.current.getBoundingClientRect();\n      setInfoTipBoxPosition({ x, y });\n    } else {\n      throw Error('(PerformanceInfo) Info tip mark must exist');\n    }\n  };\n\n  useEffect(() => {\n    tipsPoolMethods.addInfoTipBoxPositionDispatcher(setInfoTipBoxPosition);\n\n    return () => tipsPoolMethods.removeInfoTipBoxPositionDispatcher(setInfoTipBoxPosition);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <div\n        {...{\n          ref: infoMarkRef,\n          style: { ...infoMarkStyle, ...style },\n          onMouseOver: showTip,\n          onFocus: showTip,\n          onMouseLeave: setTipToHideOnMouseLeave,\n          onBlur: setTipToHideOnMouseLeave,\n          role: 'link',\n          tabIndex: 0,\n        }}\n      >\n        i\n      </div>\n      {infoTipBoxPosition ? (\n        <InfoTipBox\n          {...{\n            popupInfo,\n            left: infoTipBoxPosition.x + 10,\n            bottom:\n              document.documentElement.clientHeight -\n              document.documentElement.scrollTop -\n              infoTipBoxPosition.y +\n              5,\n            clearDelay,\n            toHide: setTipToHideOnMouseLeave,\n          }}\n        />\n      ) : null}\n    </>\n  );\n};\n","import type { MetricsComponentProps } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { DisplayInfo } from './DisplayInfo';\nimport { InfoMark } from './InfoMark';\n\nconst AknowlageTip: FC = () => (\n  /* eslint-disable react/jsx-one-expression-per-line */\n  <>\n    <strong>TTI (Time to Interactive)</strong> metric measures the time until the main sub-resources\n    of the page have rendered and it is capable of reliably responding to user input quickly\n    (similar to <a {...{ href: 'https://web.dev/tti/', target: 'blank' }}>that</a>\n    ).\n    <br />\n    <br />\n    <strong>TBT (Total Blocking Time)</strong> measures the total amount of time until TTI in the\n    chunks where the main thread was blocked for long enough to prevent input responsiveness\n    (similar to <a {...{ href: 'https://web.dev/tbt/', target: 'blank' }}>that</a>).\n  </>\n  /* eslint-enable */\n);\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = (props) => {\n  switch (props.status) {\n    case 'done': {\n      const { TTI, TBT } = props.data;\n      return (\n        <DisplayInfo\n          {...{\n            info: [\n              `TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`,\n              <InfoMark key=\"InfoTip\" {...{ popupInfo: <AknowlageTip /> }} />,\n            ],\n          }}\n        />\n      );\n    }\n\n    case 'pending':\n      return <DisplayInfo {...{ info: ['performance measuring...'] }} />;\n\n    case 'error':\n      return (\n        <DisplayInfo\n          {...{\n            info: ['error', <InfoMark key=\"InfoTip\" {...{ popupInfo: props.error.message }} />],\n          }}\n        />\n      );\n\n    default:\n      break;\n  }\n\n  return <DisplayInfo />;\n};\n\nexport { TipsPoolProvider } from './TipsPoolProvider';\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<MetricsComponentProps>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps({\n            status: 'error',\n            data: null,\n            error: Error('(usePerfObserver) No long task has been registered'),\n          });\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps({ status: 'pending', data: null });\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from '@~internal/get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<MetricsComponentProps>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return {\n      data: null,\n      status: 'error',\n      error: Error('(usePerfObserver) The browser does not support the library'),\n    };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps({ status: 'pending', data: null });\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => {});\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","const range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import { getNextKey } from '@~internal/get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return atom({ key: getNextKey(prefix), default: defaultValue });\n}\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\nexport interface CarryAtom<K extends keyof State> {\n  atom: Atom<K>;\n}\n\nexport type CarryAtomColorForAlternative = CarryAtom<ColorForAlternative> | null;\n\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: CarryAtomColorForAlternative;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getNextKey } from '@~internal/get-next-key';\nimport { getRandomColor } from '@~internal/random-color';\nimport { useState } from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { atom, useSetRecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  Atom,\n  CarryAtomColorForAlternative,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): Atom<ColorForAlternative> {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativePlaceholderKey,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport const gridSizeAtom = atom({ key: gridSizeKey, default: DEF_GRID_SIZE });\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nexport const alternativeForChoiceAtoms = (([0, 1] as const).map((c) =>\n  atom({\n    key: `${alternativeForChoicePlaceholderKey}-${c}`,\n    default: { atom: createColorForAlternativeAtom(c) },\n  })\n) as readonly AlternativeForChoiceAtom[]) as readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n];\n\nexport function createAlternativeForChoiceAtoms(): readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] {\n  return (([0, 1] as const).map((c) =>\n    atom({\n      key: `${alternativeForChoicePlaceholderKey}-${c}`,\n      default: { atom: createColorForAlternativeAtom(c) },\n    })\n  ) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useRefreshApp(): [string, ({ gridSize }: { gridSize: number }) => void] {\n  const [refreshKey, createKey] = useState(createFreshKey);\n  const setAlternatives = (alternativeForChoiceAtoms.map((a) =>\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useSetRecoilState(a)\n  ) as readonly SetterOrUpdater<CarryAtomColorForAlternative>[]) as readonly [\n    SetterOrUpdater<CarryAtomColorForAlternative>,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n  const setGridSize = useSetRecoilState(gridSizeAtom);\n\n  function commandToCreateRefreshKey({ gridSize }: { gridSize: number }) {\n    setAlternatives.every((setter, i) =>\n      setter({ atom: createColorForAlternativeAtom(i as PixelChoice) })\n    );\n\n    setGridSize(gridSize);\n    createKey(createFreshKey);\n  }\n\n  return [refreshKey, commandToCreateRefreshKey];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { gridSizeAtom } from '../State/State';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport type { UsePerfMetricsReturn } from '@~internal/use-perf-observer';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  createColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtom,\n  CarryAtomColorForAlternative,\n  ColorForAlternative,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  type ManageAlternativesState = [\n    CarryAtomColorForAlternative,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n\n  const manageAlternativesState = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilState(atom)\n  ) as readonly ManageAlternativesState[]) as readonly [\n    ManageAlternativesState,\n    ManageAlternativesState\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      const prevAtom = manageAlternativesState[evenOrOdd][0];\n\n      perfMeasureAssets[evenOrOdd][1]();\n\n      if (!prevAtom) {\n        setActiveChoice(evenOrOdd);\n        manageAlternativesState[evenOrOdd][1]({\n          atom: createColorForAlternativeAtom(evenOrOdd),\n        } as CarryAtom<ColorForAlternative>);\n      } else {\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        manageAlternativesState[evenOrOdd][1](null);\n      }\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","export function drawPixels(totalNumber: number, numberToDraw: number): number[] {\n  if (totalNumber < numberToDraw) {\n    throw Error('Number to draw must be less than total');\n  }\n\n  const [flagToWrite, numberToLeave] =\n    numberToDraw < totalNumber / 2 ? [true, totalNumber - numberToDraw] : [false, numberToDraw];\n  const pixels = Array(totalNumber)\n    .fill(null)\n    .map((_, i) => i);\n  const pickedPixels: number[] = [];\n\n  while (pixels.length > numberToLeave) {\n    const pickPixel = Math.floor(Math.random() * pixels.length);\n\n    if (flagToWrite) {\n      pickedPixels.push(pixels[pickPixel]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    pickPixel < pixels.length - 1 ? (pixels[pickPixel] = pixels.pop()!) : pixels.pop();\n  }\n\n  return flagToWrite ? pickedPixels : pixels;\n}\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import { drawPixels } from '@~internal/draw-pixels';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n\n    setPixelsToPaint(\n      drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => (\n        // eslint-disable-next-line react/jsx-key\n        <PixelToPaint\n          {...{\n            pixelChoiceAtom:\n              storeAtomsMethods.get(p) ??\n              (() => {\n                throw Error('It must be defined');\n              })(),\n          }}\n        />\n      ))\n    );\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { getRandomColor } from '@~internal/random-color';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtomColorForAlternative,\n  ColorValue,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternatives = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilValue(atom)\n  ) as readonly CarryAtomColorForAlternative[]) as readonly [\n    CarryAtomColorForAlternative,\n    CarryAtomColorForAlternative\n  ];\n\n  type ManageColorsState = [ColorValue, SetterOrUpdater<ColorValue>];\n  const colorsState = ([0, 1].map((i) =>\n    useRecoilState(alternatives[i]?.atom ?? colorForAlternativePlaceholderAtom)\n  ) as readonly ManageColorsState[]) as readonly [ManageColorsState, ManageColorsState];\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshApp } from './State/State';\n\n// eslint-disable-next-line no-underscore-dangle\nconst _App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <div\n      {...{\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '10px auto 10px 10px',\n        },\n        key: refreshKey,\n      }}\n    >\n      <PixelsStage />\n      <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n        <div {...{ style: { margin: '0 0 10px' } }}>\n          <strong>Implemented using &apos;recoil&apos; library</strong>\n        </div>\n        <RepaintButton />\n        <DisableEnableButtons />\n        <RandomPaintButton />\n        <MassivePaintButton />\n        <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n        <ChooseGrid {...{ beAwareWhenChosen: commandToCreateRefreshKey }} />\n      </div>\n    </div>\n  );\n};\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    {/* eslint-disable-next-line react/jsx-pascal-case */}\n    <_App />\n  </RecoilRoot>\n);\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from '@~internal/random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  colorForAlternativePlaceholderKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nfunction createColorForAlternativeAtom(choice: PixelChoice) {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport function createColorForAlternativeForChoiceEntry(\n  choice: PixelChoice\n): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  const [colorForAlternativeKey, color] = createColorForAlternativeAtom(choice);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n}\n\nexport const defInitialState: Readonly<Partial<State>> = { rememberActiveChoice: 0 };\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport React, { CSSProperties, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getGridSize } from '../State/selectors';\nimport type { State } from '../State/StateInterface';\n\nexport const ChooseGrid = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function ChooseGrid({ addStyle = {}, beAwareWhenChosen, gridSize }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n    function inputCallback(input: string) {\n      startMeasure();\n      const nextGridSize = parseInt(input, 10) || gridSize;\n      beAwareWhenChosen({ gridSize: nextGridSize });\n    }\n\n    return (\n      <div {...{ style: addStyle }}>\n        <DelayedInput\n          {...{\n            label: 'input grid size: ',\n            inputCallback,\n            value: `${gridSize}`,\n            addStyle: { marginBottom: '2px' },\n          }}\n        />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{\n    addStyle?: CSSProperties;\n    beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n    gridSize: number;\n  }>\n);\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID ? { type: T; payload: { gridSize: number } } : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: T; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE ? { type: T; payload: AlternativesPayloads } : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES ? { type: T; payload: AlternativesPayloads } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport type { UsePerfMetricsReturn } from '@~internal/use-perf-observer';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons = connect(null, {\n  switchAlternatives: switchAlternativeAction,\n})(function DisableEnableButtons({ switchAlternatives }) {\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      switchAlternatives(evenOrOdd);\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n} as FC<{\n  switchAlternatives: (activeChoice: PixelChoice) => void;\n}>);\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function switchMultiplePixelsAction(\n  pixels: ChoiceForPixel[]\n): ActionReturn<ActionType.SWITCH_MULTIPLE_PIXELS> {\n  return { type: ActionType.SWITCH_MULTIPLE_PIXELS, payload: { pixels } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { choice: alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { choice: alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import { drawPixels } from '@~internal/draw-pixels';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { switchMultiplePixelsAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchMultiplePixels: switchMultiplePixelsAction,\n})(function MassivePaintButton({ gridSize, switchMultiplePixels }) {\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n\n    switchMultiplePixels(\n      drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n        (p) =>\n          storeKeysMethods.get(p) ??\n          (() => {\n            throw Error('It must be defined');\n          })()\n      )\n    );\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n} as FC<{ gridSize: number; switchMultiplePixels: (pixels: ChoiceForPixel[]) => void }>);\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function RandomPaintButton({ gridSize, switchPixelChoice }) {\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    switchPixelChoice(drawPixelToPaint(gridSize ** 2));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import { getRandomColor } from '@~internal/random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  defInitialState,\n} from './State';\nimport type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initialState: Readonly<Partial<State>>;\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  function updatePixel(update: Partial<State>, pixel: ChoiceForPixel) {\n    const prevChoice = state[pixel];\n\n    return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n  }\n\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n\n      return { ...state, ...updatePixel({}, pixel) };\n    }\n\n    case ActionType.SWITCH_MULTIPLE_PIXELS: {\n      const {\n        payload: { pixels },\n      } = action;\n\n      const stateUpdate = pixels.reduce(updatePixel, {} as Partial<State>);\n\n      return { ...state, ...stateUpdate };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n        };\n      }\n\n      return state;\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n          rememberActiveChoice: choice,\n        };\n      }\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[choice]]: null,\n        rememberActiveChoice: (1 - choice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction createSetOfEntries(): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as Pick<State, ColorForAlternative | AlternativeForChoice>\n  );\n}\n\nexport function initializeState(gridSize: number): void {\n  initialState = { ...defInitialState, gridSize, ...createSetOfEntries() };\n}\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton = connect(null, { repaintRow: repaintRowAction })(\n  function RepaintButton({ repaintRow }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver();\n\n    function repaintCallback() {\n      startMeasure();\n      repaintRow();\n    }\n\n    return (\n      <div {...{ style: buttonContainerStyle }}>\n        <Button {...{ callback: repaintCallback, name: 're-paint' }} />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{ repaintRow: () => void }>\n);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, ColorValue, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel = connect(\n  (state: State, { altControl }: { altControl: ColorForAlternative }) => ({\n    color: getColorForAlternative(state, altControl),\n  })\n)(function Pixel({ color }) {\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n} as FC<{ color: ColorValue }>);\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type {\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nconst ControlPixelInner = connect(\n  (state: State, { choiceForPixel }: { choiceForPixel: ChoiceForPixel }) => ({\n    possibleAltControl: getAlternativeForChoice(\n      state,\n      alternativeForChoiceKeys[getChoiceForPixel(state, choiceForPixel)]\n    ),\n  })\n)(function ControlPixelInner({ possibleAltControl }) {\n  return possibleAltControl ? <Pixel {...{ altControl: possibleAltControl }} /> : null;\n} as FC<{\n  possibleAltControl: ColorForAlternative | null;\n}>);\n\nexport const ControlPixel = connect(null, {\n  createPixel: createNewPixelEntryAction,\n})(function ControlPixel({ pixelSize, defChoice, createPixel }) {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    createPixel(nextKey, defChoice);\n    storeKeysMethods.push(nextKey);\n    setChoiceForPixel(nextKey);\n  }, [createPixel, defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {choiceForPixel === choiceForPixelPlaceholderKey ? null : (\n        <ControlPixelInner {...{ choiceForPixel }} />\n      )}\n    </div>\n  );\n} as FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n  createPixel: (pixel: ChoiceForPixel, choice: PixelChoice) => void;\n}>);\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice, State } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function PixelsStage({ gridSize }) {\n    const [lines, setLines] = useState<ReactElement | null>(null);\n\n    const ref = (e: HTMLDivElement | null) => {\n      if (e && !lines) {\n        const { height } = e.getBoundingClientRect();\n        const pixelSize = `${height / gridSize}px`;\n        let currentLine: ReactElement | null = null;\n\n        for (let i = 0; i < gridSize; i++) {\n          currentLine = (\n            <PixelsLine\n              {...{\n                length: gridSize,\n                pixelSize,\n                defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n              }}\n            >\n              {currentLine}\n            </PixelsLine>\n          );\n        }\n\n        storeKeysMethods.reset();\n        setLines(currentLine);\n      }\n    };\n\n    return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n  } as FC<{ gridSize: number }>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport { getNextKey } from '@~internal/get-next-key';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport { DEF_GRID_SIZE } from './State';\nimport type { State } from './StateInterface';\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useCreateStore(): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  ({ gridSize }: { gridSize: number }) => void\n] {\n  const [{ store, refreshKey }, { store: provideStore, refreshKey: setNewKey }] = useMultiState<{\n    store: Store<State, ActionReturn<ActionType>>;\n    refreshKey: string;\n  }>({\n    store: () => {\n      initializeState(DEF_GRID_SIZE);\n\n      return createStore(appReducer);\n    },\n    refreshKey: createFreshKey,\n  });\n\n  function commandToCreateFreshStore({ gridSize }: { gridSize: number }): void {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  }\n\n  return [store, refreshKey, commandToCreateFreshStore];\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;react-redux&apos; (connect) library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshStore }} />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from '@~internal/random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  colorForAlternativePlaceholderKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nfunction createColorForAlternativeAtom(choice: PixelChoice) {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport function createColorForAlternativeForChoiceEntry(\n  choice: PixelChoice\n): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  const [colorForAlternativeKey, color] = createColorForAlternativeAtom(choice);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n}\n\nexport const defInitialState: Readonly<Partial<State>> = { rememberActiveChoice: 0 };\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport React, { CSSProperties, FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getGridSize } from '../State/selectors';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useSelector(getGridSize);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID ? { type: T; payload: { gridSize: number } } : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: T; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE ? { type: T; payload: AlternativesPayloads } : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES ? { type: T; payload: AlternativesPayloads } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport type { UsePerfMetricsReturn } from '@~internal/use-perf-observer';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const dispatch = useDispatch();\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      dispatch(switchAlternativeAction(evenOrOdd));\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function switchMultiplePixelsAction(\n  pixels: ChoiceForPixel[]\n): ActionReturn<ActionType.SWITCH_MULTIPLE_PIXELS> {\n  return { type: ActionType.SWITCH_MULTIPLE_PIXELS, payload: { pixels } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { choice: alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { choice: alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import { drawPixels } from '@~internal/draw-pixels';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { switchMultiplePixelsAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const dispatch = useDispatch();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n\n    dispatch(\n      switchMultiplePixelsAction(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n          (p) =>\n            storeKeysMethods.get(p) ??\n            (() => {\n              throw Error('It must be defined');\n            })()\n        )\n      )\n    );\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const dispatch = useDispatch();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import { getRandomColor } from '@~internal/random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  defInitialState,\n} from './State';\nimport type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initialState: Readonly<Partial<State>>;\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  function updatePixel(update: Partial<State>, pixel: ChoiceForPixel) {\n    const prevChoice = state[pixel];\n\n    return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n  }\n\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n\n      return { ...state, ...updatePixel({}, pixel) };\n    }\n\n    case ActionType.SWITCH_MULTIPLE_PIXELS: {\n      const {\n        payload: { pixels },\n      } = action;\n\n      const stateUpdate = pixels.reduce(updatePixel, {} as Partial<State>);\n\n      return { ...state, ...stateUpdate };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n        };\n      }\n\n      return state;\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n          rememberActiveChoice: choice,\n        };\n      }\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[choice]]: null,\n        rememberActiveChoice: (1 - choice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction createSetOfEntries(): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as Pick<State, ColorForAlternative | AlternativeForChoice>\n  );\n}\n\nexport function initializeState(gridSize: number): void {\n  initialState = { ...defInitialState, gridSize, ...createSetOfEntries() };\n}\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button } from '../reusable-components/Button';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const dispatch = useDispatch();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    dispatch(repaintRowAction());\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector((state: State) => getColorForAlternative(state, altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice, State } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{ pixelSize: string; defChoice: PixelChoice }> = ({\n  pixelSize,\n  defChoice,\n}) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n  const choice = useSelector((state: State) => getChoiceForPixel(state, choiceForPixel));\n  const possibleAltControl = useSelector((state: State) =>\n    getAlternativeForChoice(state, alternativeForChoiceKeys[choice])\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    storeKeysMethods.push(nextKey);\n    setChoiceForPixel(nextKey);\n  }, [defChoice, dispatch]);\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport { getNextKey } from '@~internal/get-next-key';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport { DEF_GRID_SIZE } from './State';\nimport type { State } from './StateInterface';\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useCreateStore(): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  ({ gridSize }: { gridSize: number }) => void\n] {\n  const [{ store, refreshKey }, { store: provideStore, refreshKey: setNewKey }] = useMultiState<{\n    store: Store<State, ActionReturn<ActionType>>;\n    refreshKey: string;\n  }>({\n    store: () => {\n      initializeState(DEF_GRID_SIZE);\n\n      return createStore(appReducer);\n    },\n    refreshKey: createFreshKey,\n  });\n\n  function commandToCreateFreshStore({ gridSize }: { gridSize: number }): void {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  }\n\n  return [store, refreshKey, commandToCreateFreshStore];\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;react-redux&apos; (hooks) library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshStore }} />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternativeAtom | null;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getUseInterstate } from '@smart-hooks/use-interstate';\nimport { getNextKey } from '@~internal/get-next-key';\nimport { getRandomColor } from '@~internal/random-color';\nimport { useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  Atom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nfunction createAlternativeForChoiceAtoms() {\n  return (alternativeForChoiceKeys.map((k, i) => [\n    k,\n    createColorForAlternativeAtom(i as PixelChoice),\n  ]) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [colorForAlternativePlaceholderKey]: DEF_COLOR,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\nlet storedAtoms: State = { ...initialState };\n\nfunction addAtoms<K extends keyof State>(...atoms: Atom<K>[]): void {\n  atoms.forEach(([key, record]) => {\n    storedAtoms = { ...storedAtoms, [key]: record };\n  });\n}\n\naddAtoms(...createAlternativeForChoiceAtoms());\n\nexport function getAtom<K extends keyof State>(key: K): Atom<K> {\n  return [key, storedAtoms[key]] as [K, State[K]];\n}\n\nexport const { useInterstate, Scope } = getUseInterstate<State>();\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useRefreshApp(): [string, ({ gridSize }: { gridSize: number }) => void] {\n  const [refreshKey, createKey] = useState(createFreshKey);\n\n  function commandToCreateRefreshKey({ gridSize }: { gridSize: number }): void {\n    addAtoms([gridSizeKey, gridSize], ...createAlternativeForChoiceAtoms());\n    createKey(createFreshKey);\n  }\n\n  return [refreshKey, commandToCreateRefreshKey];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getAtom, useInterstate } from '../State/State';\nimport { gridSizeKey } from '../State/StateInterface';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport type { UsePerfMetricsReturn } from '@~internal/use-perf-observer';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeAtom,\n  getAtom,\n  useInterstate,\n} from '../State/State';\nimport type { ColorForAlternativeAtom, PixelChoice } from '../State/StateInterface';\nimport { rememberActiveChoiceKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useInterstate(...getAtom(rememberActiveChoiceKey)).set();\n\n  type SetColorForAlternativeAtom = SetInterstate<ColorForAlternativeAtom | null>;\n\n  const setAlternativesOfChoices = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).set()\n  ) as readonly SetColorForAlternativeAtom[]) as readonly [\n    SetColorForAlternativeAtom,\n    SetColorForAlternativeAtom\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      setAlternativesOfChoices[evenOrOdd]((prevAtom) => {\n        if (!prevAtom) {\n          setActiveChoice(evenOrOdd);\n          return createColorForAlternativeAtom(evenOrOdd);\n        }\n\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n\n        return null;\n      });\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import { drawPixels } from '@~internal/draw-pixels';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useInterstate(...pixelChoiceAtom).set();\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n\n    setPixelsToPaint(\n      drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => (\n        // eslint-disable-next-line react/jsx-key\n        <PixelToPaint\n          {...{\n            pixelChoiceAtom:\n              storeAtomsMethods.get(p) ??\n              (() => {\n                throw Error('It must be defined');\n              })(),\n          }}\n        />\n      ))\n    );\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from '@~internal/performance-info';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey, gridSizeKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [atomToPaint, setAtomToPaint] = useState({ atom: getAtom(choiceForPixelPlaceholderKey) });\n  const paintRandomPixel = useInterstate(...atomToPaint.atom).set();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from '@~internal/performance-info';\nimport { getRandomColor } from '@~internal/random-color';\nimport { usePerfObserver } from '@~internal/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from '../reusable-components/Button';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom, ColorValue, PixelChoice } from '../State/StateInterface';\nimport {\n  colorForAlternativePlaceholderKey,\n  rememberActiveChoiceKey,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternativesRecord = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).get()\n  ) as readonly (ColorForAlternativeAtom | null)[]) as readonly [\n    ColorForAlternativeAtom | null,\n    ColorForAlternativeAtom | null\n  ];\n  const setColors = ([0, 1].map((i) =>\n    useInterstate(...(alternativesRecord[i] ?? getAtom(colorForAlternativePlaceholderKey))).set()\n  ) as readonly SetInterstate<ColorValue>[]) as readonly [\n    SetInterstate<ColorValue>,\n    SetInterstate<ColorValue>\n  ];\n  const [activeChoice, setActiveChoice] = useInterstate(...getAtom(rememberActiveChoiceKey)).both();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    setColors[activeChoice]((prevColor) => {\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n      if (alternativesRecord[nextPotentialChoice] !== null) {\n        setActiveChoice(nextPotentialChoice);\n      }\n      if (alternativesRecord[activeChoice] !== null) {\n        return getRandomColor(prevColor);\n      }\n      return prevColor;\n    });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useInterstate(...altControlAtom).get();\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixelAtom>(\n    getAtom(choiceForPixelPlaceholderKey)\n  );\n  const choice = useInterstate(...choiceForPixel).get();\n  const possibleStateAtom = useInterstate(...getAtom(alternativeForChoiceKeys[choice])).get();\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlAtom: possibleStateAtom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@~internal/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { Scope, useRefreshApp } from './State/State';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <Scope {...{ key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;use-interstate&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateRefreshKey }} />\n        </div>\n      </div>\n    </Scope>\n  );\n};\n","import { TipsPoolProvider } from '@~internal/performance-info';\nimport { App as RecoilApp } from '@~internal/recoil-component';\nimport { App as ReduxConnectApp } from '@~internal/redux-connect-component';\nimport { App as ReduxHooksApp } from '@~internal/redux-hooks-component';\nimport { App as UseInterstateApp } from '@~internal/use-interstate-component';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst appsContainerStyle: CSSProperties = { display: 'flex' };\n\nexport const App: FC = () => (\n  <TipsPoolProvider>\n    <div {...{ style: { display: 'flex', flexDirection: 'column', height: 'calc(100vh - 20px)' } }}>\n      <div {...{ style: { margin: '5px 0 0 10px', fontWeight: 'bold' } }}>v.1.3.0</div>\n      <div {...{ style: { display: 'flex', flexGrow: 1 } }}>\n        <div {...{ style: appsContainerStyle }}>\n          <RecoilApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <UseInterstateApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <ReduxConnectApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <ReduxHooksApp />\n        </div>\n      </div>\n    </div>\n  </TipsPoolProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}