{"version":3,"sources":["internal_packages/perfomance-info/DisplayInfo.tsx","internal_packages/perfomance-info/TipsPoolProvider.tsx","internal_packages/perfomance-info/InfoMark.tsx","internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/control-panel/InputField.tsx","internal_packages/control-panel/Spinner.tsx","internal_packages/control-panel/DelayedInput.tsx","internal_packages/control-panel/ChooseGrid.tsx","internal_packages/control-panel/Button.tsx","internal_packages/control-panel/styles.ts","internal_packages/control-panel/MassivePaintButton.tsx","internal_packages/control-panel/MeasuredControlButton.tsx","internal_packages/control-panel/ControlPanel.tsx","internal_packages/draw-pixels/drawPixels.ts","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/controlStage.tsx","component_packages/redux-hooks-implementation/State/actionTypes.ts","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/controlStage.ts","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/use-interstate-implementation/State/storeKeysMethods.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/controlStage.ts","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","App.tsx","index.js"],"names":["outerBoxStyle","display","width","height","color","backgroundColor","borderRadius","justifyContent","alignItems","innerBoxStyle","flexWrap","whiteSpace","elementStyle","margin","DisplayInfo","info","useState","fontSize","setFontSize","ref","e","getBoundingClientRect","initialFontSize","style","map","key","cloneElement","props","createTipsPoolMethods","dispatchersPool","addTipHandler","handler","removeTipHandler","filter","nextHandler","hideOtherTips","except","forEach","TipsPoolContext","createContext","TipsPoolProvider","popupDelay","children","tipsPoolMethods","Provider","value","infoMarkStyle","flexShrink","fontWeight","cursor","infoTipStyle","position","padding","boxShadow","InfoTipBox","popupInfo","left","bottom","clearDelay","toHide","onMouseOver","onFocus","onMouseLeave","onBlur","InfoMark","infoMarkRef","useRef","delayTimeoutID","infoTipBoxPosition","setInfoTipBoxPosition","tipHandler","useCallback","useContext","Error","hideInfoTipOnMouseLeave","current","setTimeout","clearTimeout","showInfoTip","x","y","useEffect","role","tabIndex","document","documentElement","clientHeight","scrollTop","AcknowledgeTip","href","target","PerformanceInfo","status","data","TTI","TBT","Math","round","error","message","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","scheduleNext","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","updateStartMeasureCallback","measureFromCreating","name","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","observe","entryTypes","longTasksList","getEntriesByType","every","task","performance","mark","createObserver","conditionalObserverResult","callback","useMemo","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","InputField","label","onChange","addStyle","type","baseStyle","marginRight","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","inputValue","setInputValue","showSpin","setShowSpin","input","records","activeTimeoutId","ChooseGrid","gridSize","useGridSize","WrapDisplay","startMeasure","nextGridSize","parseInt","onGridChosen","marginBottom","Button","calcStyle","onClick","buttonContainerStyle","renderInfoContainerStyle","MassivePaintButton","paintRandomPixels","painterComponents","usePaintRandomPixelsResult","usePaintRandomPixels","Array","isArray","percentsInput","setPercentsInput","percentsNumber","MeasuredControlButton","onPushButton","useOnPushButton","ControlPanel","headline","repaintRow","useRepaintRow","i","switchRows","switchRowsHooks","paintRandomSinglePixel","usePaintRandomSinglePixel","borderTop","drawPixels","totalNumber","numberToDraw","flagToWrite","numberToLeave","pixels","fill","_","pickedPixels","pickPixel","floor","random","push","pop","range","getRandomColor","calcColor","slice","toString","padStart","storeAtoms","storeAtomsMethods","newAtom","drawPixelToPaint","randomIndex","atomToSet","getNextAtom","defaultValue","atom","default","choiceForPixelPlaceholderKey","colorForAlternativeKeyPrefix","gridSizeKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","getGridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceKeys","c","createAlternativeForChoiceAtoms","alternativeForChoiceAtoms","getAlternativeForChoiceAtoms","createFreshKey","alternatives","useAlternative","useRecoilState","activeChoice","setActiveChoice","colorsState","useColorState","prevColor","nextPotentialChoice","altForChoiceAtom","useRecoilValue","alt","ActionType","row","useSetRecoilState","manageAlternativesState","atomToPaint","setAtomToPaint","paintRandomPixel","prev","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","pixelsToPaint","setPixelsToPaint","prevPixels","percentage","allPixelsNumber","p","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","PixelsStage","lines","setLines","flexGrow","currentLine","App","refreshKey","createKey","useRefreshApp","commandToCreateRefreshKey","flexDirection","storeKeys","storeKeysMethods","newKey","getChoiceForPixel","state","a","getColorForAlternative","getAlternativeForChoice","getGridSize","initState","dispatch","useDispatch","REPAINT_ROW","alternativeOfChoice","SWITCH_ALTERNATIVES","payload","useSelector","pixel","SWITCH_PIXEL_CHOICE","SWITCH_MULTIPLE_PIXELS","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","initialState","rememberActiveChoice","altControl","possibleAltControl","nextKey","CREATE_NEW_PIXEL_ENTRY","createNewPixelEntryAction","appReducer","action","updatePixel","stateUpdate","reduce","altForChoiceKey","colorForAltKey","colorForAlternativeForChoiceEntry","altKey","update","initializeState","entries","createStore","store","provideStore","setNewKey","useCreateStore","commandToCreateFreshStore","rememberActiveChoiceKey","goInterstate","initInterstate","useInterstate","readInterstate","setInterstate","createColorForChoiceDefState","altControlKey","possibleAltKey","setKey","appsContainerStyle","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.63117fae.chunk.js","sourcesContent":["import React, { cloneElement, useState } from 'react';\nimport type { CSSProperties, FC } from 'react';\n\nconst boxInnerWidth = 164;\nconst initialFontSize = 12;\n\nconst outerBoxStyle: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  color: 'white',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst innerBoxStyle: CSSProperties = {\n  display: 'flex',\n  flexWrap: 'nowrap',\n  whiteSpace: 'nowrap',\n};\n\nconst elementStyle: CSSProperties = {\n  margin: '0 5px',\n};\n\nexport const DisplayInfo: FC<{ info?: (JSX.Element | string)[] }> = ({ info }) => {\n  const [fontSize, setFontSize] = useState<number | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !fontSize) {\n      const { width } = e.getBoundingClientRect();\n      width > boxInnerWidth && setFontSize((initialFontSize * boxInnerWidth) / width);\n    }\n  };\n\n  return info ? (\n    <div\n      {...{\n        ref,\n        style: { ...outerBoxStyle, ...innerBoxStyle, fontSize: fontSize ?? initialFontSize },\n      }}\n    >\n      {info.map((e) =>\n        typeof e === 'string' ? (\n          <span {...{ style: elementStyle }} key={e}>\n            {e}\n          </span>\n        ) : (\n          cloneElement(e, {\n            ...e.props,\n            style: { ...(e.props.style ?? {}), ...elementStyle },\n          })\n        )\n      )}\n    </div>\n  ) : (\n    <div {...{ style: { ...outerBoxStyle, backgroundColor: 'transparent' } }} />\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useContext, useState } from 'react';\n\ninterface TipsPoolMethods {\n  addTipHandler: (dispatcher: () => void) => void;\n  removeTipHandler: (dispatcher: () => void) => void;\n  hideOtherTips: (except: () => void) => void;\n}\n\nconst createTipsPoolMethods = (): TipsPoolMethods => {\n  let dispatchersPool: (() => void)[] = [];\n\n  return {\n    addTipHandler: (handler) => {\n      dispatchersPool = [...dispatchersPool, handler];\n    },\n\n    removeTipHandler: (handler) => {\n      dispatchersPool = dispatchersPool.filter((nextHandler) => nextHandler !== handler);\n    },\n\n    hideOtherTips: (except) => {\n      dispatchersPool.forEach((nextHandler) => nextHandler !== except && nextHandler());\n    },\n  };\n};\n\ninterface TipsPoolContextValue {\n  tipsPoolMethods: TipsPoolMethods;\n  popupDelay: number;\n}\n\nconst TipsPoolContext = createContext<TipsPoolContextValue | null>(null);\n\nexport const TipsPoolProvider: FC<{ popupDelay?: number }> = ({ popupDelay = 100, children }) => {\n  const [tipsPoolMethods] = useState(createTipsPoolMethods);\n\n  return (\n    <TipsPoolContext.Provider {...{ value: { tipsPoolMethods, popupDelay } }}>\n      {children}\n    </TipsPoolContext.Provider>\n  );\n};\n\nexport const useTipsPool = (): TipsPoolContextValue | null => useContext(TipsPoolContext);\n","import type { CSSProperties, FC } from 'react';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTipsPool } from './TipsPoolProvider';\n\nconst infoMarkStyle: CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexShrink: 0,\n  fontSize: '1.2em',\n  fontWeight: 'bolder',\n  color: 'gray',\n  backgroundColor: 'rgb(228, 232, 255)',\n  width: '1.2em',\n  height: '1.2em',\n  borderRadius: '0.6em',\n  cursor: 'default',\n};\n\nconst infoTipStyle: CSSProperties = {\n  position: 'absolute',\n  whiteSpace: 'normal',\n  width: 200,\n  padding: 10,\n  color: 'black',\n  backgroundColor: 'rgb(228, 232, 255)',\n  fontSize: '14px',\n  boxShadow: '3px 3px rgb(141, 144, 166)',\n};\n\nconst InfoTipBox: FC<{\n  popupInfo: JSX.Element | string;\n  left: number;\n  bottom: number;\n  clearDelay: () => void;\n  toHide: () => void;\n}> = ({ popupInfo, left, bottom, clearDelay, toHide }) => (\n  <div\n    {...{\n      style: { ...infoTipStyle, left, bottom },\n      onMouseOver: clearDelay,\n      onFocus: clearDelay,\n      onMouseLeave: toHide,\n      onBlur: toHide,\n    }}\n  >\n    {popupInfo}\n  </div>\n);\n\nexport const InfoMark: FC<{ style?: CSSProperties; popupInfo: JSX.Element | string }> = ({\n  style = {},\n  popupInfo,\n}) => {\n  const infoMarkRef = useRef<HTMLDivElement>(null);\n  const delayTimeoutID = useRef<NodeJS.Timeout | null>(null);\n\n  const [infoTipBoxPosition, setInfoTipBoxPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n\n  const tipHandler = useCallback(() => setInfoTipBoxPosition(null), []);\n\n  const { tipsPoolMethods, popupDelay } =\n    useTipsPool() ??\n    (() => {\n      throw Error('TipsPoolProvider should be in the root of the app');\n    })();\n\n  const hideInfoTipOnMouseLeave = () => {\n    delayTimeoutID.current = setTimeout(() => setInfoTipBoxPosition(null), popupDelay);\n  };\n\n  const clearDelay = () => {\n    delayTimeoutID.current && clearTimeout(delayTimeoutID.current);\n    delayTimeoutID.current = null;\n  };\n\n  const showInfoTip = () => {\n    if (infoTipBoxPosition) {\n      clearDelay();\n\n      return;\n    }\n\n    if (infoMarkRef.current) {\n      tipsPoolMethods.hideOtherTips(tipHandler);\n      const { x, y } = infoMarkRef.current.getBoundingClientRect();\n      setInfoTipBoxPosition({ x, y });\n    } else {\n      throw Error('(PerformanceInfo) Info tip mark must exist');\n    }\n  };\n\n  useEffect(() => {\n    tipsPoolMethods.addTipHandler(tipHandler);\n\n    return () => tipsPoolMethods.removeTipHandler(tipHandler);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div\n        {...{\n          ref: infoMarkRef,\n          style: { ...infoMarkStyle, ...style },\n          onMouseOver: showInfoTip,\n          onFocus: showInfoTip,\n          onMouseLeave: hideInfoTipOnMouseLeave,\n          onBlur: hideInfoTipOnMouseLeave,\n          role: 'link',\n          tabIndex: 0,\n        }}\n      >\n        i\n      </div>\n      {infoTipBoxPosition && (\n        <InfoTipBox\n          /* eslint-disable @typescript-eslint/no-magic-numbers */\n          {...{\n            popupInfo,\n            left: infoTipBoxPosition.x + 10,\n            bottom:\n              document.documentElement.clientHeight -\n              document.documentElement.scrollTop -\n              infoTipBoxPosition.y +\n              5,\n            clearDelay,\n            toHide: hideInfoTipOnMouseLeave,\n          }}\n          /* eslint-enable @typescript-eslint/no-magic-numbers */\n        />\n      )}\n    </>\n  );\n};\n","import type { MetricsComponentProps } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { DisplayInfo } from './DisplayInfo';\nimport { InfoMark } from './InfoMark';\n\nconst AcknowledgeTip: FC = () => (\n  /* eslint-disable react/jsx-one-expression-per-line */\n  <>\n    <strong>TTI (Time to Interactive)</strong> metric measures the time until the main sub-resources\n    of the page have rendered and it is capable of reliably responding to user input quickly\n    (similar to <a {...{ href: 'https://web.dev/tti/', target: 'blank' }}>that</a>\n    ).\n    <br />\n    <br />\n    <strong>TBT (Total Blocking Time)</strong> measures the total amount of time until TTI in the\n    chunks where the main thread was blocked for long enough to prevent input responsiveness\n    (similar to <a {...{ href: 'https://web.dev/tbt/', target: 'blank' }}>that</a>).\n  </>\n  /* eslint-enable */\n);\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = (props) => {\n  switch (props.status) {\n    case 'done': {\n      const { TTI, TBT } = props.data;\n      return (\n        <DisplayInfo\n          {...{\n            info: [\n              `TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`,\n              <InfoMark key=\"InfoTip\" {...{ popupInfo: <AcknowledgeTip /> }} />,\n            ],\n          }}\n        />\n      );\n    }\n\n    case 'pending':\n      return <DisplayInfo {...{ info: ['performance measuring...'] }} />;\n\n    case 'error':\n      return (\n        <DisplayInfo\n          {...{\n            info: ['error', <InfoMark key=\"InfoTip\" {...{ popupInfo: props.error.message }} />],\n          }}\n        />\n      );\n\n    default:\n      break;\n  }\n\n  return <DisplayInfo />;\n};\n\nexport { TipsPoolProvider } from './TipsPoolProvider';\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<MetricsComponentProps>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps({\n            status: 'error',\n            data: null,\n            error: Error('(usePerfObserver) No long task has been registered'),\n          });\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps({ status: 'pending', data: null });\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<MetricsComponentProps>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return {\n      data: null,\n      status: 'error',\n      error: Error('(usePerfObserver) The browser does not support the library'),\n    };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps({ status: 'pending', data: null });\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => undefined);\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef, useState } from 'react';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nconst INPUT_WAITING_DELAY = 3000;\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n  const [inputValue, setInputValue] = useState(value);\n  const [showSpin, setShowSpin] = useState(false);\n\n  const onChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const input = e.target.value;\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n    \n    setInputValue(input);\n    setShowSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setShowSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  };\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: showSpin }} />\n    </div>\n  );\n};\n","import { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { DelayedInput } from './DelayedInput';\nimport { HookOrNotProp } from './HookOrNotProp';\n\nexport type ChooseGridProps = HookOrNotProp<'gridSize', number> & {\n  onGridChosen: (p: { gridSize: number }) => void;\n};\n\nexport const ChooseGrid: FC<ChooseGridProps> = (props) => {\n  const gridSize = props.gridSize ?? props.useGridSize();\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  const inputCallback = (input: string): void => {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10);\n    props.onGridChosen({ gridSize: nextGridSize > 0 ? nextGridSize : gridSize });\n  };\n\n  return (\n    <div>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","import { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport const ONE_HUNDRED_PERCENT = 100;\nconst DEF_PIXELS_PERCENT_TO_PAINT = 30;\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\ntype MassivePaintCallback = (percentage: number) => void;\nexport type PaintRandomPixels =\n  | {\n      paintRandomPixels: MassivePaintCallback;\n      usePaintRandomPixels?: undefined;\n    }\n  | {\n      usePaintRandomPixels:\n        | (() => MassivePaintCallback)\n        | (() => [MassivePaintCallback, JSX.Element[]]);\n      paintRandomPixels?: undefined;\n    };\n\nexport const MassivePaintButton: FC<PaintRandomPixels> = (props) => {\n  let paintRandomPixels: MassivePaintCallback;\n  let painterComponents: JSX.Element[];\n\n  if (props.paintRandomPixels) {\n    [paintRandomPixels, painterComponents] = [props.paintRandomPixels, []];\n  } else {\n    const usePaintRandomPixelsResult = props.usePaintRandomPixels();\n\n    [paintRandomPixels, painterComponents] = Array.isArray(usePaintRandomPixelsResult)\n      ? usePaintRandomPixelsResult\n      : [usePaintRandomPixelsResult, []];\n  }\n\n  const [percentsInput, setPercentsInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  const startPaint = (): void => {\n    startMeasure();\n    const percentsNumber = parseInt(percentsInput, 10);\n\n    percentsNumber >= 0 && percentsNumber <= ONE_HUNDRED_PERCENT\n      ? paintRandomPixels(percentsNumber)\n      : setPercentsInput('0');\n  };\n\n  const percentCallback = ({ target: { value: input } }: ChangeEvent<HTMLInputElement>): void => {\n    setPercentsInput(input);\n  };\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button {...{ callback: startPaint, name: 'paint n% random pixels' }} />\n          <InputField {...{ label: 'n: ', value: percentsInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {painterComponents}\n    </>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { buttonContainerStyle } from './styles';\n\ntype MeasuredControlButtonProps = { name: string } & HookOrNotProp<'onPushButton'>;\n\nexport const MeasuredControlButton: FC<MeasuredControlButtonProps> = (props) => {\n  const onPushButton = props.onPushButton ?? props.useOnPushButton();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: () => {\n            startMeasure();\n            onPushButton();\n          },\n          name: props.name,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport type { ChooseGridProps } from './ChooseGrid';\nimport { ChooseGrid } from './ChooseGrid';\nimport type { HookOrNotProp } from './HookOrNotProp';\nimport type { PaintRandomPixels } from './MassivePaintButton';\nimport { MassivePaintButton } from './MassivePaintButton';\nimport { MeasuredControlButton } from './MeasuredControlButton';\n\nexport const DEF_GRID_SIZE = 32;\ntype ControlPanelProps = { headline: string } & HookOrNotProp<'repaintRow'> &\n  HookOrNotProp<'switchRows', [() => void, () => void], 'switchRowsHooks'> &\n  HookOrNotProp<'paintRandomSinglePixel'> &\n  PaintRandomPixels &\n  ChooseGridProps;\n\nexport const ControlPanel: FC<ControlPanelProps> = (props) => {\n  return (\n    <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n      <div {...{ style: { margin: '0 0 10px' } }}>\n        <strong>{props.headline}</strong>\n      </div>\n      <MeasuredControlButton\n        {...{\n          name: 're-paint',\n          ...(props.repaintRow\n            ? { onPushButton: props.repaintRow }\n            : { useOnPushButton: props.useRepaintRow }),\n        }}\n      />\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) =>\n        props.switchRows ? (\n          <MeasuredControlButton {...{ name, onPushButton: props.switchRows[i] }} key={name} />\n        ) : (\n          <MeasuredControlButton\n            {...{ name, useOnPushButton: props.switchRowsHooks[i] }}\n            key={name}\n          />\n        )\n      )}\n      <MeasuredControlButton\n        {...{\n          name: 'paint random pixel',\n          ...(props.paintRandomSinglePixel\n            ? { onPushButton: props.paintRandomSinglePixel }\n            : { useOnPushButton: props.usePaintRandomSinglePixel }),\n        }}\n      />\n      <MassivePaintButton\n        {...(props.paintRandomPixels\n          ? { paintRandomPixels: props.paintRandomPixels }\n          : { usePaintRandomPixels: props.usePaintRandomPixels })}\n      />\n      <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n      <ChooseGrid\n        {...{\n          onGridChosen: props.onGridChosen,\n          ...(props.gridSize === undefined\n            ? { useGridSize: props.useGridSize }\n            : { gridSize: props.gridSize }),\n        }}\n      />\n    </div>\n  );\n};\n","export function drawPixels(totalNumber: number, numberToDraw: number): number[] {\n  if (totalNumber < numberToDraw) {\n    throw Error('Number to draw must be less than total');\n  }\n\n  const [flagToWrite, numberToLeave] =\n    numberToDraw < totalNumber / 2 ? [true, totalNumber - numberToDraw] : [false, numberToDraw];\n  const pixels = Array(totalNumber)\n    .fill(null)\n    .map((_, i) => i);\n  const pickedPixels: number[] = [];\n\n  while (pixels.length > numberToLeave) {\n    const pickPixel = Math.floor(Math.random() * pixels.length);\n\n    if (flagToWrite) {\n      pickedPixels.push(pixels[pickPixel]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    pickPixel < pixels.length - 1 ? (pixels[pickPixel] = pixels.pop()!) : pixels.pop();\n  }\n\n  return flagToWrite ? pickedPixels : pixels;\n}\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\nconst range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport const getNextAtom = <K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> =>\n  atom({ key: getNextKey(prefix), default: defaultValue });\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoiceKeyPrefix = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<\n  AlternativeForChoice,\n  HoldColorForAlternativeAtom | null\n>;\nexport type AlternativeForChoice = typeof alternativeForChoiceKeyPrefix;\nexport type HoldColorForAlternativeAtom = {\n  atom: Atom<ColorForAlternative>;\n};\n\nexport const gridSizeKey = 'grid-size';\n\nexport interface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport type { RecoilState } from 'recoil';\nimport { atom } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  Atom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoiceKeyPrefix,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const createColorForAlternativeAtom = (choice: PixelChoice): Atom<ColorForAlternative> =>\n  getNextAtom(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativeKeyPrefix,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nlet gridSizeAtom = atom({ key: gridSizeKey, default: DEF_GRID_SIZE });\nexport const getGridSizeAtom = (): RecoilState<number> => gridSizeAtom;\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nconst alternativeForChoiceKeys = ([0, 1] as const).map(\n  (c) => `${alternativeForChoiceKeyPrefix}-${c}`\n) as [string, string];\n\nexport const createAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] =>\n  alternativeForChoiceKeys.map((key, i) =>\n    atom({ key: key, default: { atom: createColorForAlternativeAtom(i as PixelChoice) } })\n  ) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nlet alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n\nexport const getAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] => alternativeForChoiceAtoms;\n\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [refreshKey, createKey] = useState(createFreshKey);\n\n  const commandToCreateRefreshKey = ({ gridSize }: { gridSize: number }) => {\n    alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n    gridSizeAtom = atom({ key: gridSizeKey, default: gridSize });\n    createKey(createFreshKey);\n  };\n\n  return [refreshKey, commandToCreateRefreshKey];\n};\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { SetterOrUpdater, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  choiceForPixelPlaceholderAtom,\n  colorForAlternativePlaceholderAtom,\n  createColorForAlternativeAtom,\n  getAlternativeForChoiceAtoms,\n  getGridSizeAtom,\n  rememberActiveChoiceAtom,\n} from './State/State';\nimport type {\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorValue,\n  HoldColorForAlternativeAtom,\n  PixelChoice,\n} from './State/StateInterface';\nimport { storeAtomsMethods } from './State/storeAtomsMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\ntype ManageColorState = [ColorValue, SetterOrUpdater<ColorValue>];\n\nexport const useRepaintRow = (): (() => void) => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const alternatives = alternativeForChoiceAtoms.map(useAlternative) as [\n    HoldColorForAlternativeAtom | null,\n    HoldColorForAlternativeAtom | null\n  ];\n\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n  const colorsState = alternatives.map(useColorState) as [ManageColorState, ManageColorState];\n\n  return (): void => {\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  };\n};\n\nfunction useAlternative(\n  altForChoiceAtom: AlternativeForChoiceAtom\n): HoldColorForAlternativeAtom | null {\n  return useRecoilValue(altForChoiceAtom);\n}\n\nfunction useColorState(alt: HoldColorForAlternativeAtom | null): ManageColorState {\n  return useRecoilState(alt?.atom ?? colorForAlternativePlaceholderAtom);\n}\n\nexport const switchRowsHooks = [0, 1].map((row) => () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n\n  type ManageAlternativesState = [\n    HoldColorForAlternativeAtom,\n    SetterOrUpdater<HoldColorForAlternativeAtom | null>\n  ];\n\n  const manageAlternativesState = alternativeForChoiceAtoms.map((atom) => useRecoilState(atom)) as [\n    ManageAlternativesState,\n    ManageAlternativesState\n  ];\n\n  return (): void => {\n    const prevAtom = manageAlternativesState[row][0];\n\n    if (prevAtom) {\n      manageAlternativesState[row][1](null);\n      setActiveChoice((1 - row) as PixelChoice);\n    } else {\n      manageAlternativesState[row][1]({\n        atom: createColorForAlternativeAtom(row as PixelChoice),\n      });\n\n      setActiveChoice(row);\n    }\n  };\n}) as [() => () => void, () => () => void];\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [atomToPaint]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (): void => {\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  };\n};\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const usePaintRandomPixels = (): [(percentage: number) => void, JSX.Element[]] => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [pixelsToPaint, setPixelsToPaint] = useState<JSX.Element[]>([]);\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  return [\n    (percentage: number): void => {\n      const allPixelsNumber = gridSize ** 2;\n      const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n      setPixelsToPaint(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => (\n          // eslint-disable-next-line react/jsx-key\n          <PixelToPaint\n            {...{\n              pixelChoiceAtom:\n                storeAtomsMethods.get(p) ??\n                (() => {\n                  throw Error('It must be defined');\n                })(),\n            }}\n          />\n        ))\n      );\n    },\n    pixelsToPaint,\n  ];\n};\n\nexport const useGridSize = (): number => {\n  const gridSizeAtom = getGridSizeAtom();\n\n  return useRecoilValue(gridSizeAtom);\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES ? { type: T; payload: AlternativesPayloads } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { choiceForPixelPlaceholderAtom, getAlternativeForChoiceAtoms } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getGridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  switchRowsHooks,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshApp } from './State/State';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <RecoilRoot>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n          key: refreshKey,\n        }}\n      >\n        <PixelsStage />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"recoil\" library',\n            useRepaintRow,\n            switchRowsHooks,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateRefreshKey,\n          }}\n        />\n      </div>\n    </RecoilRoot>\n  );\n};\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport const createNewPixelEntryAction = (\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> => ({\n  type: ActionType.CREATE_NEW_PIXEL_ENTRY,\n  payload: { pixel, choice },\n});\n\nexport const switchPixelChoiceAction = (\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> => ({\n  type: ActionType.SWITCH_PIXEL_CHOICE,\n  payload: { pixel },\n});\n\nexport const switchMultiplePixelsAction = (\n  pixels: ChoiceForPixel[]\n): ActionReturn<ActionType.SWITCH_MULTIPLE_PIXELS> => ({\n  type: ActionType.SWITCH_MULTIPLE_PIXELS,\n  payload: { pixels },\n});\n\nexport const switchAlternativeAction = (\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> => ({\n  type: ActionType.SWITCH_ALTERNATIVES,\n  payload: { choice: alternativeOfChoice },\n});\n\nexport const repaintRowAction = (): ActionReturn<ActionType.REPAINT_ROW> => ({\n  type: ActionType.REPAINT_ROW,\n});\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport const getGridSize = (state: State): number => state.gridSize;\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  repaintRowAction,\n  switchAlternativeAction,\n  switchMultiplePixelsAction,\n  switchPixelChoiceAction,\n} from './State/actions';\nimport { getGridSize } from './State/selectors';\nimport type { PixelChoice } from './State/StateInterface';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const useRepaintRow = (): (() => void) => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(repaintRowAction());\n  };\n};\n\nexport const switchRowsHooks = [0, 1].map((row) => () => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(switchAlternativeAction(row as PixelChoice));\n  };\n}) as [() => () => void, () => () => void];\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return () => {\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  };\n};\n\nexport const usePaintRandomPixels = (): ((percentage: number) => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return (percentage: number) => {\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n    dispatch(\n      switchMultiplePixelsAction(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n          (p) =>\n            storeKeysMethods.get(p) ??\n            (() => {\n              throw Error('It must be defined');\n            })()\n        )\n      )\n    );\n  };\n};\n\nexport const useGridSize = (): number => useSelector(getGridSize);\n","import { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  initialState,\n} from './State';\nimport type {\n  AlternativeForChoiceState,\n  ChoiceForPixel,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initState: State;\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nexport const appReducer = (state = initState, action: ActionReturn): State => {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n\n      return { ...state, ...updatePixel({} as State, pixel) };\n    }\n\n    case ActionType.SWITCH_MULTIPLE_PIXELS: {\n      const {\n        payload: { pixels },\n      } = action;\n\n      const stateUpdate = pixels.reduce(updatePixel, {} as State);\n\n      return { ...state, ...stateUpdate };\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n\n      const altForChoiceKey = alternativeForChoiceKeys[choice];\n      const colorForAltKey = state[altForChoiceKey];\n\n      if (colorForAltKey) {\n        return {\n          ...state,\n          [altForChoiceKey]: null,\n          rememberActiveChoice: (1 - choice) as PixelChoice,\n        };\n      }\n\n      const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n      return {\n        ...state,\n        ...colorForAlternativeForChoiceEntry,\n        rememberActiveChoice: choice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n          ? {}\n          : { rememberActiveChoice: nextPotentialChoice }),\n        ...(altKey === null ? {} : { [altKey]: getRandomColor(state[altKey]) }),\n      };\n    }\n\n    default:\n      return state;\n  }\n\n  function updatePixel(update: State, pixel: ChoiceForPixel) {\n    const prevChoice = state[pixel];\n\n    return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n  }\n};\n\nexport const initializeState = (gridSize: number): void => {\n  initState = {\n    ...initialState,\n\n    ...([0, 1] as const).reduce(\n      (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n      {} as ColorForAlternativeState & AlternativeForChoiceState\n    ),\n\n    gridSize,\n  };\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport interface GridSizeState {\n  gridSize: number;\n}\n\nexport interface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { alternativeForChoicePlaceholderKey, colorForAlternativeKeyPrefix } from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const colorForAlternativeKey = getNextKey(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative\n  );\n  const color = getRandomColor(DEF_COLOR);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nexport const initialState = { rememberActiveChoice: 0 } as State;\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector((state: State) => getColorForAlternative(state, altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice, State } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useSelector((state: State) => getChoiceForPixel(state, choiceForPixel));\n  const possibleAltControl = useSelector((state: State) =>\n    getAlternativeForChoice(state, alternativeForChoiceKeys[choice])\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { useState } from 'react';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport type { State } from './StateInterface';\n\nexport const useCreateStore = (): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  (p: { gridSize: number }) => void\n] => {\n  const [store, provideStore] = useState<Store<State, ActionReturn<ActionType>>>(() => {\n    initializeState(DEF_GRID_SIZE);\n\n    return createStore(appReducer);\n  });\n\n  const [refreshKey, setNewKey] = useState(createFreshKey);\n\n  const commandToCreateFreshStore = ({ gridSize }: { gridSize: number }): void => {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  };\n\n  return [store, refreshKey, commandToCreateFreshStore];\n};\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport {\n  switchRowsHooks,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"react-redux\" library',\n            useRepaintRow,\n            switchRowsHooks,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateFreshStore,\n          }}\n        />\n      </div>\n    </Provider>\n  );\n};\n","import type { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\n\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n\n  get: (i: number) => ChoiceForPixel | undefined;\n\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport const gridSizeKey = 'grid-size';\n\nexport interface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport { goInterstate, Interstate } from 'use-interstate';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const { initInterstate, useInterstate, readInterstate, setInterstate } = goInterstate<\n  State & Interstate\n>();\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const [colorForAlternativeKey, color] = [\n    getNextKey(`${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative),\n    getRandomColor(DEF_COLOR),\n  ];\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\ninitInterstate({ ...initialState, ...createColorForChoiceDefState() });\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [key, setKey] = useState(createFreshKey);\n\n  const commandToCreateFreshKey = ({ gridSize }: { gridSize: number }): void => {\n    initInterstate({\n      ...initialState,\n      ...createColorForChoiceDefState(),\n      [gridSizeKey]: gridSize,\n    });\n\n    setKey(createFreshKey);\n  };\n\n  return [key, commandToCreateFreshKey];\n};\n\nfunction createColorForChoiceDefState(): ColorForAlternativeState & AlternativeForChoiceState {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as ColorForAlternativeState & AlternativeForChoiceState\n  );\n}\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  readInterstate,\n  setInterstate,\n} from './State/State';\nimport type {\n  AlternativeForChoiceState,\n  ColorForAlternativeState,\n  PixelChoice,\n  RememberActiveChoiceState,\n} from './State/StateInterface';\nimport { gridSizeKey, rememberActiveChoiceKey } from './State/StateInterface';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const repaintRow = (): void => {\n  setInterstate((state) => {\n    const { [rememberActiveChoiceKey]: activeChoice } = state;\n    const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    return {\n      ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n        ? ({} as RememberActiveChoiceState)\n        : { [rememberActiveChoiceKey]: nextPotentialChoice }),\n      ...(altKey === null\n        ? ({} as ColorForAlternativeState)\n        : { [altKey]: getRandomColor(state[altKey]) }),\n    };\n  });\n};\n\nexport const switchRows = [0, 1].map((row) => (): void => {\n  setInterstate((state) => {\n    const altForChoiceKey = alternativeForChoiceKeys[row];\n    const colorForAltKey = state[altForChoiceKey];\n\n    if (colorForAltKey) {\n      return {\n        [altForChoiceKey]: null,\n        [rememberActiveChoiceKey]: (1 - row) as PixelChoice,\n      } as ColorForAlternativeState & AlternativeForChoiceState & RememberActiveChoiceState;\n    }\n\n    const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(\n      row as PixelChoice\n    );\n\n    return {\n      ...colorForAlternativeForChoiceEntry,\n      [rememberActiveChoiceKey]: row as PixelChoice,\n    };\n  });\n}) as [() => void, () => void];\n\nexport const paintRandomSinglePixel = (): void => {\n  setInterstate(\n    drawPixelToPaint(readInterstate(gridSizeKey) ** 2),\n    (prev) => (1 - prev) as PixelChoice\n  );\n};\n\nexport const paintRandomPixels = (percentage: number): void => {\n  const allPixelsNumber = readInterstate(gridSizeKey) ** 2;\n  const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n  drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => {\n    setInterstate(\n      storeKeysMethods.get(p) ??\n        (() => {\n          throw Error('It must be defined');\n        })(),\n\n      (prevChoice) => (1 - prevChoice) as PixelChoice\n    );\n  });\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeKeysMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlKey: ColorForAlternative }> = ({ altControlKey }) => {\n  const color = useInterstate(altControlKey);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { alternativeForChoiceKeys, setInterstate, useInterstate } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useInterstate(choiceForPixel);\n  const possibleAltKey = useInterstate(alternativeForChoiceKeys[choice]);\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    setInterstate(nextKey, defChoice);\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltKey && choiceForPixel !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlKey: possibleAltKey }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { readInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const gridSize = readInterstate(gridSizeKey);\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { paintRandomPixels, paintRandomSinglePixel, repaintRow, switchRows } from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { readInterstate, useRefreshApp } from './State/State';\nimport { gridSizeKey } from './State/StateInterface';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <div\n      {...{\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '10px auto 10px 10px',\n        },\n        key: refreshKey,\n      }}\n    >\n      <PixelsStage />\n      <ControlPanel\n        {...{\n          headline: 'Implemented using \"use-interstate\" library',\n          repaintRow,\n          switchRows,\n          paintRandomSinglePixel,\n          paintRandomPixels,\n          gridSize: readInterstate(gridSizeKey),\n          onGridChosen: commandToCreateRefreshKey,\n        }}\n      />\n    </div>\n  );\n};\n","import { TipsPoolProvider } from '@compare-react-state-management-solutions/performance-info';\nimport { App as RecoilApp } from '@compare-react-state-management-solutions/recoil-component';\nimport { App as ReduxHooksApp } from '@compare-react-state-management-solutions/redux-hooks-component';\nimport { App as UseInterstateApp } from '@compare-react-state-management-solutions/use-interstate-component';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst appsContainerStyle: CSSProperties = { display: 'flex' };\n\nexport const App: FC = () => (\n  <TipsPoolProvider>\n    <div {...{ style: { display: 'flex', flexDirection: 'column', height: 'calc(100vh - 20px)' } }}>\n      <div {...{ style: { margin: '5px 0 0 10px', fontWeight: 'bold' } }}>v.1.5.0</div>\n      <div {...{ style: { display: 'flex', flexGrow: 1 } }}>\n        <div {...{ style: appsContainerStyle }}>\n          <RecoilApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <UseInterstateApp />\n        </div>\n        <div {...{ style: appsContainerStyle }}>\n          <ReduxHooksApp />\n        </div>\n      </div>\n    </div>\n  </TipsPoolProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}