{"version":3,"sources":["internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/reusable-components/InputField.tsx","component_packages/recoil-implementation/reusable-components/Spinner.tsx","component_packages/recoil-implementation/reusable-components/DelayedInput.tsx","component_packages/recoil-implementation/reusable-components/PerformanceInfo.tsx","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/controls/ChooseGrid.tsx","component_packages/recoil-implementation/reusable-components/Button.tsx","component_packages/recoil-implementation/controls/styles.ts","component_packages/recoil-implementation/controls/DisableEnableButtons.tsx","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/controls/MassivePaintButton.tsx","component_packages/recoil-implementation/controls/RandomPaintButton.tsx","component_packages/recoil-implementation/controls/RepaintButton.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/use-interstate-implementation/helpers/getNextAtom.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/reusable-components/InputField.tsx","component_packages/use-interstate-implementation/reusable-components/Spinner.tsx","component_packages/use-interstate-implementation/reusable-components/DelayedInput.tsx","component_packages/use-interstate-implementation/reusable-components/PerformanceInfo.tsx","component_packages/use-interstate-implementation/State/storeAtomsMethods.ts","component_packages/use-interstate-implementation/controls/ChooseGrid.tsx","component_packages/use-interstate-implementation/reusable-components/Button.tsx","component_packages/use-interstate-implementation/controls/styles.ts","component_packages/use-interstate-implementation/controls/DisableEnableButtons.tsx","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/controls/MassivePaintButton.tsx","component_packages/use-interstate-implementation/controls/RandomPaintButton.tsx","component_packages/use-interstate-implementation/controls/RepaintButton.tsx","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","App.tsx","index.js"],"names":["prefCountsRecords","Map","getNextKey","prefix","count","has","get","set","defSettings","measureFromCreating","MeasureComponent","nestedComponent","children","startMeasure","firstTimeRun","useState","perfMarkName","supportedEntryTypes","PerformanceObserver","includes","isSupported","data","status","childrenProps","setChildrenProps","stateFlags","useRef","useEffectRegistered","timeoutIDRec","lastEndTime","initRun","evalTBT","timeOfStartingMeasure","finishMeasure","TTI","TBT","createdObserver","list","obs","current","clearScheduledTimeout","scheduleNext","timeoutID","clearTimeout","setTimeout","disconnect","markList","getEntriesByName","length","info","startTime","observe","entryTypes","longTasksList","getEntriesByType","every","task","duration","delta","performance","mark","observer","useEffect","useMemo","cloneElement","usePerfObserver","settings","usePerfObserverReturn","range","getRandomColor","color","calcColor","Math","round","parseInt","slice","random","toString","padStart","getNextAtom","defaultValue","atom","key","default","choiceForPixel","colorForAlternative","DEF_COLOR","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","getNextColorForAlternativeAtom","choice","alternativeForChoiceAtoms","map","c","gridSizeAtom","rememberActiveChoiceAtom","InputField","label","onChange","value","width","addStyle","style","display","type","baseStyle","height","marginRight","borderRadius","backgroundColor","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","useMultiState","inputValue","showSpin","inputState","setInputState","alignItems","e","input","target","records","activeTimeoutId","undefined","waitDelay","fontSize","padding","justifyContent","PerformanceInfo","storeAtoms","curIndex","storeAtomsMethods","newAtom","push","i","ChooseGrid","setGridSize","useSetRecoilState","setActiveChoice","setAlternatives","WrapDisplay","forEach","prevState","marginBottom","Button","callback","name","calcStyle","onClick","buttonContainerStyle","margin","DisableEnableButtons","alternativesState","useRecoilState","perfMeasureAssets","evenOrOdd","prevAtom","drawPixelToPaint","totalNumber","randomIndex","floor","atomToSet","Error","renderInfoContainerStyle","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","MassivePaintButton","gridSize","useRecoilValue","percentInput","setPercentInput","pixelsToPaint","setPixelsToPaint","prevPixels","checkPercent","percent","allPixelsNumber","pixelsNumberToPaint","pixelsAtoms","a","RandomPaintButton","atomToPaint","setAtomToPaint","paintRandomPixel","prev","RepaintButton","alternatives","colorsState","activeChoice","prevColor","nextPotentialChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","pixelChoice","setPixelChoice","possibleStateAtom","nextAtom","PixelsLine","line","Array","fill","PixelsStage","stageHeight","setStageHeight","lines","useSmartMemo","currentLine","flexGrow","ref","getBoundingClientRect","App","flexDirection","borderTop","useInterstate","getUseInterstate","both","alternativesRecord","setColors","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6324b6c6.chunk.js","sourcesContent":["const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  let count = 0;\n  if (prefCountsRecords.has(prefix)) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    count = prefCountsRecords.get(prefix)! + 1;\n  }\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from 'get-next-key';\nimport type { FC, MutableRefObject, ReactElement } from 'react';\nimport React, { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\n\nconst MIN_QUIET_WINDOW_DURATION = 5000;\nconst MIN_LONG_TASK_DURATION = 50;\n\nexport interface Measures {\n  TTI: number;\n  TBT: number;\n}\n\nexport interface MetricsComponentProps {\n  data: Measures | null;\n  status?: 'never' | 'pending' | 'done' | 'error';\n}\n\ninterface UsePerfObserverSettings {\n  measureFromCreating: boolean;\n}\n\nconst defSettings: UsePerfObserverSettings = {\n  measureFromCreating: false,\n};\n\ntype WrapMetricsComponentChildren = { children: ReactElement<MetricsComponentProps> };\n\nconst MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    startMeasure: MutableRefObject<() => void>;\n    firstTimeRun: MutableRefObject<boolean>;\n    measureFromCreating: boolean;\n  }\n> = ({ children: nestedComponent, startMeasure, firstTimeRun, measureFromCreating }) => {\n  const [perfMarkName] = useState(() => getNextKey('start'));\n  const [isSupported] = useState(() => {\n    const { supportedEntryTypes } = PerformanceObserver;\n\n    if (\n      supportedEntryTypes &&\n      supportedEntryTypes.includes('mark') &&\n      supportedEntryTypes.includes('longtask')\n    ) {\n      return true;\n    }\n\n    return false;\n  });\n  const [childrenProps, setChildrenProps] = useState<Required<MetricsComponentProps>>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return { data: null, status: 'error' };\n  });\n\n  const stateFlags = useRef({ useEffectRegistered: false });\n  const timeoutIDRec = useRef<NodeJS.Timeout | null>(null);\n\n  const [observer] = useState<PerformanceObserver | null>(() => {\n    let initRun = true;\n    let evalTBT = 0;\n    let timeOfStartingMeasure = 0;\n    let lastEndTime: number;\n\n    function finishMeasure() {\n      setChildrenProps({\n        data: { TTI: lastEndTime - timeOfStartingMeasure, TBT: evalTBT },\n        status: 'done',\n      });\n    }\n\n    if (isSupported) {\n      const createdObserver = new PerformanceObserver((list, obs) => {\n        const {\n          current: { useEffectRegistered },\n        } = stateFlags;\n\n        function clearScheduledTimeout({ scheduleNext }: { scheduleNext: boolean }) {\n          const { current: timeoutID } = timeoutIDRec;\n          if (timeoutID !== null) {\n            clearTimeout(timeoutID);\n          }\n\n          if (scheduleNext) {\n            timeoutIDRec.current = setTimeout(() => {\n              obs.disconnect();\n              timeoutIDRec.current = null;\n              if (stateFlags.current.useEffectRegistered) {\n                finishMeasure();\n              }\n            }, MIN_QUIET_WINDOW_DURATION);\n            return;\n          }\n\n          obs.disconnect();\n          timeoutIDRec.current = null;\n        }\n\n        clearScheduledTimeout({ scheduleNext: true });\n        if (initRun || useEffectRegistered) {\n          initRun = false;\n\n          if (!timeOfStartingMeasure) {\n            const markList = list.getEntriesByName(perfMarkName);\n            if (markList.length > 0) {\n              [{ startTime: timeOfStartingMeasure }] = markList;\n              lastEndTime = timeOfStartingMeasure;\n            } else {\n              clearScheduledTimeout({ scheduleNext: false });\n              setChildrenProps((info) => ({ ...info, status: 'error' }));\n              return;\n            }\n\n            obs.observe({ entryTypes: ['longtask'] });\n          }\n\n          const longTasksList = list.getEntriesByType('longtask');\n          if (longTasksList.length > 0) {\n            longTasksList.every((task) => {\n              const { startTime, duration } = task;\n              const delta = startTime - lastEndTime;\n\n              if (delta >= MIN_QUIET_WINDOW_DURATION) {\n                clearScheduledTimeout({ scheduleNext: false });\n                finishMeasure();\n                return false;\n              }\n\n              if (-delta < duration) {\n                if (delta > 0 || -delta < MIN_LONG_TASK_DURATION) {\n                  evalTBT += duration - MIN_LONG_TASK_DURATION;\n                } else {\n                  evalTBT += duration + delta;\n                }\n                lastEndTime = startTime + duration;\n              }\n\n              return true;\n            });\n          }\n        } else {\n          clearScheduledTimeout({ scheduleNext: false });\n        }\n      });\n\n      // eslint-disable-next-line no-param-reassign\n      startMeasure.current = () => {\n        evalTBT = 0;\n        timeOfStartingMeasure = 0;\n        setChildrenProps((info) => ({ ...info, status: 'pending' }));\n        createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n        performance.mark(perfMarkName);\n      };\n\n      return createdObserver;\n    }\n\n    return null;\n  });\n\n  if (firstTimeRun.current && measureFromCreating && observer) {\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    stateFlags.current.useEffectRegistered = true;\n    // eslint-disable-next-line no-param-reassign\n    firstTimeRun.current = false;\n\n    if (observer) {\n      if (measureFromCreating) {\n        setChildrenProps((info) => ({ ...info, status: 'pending' }));\n      }\n\n      return () => {\n        const { current: timeoutID } = timeoutIDRec;\n        observer.disconnect();\n        if (timeoutID !== null) {\n          clearTimeout(timeoutID);\n        }\n      };\n    }\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfObserverSettings> = {}\n): [FC<WrapMetricsComponentChildren>, () => void] {\n  const { measureFromCreating } = { ...defSettings, ...settings };\n\n  const startMeasure = useRef(() => {});\n  const firstTimeRun = useRef(true);\n\n  const [usePerfObserverReturn] = useState<[FC<WrapMetricsComponentChildren>, () => void]>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent {...{ startMeasure, firstTimeRun, measureFromCreating }}>\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasure.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n","const range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import { getNextKey } from 'get-next-key';\nimport { atom, RecoilState } from 'recoil';\nimport type { State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): RecoilState<D> {\n  return atom({ key: getNextKey(prefix), default: defaultValue });\n}\n","import type { RecoilState } from 'recoil';\n\nexport const choiceForPixel = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixel;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternative = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternative;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoice = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoice;\nexport interface CarryAtom<K extends keyof State> {\n  atom: Atom<K>;\n}\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: CarryAtom<ColorForAlternative> | null;\n};\n\nexport const gridSize = 'grid-size';\ninterface GridSizeState {\n  [gridSize]: number;\n}\n\nexport const rememberActiveChoice = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoice]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]> & { key: K };\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getRandomColor } from 'random-color';\nimport { atom, RecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  ColorValue,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoice,\n  choiceForPixel,\n  colorForAlternative,\n  gridSize,\n  rememberActiveChoice,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixel,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternative,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport function getNextColorForAlternativeAtom(choice: PixelChoice): RecoilState<ColorValue> {\n  return getNextAtom(\n    `${colorForAlternative}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\nexport const alternativeForChoiceAtoms = ([0, 1] as const).map(\n  (c) =>\n    atom({\n      key: `${alternativeForChoice}-${c}`,\n      default: { atom: getNextColorForAlternativeAtom(c) },\n    }) as AlternativeForChoiceAtom\n) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nexport const gridSizeAtom = atom({ key: gridSize, default: DEF_GRID_SIZE });\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoice, default: 0 });\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nconst storeAtoms = [] as ChoiceForPixelAtom[];\nlet curIndex = 0;\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  getNext: () => ChoiceForPixelAtom | undefined;\n  resetIndex: (i?: number) => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n  get(i) {\n    return storeAtoms[i];\n  },\n  getNext() {\n    return storeAtoms[curIndex++];\n  },\n  resetIndex(i = 0) {\n    curIndex = i;\n  },\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  DEF_GRID_SIZE,\n  getNextColorForAlternativeAtom,\n  gridSizeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type { CarryAtom, ColorForAlternative, PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{ addStyle?: CSSProperties }> = ({ addStyle = {} }) => {\n  const setGridSize = useSetRecoilState(gridSizeAtom);\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const setAlternatives = [0, 1].map((i) => useSetRecoilState(alternativeForChoiceAtoms[i]));\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.resetIndex();\n    setGridSize(parseInt(input, 10));\n    setActiveChoice(0);\n    setAlternatives.forEach((set, i) => {\n      set((prevState) => {\n        if (!prevState) {\n          return { atom: getNextColorForAlternativeAtom(i as PixelChoice) } as CarryAtom<\n            ColorForAlternative\n          >;\n        }\n        return prevState;\n      });\n    });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${DEF_GRID_SIZE}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  getNextColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type { CarryAtom, ColorForAlternative, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  const alternativesState = [0, 1].map((i) => useRecoilState(alternativeForChoiceAtoms[i]));\n  const perfMeasureAssets = [0, 1].map(() => usePerfObserver());\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      const prevAtom = alternativesState[evenOrOdd][0];\n      perfMeasureAssets[evenOrOdd][1]();\n\n      if (!prevAtom) {\n        setActiveChoice(evenOrOdd);\n        alternativesState[evenOrOdd][1]({\n          atom: getNextColorForAlternativeAtom(evenOrOdd),\n        } as CarryAtom<ColorForAlternative>);\n      } else {\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        alternativesState[evenOrOdd][1](null);\n      }\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom } from '../State/State';\nimport { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom } from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n\n  const [atomToPaint, setAtomToPaint] = useState([choiceForPixelPlaceholderAtom] as const);\n  const paintRandomPixel = useSetRecoilState(atomToPaint[0]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint([drawPixelToPaint(gridSize ** 2)]);\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternatives = [0, 1].map((i) => useRecoilValue(alternativeForChoiceAtoms[i]));\n  const colorsState = [0, 1].map((i) =>\n    useRecoilState(alternatives[i]?.atom ?? colorForAlternativePlaceholderAtom)\n  );\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport { choiceForPixel, ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [pixelChoice, setPixelChoice] = useState<ChoiceForPixelAtom>(choiceForPixelPlaceholderAtom);\n  const [choice, setChoice] = useRecoilState(pixelChoice);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    if (pixelChoice === choiceForPixelPlaceholderAtom) {\n      let nextAtom = storeAtomsMethods.getNext();\n      if (!nextAtom) {\n        nextAtom = getNextAtom(choiceForPixel, defChoice) as ChoiceForPixelAtom;\n        storeAtomsMethods.push(nextAtom);\n      }\n      setPixelChoice(nextAtom);\n    } else {\n      setChoice(defChoice);\n    }\n  }, [defChoice, pixelChoice, setChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && pixelChoice !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { gridSizeAtom } from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <div {...{ style: { display: 'inline-block' } }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: 'calc(100vh - 20px)',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;recoil&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid />\n        </div>\n      </div>\n    </div>\n  </RecoilRoot>\n);\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","export const choiceForPixel = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixel;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternative = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternative;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoice = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoice;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternativeAtom | null;\n};\n\nexport const gridSize = 'grid-size';\ninterface GridSizeState {\n  [gridSize]: number;\n}\n\nexport const rememberActiveChoice = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoice]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getUseInterstate } from '@smart-hooks/use-interstate';\nimport { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoice,\n  choiceForPixel,\n  colorForAlternative,\n  gridSize,\n  rememberActiveChoice,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const choiceForPixelPlaceholderAtom = [choiceForPixel, 0] as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = [\n  colorForAlternative,\n  DEF_COLOR,\n] as ColorForAlternativeAtom;\n\nexport function getNextColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternative}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\nexport const alternativeForChoiceAtoms = (([0, 1] as const).map((c) => [\n  `${alternativeForChoice}-${c}` as AlternativeForChoice,\n  getNextColorForAlternativeAtom(c),\n]) as readonly AlternativeForChoiceAtom[]) as readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n];\n\nexport const gridSizeAtom = [gridSize, DEF_GRID_SIZE] as const;\n\nexport const rememberActiveChoiceAtom = [rememberActiveChoice, 0] as const;\n\nexport const { useInterstate } = getUseInterstate<State>();\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nconst storeAtoms = [] as ChoiceForPixelAtom[];\nlet curIndex = 0;\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  getNext: () => ChoiceForPixelAtom | undefined;\n  resetIndex: (i?: number) => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n  get(i) {\n    return storeAtoms[i];\n  },\n  getNext() {\n    return storeAtoms[curIndex++];\n  },\n  resetIndex(i = 0) {\n    curIndex = i;\n  },\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  DEF_GRID_SIZE,\n  getNextColorForAlternativeAtom,\n  gridSizeAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{ addStyle?: CSSProperties }> = ({ addStyle = {} }) => {\n  const setGridSize = useInterstate(...gridSizeAtom).set();\n  const setActiveChoice = useInterstate(...rememberActiveChoiceAtom).set();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const setAlternatives = [0, 1].map((i) => useInterstate(...alternativeForChoiceAtoms[i]).set());\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.resetIndex();\n    setGridSize(parseInt(input, 10));\n    setActiveChoice(0);\n    setAlternatives.forEach((set, i) => {\n      set((prevAtom) => {\n        if (!prevAtom) {\n          return getNextColorForAlternativeAtom(i as PixelChoice);\n        }\n        return prevAtom;\n      });\n    });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${DEF_GRID_SIZE}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  getNextColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useInterstate(...rememberActiveChoiceAtom).set();\n\n  const alternativesState = [0, 1].map((i) =>\n    useInterstate(...alternativeForChoiceAtoms[i]).both()\n  );\n  const perfMeasureAssets = [0, 1].map(() => usePerfObserver());\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      alternativesState[evenOrOdd][1]((prevAtom) => {\n        if (!prevAtom) {\n          setActiveChoice(evenOrOdd);\n          return getNextColorForAlternativeAtom(evenOrOdd);\n        }\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        return null;\n      });\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom, useInterstate } from '../State/State';\nimport { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useInterstate(...pixelChoiceAtom).set();\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom, useInterstate } from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n\n  const [atomToPaint, setAtomToPaint] = useState([choiceForPixelPlaceholderAtom] as const);\n  const paintRandomPixel = useInterstate(...atomToPaint[0]).set();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint([drawPixelToPaint(gridSize ** 2)]);\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternativesRecord = [0, 1].map((i) =>\n    useInterstate(...alternativeForChoiceAtoms[i]).get()\n  );\n\n  const setColors = [0, 1].map((i) =>\n    useInterstate(...(alternativesRecord[i] ?? colorForAlternativePlaceholderAtom)).set()\n  );\n  const [activeChoice, setActiveChoice] = useInterstate(...rememberActiveChoiceAtom).both();\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    setColors[activeChoice]((prevColor) => {\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n      if (alternativesRecord[nextPotentialChoice] !== null) {\n        setActiveChoice(nextPotentialChoice);\n      }\n      if (alternativesRecord[activeChoice] !== null) {\n        return getRandomColor(prevColor);\n      }\n      return prevColor;\n    });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useInterstate(...altControlAtom).get();\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport {\n  alternativeForChoiceAtoms,\n  choiceForPixelPlaceholderAtom,\n  useInterstate,\n} from '../State/State';\nimport { choiceForPixel, ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [pixelChoice, setPixelChoice] = useState<ChoiceForPixelAtom>(choiceForPixelPlaceholderAtom);\n  const [choice, setChoice] = useInterstate(...pixelChoice).both();\n  const possibleStateAtom = useInterstate(...alternativeForChoiceAtoms[choice]).get();\n\n  useEffect(() => {\n    if (pixelChoice === choiceForPixelPlaceholderAtom) {\n      let nextAtom = storeAtomsMethods.getNext();\n      if (!nextAtom) {\n        nextAtom = getNextAtom(choiceForPixel, defChoice);\n        storeAtomsMethods.push(nextAtom);\n      }\n      setPixelChoice(nextAtom);\n    } else {\n      setChoice(defChoice);\n    }\n  }, [defChoice, pixelChoice, setChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && pixelChoice !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { gridSizeAtom, useInterstate } from '../State/State';\nimport { PixelChoice } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\n\nexport const App: FC = () => {\n  return (\n    <div {...{ style: { display: 'inline-block' } }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: 'calc(100vh - 20px)',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;use-interstate&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { App as RecoilApp } from 'recoil-component';\nimport { App as UseInterstateApp } from 'use-interstate-component';\n\nexport const App: FC = () => {\n  return (\n    <div {...{ style: { display: 'flex' } }}>\n      <div>\n        <RecoilApp />\n      </div>\n      <div>\n        <UseInterstateApp />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}