{"version":3,"sources":["internal_packages/use-perf-metric/constParameters.ts","internal_packages/use-perf-metric/createObserverCallback.ts","internal_packages/performance-info/BlockingParametersProvider.tsx","internal_packages/performance-info/DisplayInfo.tsx","internal_packages/performance-info/createOnFocus.tsx","internal_packages/performance-info/CollectDataProvider.tsx","internal_packages/performance-info/InfotipsProvider.tsx","internal_packages/performance-info/RefsDataProvider.tsx","internal_packages/performance-info/PerfInfoProvider.tsx","internal_packages/performance-info/InfoMark.tsx","internal_packages/performance-info/BlockingSpinner.tsx","internal_packages/performance-info/PerformanceInfo.tsx","internal_packages/control-panel/Button.tsx","internal_packages/control-panel/InputField.tsx","internal_packages/control-panel/styles.ts","internal_packages/control-panel/ChooseGrid.tsx","internal_packages/control-panel/DisableOrEnableRowsButton.tsx","internal_packages/control-panel/MassivePaintButton.tsx","internal_packages/control-panel/MeasuredControlButton.tsx","internal_packages/control-panel/ControlPanel.tsx","internal_packages/draw-pixels/drawPixels.ts","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/controlStage.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/controlStage.tsx","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/use-interstate-implementation/State/storeKeysMethods.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/controlStage.tsx","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","internal_packages/info-panel/createProcessData.ts","internal_packages/info-panel/TableComponents/tableStyles.ts","internal_packages/info-panel/TableComponents/GridTitleRow.tsx","internal_packages/info-panel/TableComponents/ModulesRow.tsx","internal_packages/info-panel/TableComponents/RecordRow.tsx","internal_packages/info-panel/InterpretData.tsx","internal_packages/info-panel/TabHeader.tsx","internal_packages/info-panel/InfoPanel.tsx","AppInFlexBox.tsx","index.js","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-metric/usePerfMetric.tsx"],"names":["MIN_QUIET_WINDOW_DURATION","errorNoMarkEvent","Error","createObserverCallback","perfMarkName","postErrorStatus","postCalculatedData","isFirstRunOrUseEffectRegistered","timeoutID","markEvent","firstLongTaskEntry","lastEndTime","evalTBT","calculateResult","TTI","TBT","markEventStartTime","throwErrorNoMarkEvent","startTime","firstLongTaskStartTime","firstLongTaskDuration","duration","delta","isZero","isLastEndTimeDefined","Math","max","list","observer","clearScheduledTimeout","markList","getEntriesByName","length","disconnect","observe","entryTypes","setTimeout","getEntriesByType","every","task","clearTimeout","time","BlockingAreaContext","createContext","notBlocked","toBlock","BlockingStateContext","SetBlockingStateAndCalculateAreaMethodsContext","createBlockingStateAndCalculateArea","setBlockingState","currArea","setArea","resetBlockingState","blockedAndReadyToRender","readyToRender","blockedNotReadyToRender","setReadyState","useBlockingArea","useState","area","_setArea","a","useBlockingState","blockingState","_setBlockingState","setBlockingStateAndCalculateAreaMethods","setStateToBlock","addRefToCalculateArea","ref","nextArea","getBoundingClientRect","top","left","bottom","right","curTop","curLeft","curBottom","curRight","processDimension","nextTop","nextBottom","nextLeft","nextRight","Object","entries","some","key","resetArea","curBegin","curEnd","beginToAdd","endToAdd","BlockingParametersProvider","children","blockingArea","Provider","value","useContext","useSetStateToBlock","throwError","createAddRefToCalculateArea","addRefToCalculateAreaFromContext","currMaxRight","useBody","useAddRefToCalculateArea","displayInfoContainerStyle","display","width","height","color","backgroundColor","borderRadius","justifyContent","alignItems","innerBoxStyle","flexWrap","whiteSpace","elementStyle","marginRight","DisplayInfo","info","tryToFit","fontSize","setFontSize","style","e","DISPLAY_INFO_CONTAINER_WIDTH","fontS","map","cloneElement","props","disabledOnFocus","event","preventDefault","target","blur","createOnFocus","disableInput","defaultOnFocus","undefined","GetDataPoolContext","PerfInfoDataMethodsContext","CollectDataProvider","setData","useGetDataPoolContextValue","dataPool","_setData","getDataPool","perfInfoDataMethods","addData","newData","db","clearData","createCollectDataProviderAssets","getDataPoolValue","InfotipsContext","InfotipsProvider","popupDelay","dispatchersPool","addTipHandler","handler","removeTipHandler","filter","nextHandler","hideOtherTips","except","forEach","createInfotipsPoolMethods","infotipsContextValue","RefsContext","RefsDataProvider","refsTable","provideModuleNameAndRef","modN","getRef","createRefsProviderAssets","refAssets","PerfInfoProvider","usePerfInfoMethods","useGetRef","infoMarkStyle","flexShrink","fontWeight","cursor","infotipStyle","position","padding","boxShadow","InfotipBox","popupInfo","clearDelay","toHide","onMouseOver","onFocus","onMouseLeave","onBlur","infotipPositionOffset","InfoMark","infoMarkRef","useRef","delayTimeoutID","infotipBoxPosition","setInfoTipBoxPosition","tipHandler","hideInfoTipOnMouseLeave","current","showInfoTip","x","y","useEffect","role","tabIndex","document","documentElement","clientHeight","scrollTop","pendingEffectContainerStyle","animationName","animationDuration","animationTimingFunction","animationIterationCount","circleStyle","transformOrigin","outerContainerStyle","spinnerContainerStyle","PendingEffect","Array","fill","_","i","transform","opacity","BlockingSpinner","zIndex","AcknowledgeTip","href","PerformanceInfo","status","data","tags","round","error","message","Button","originalOnClick","onClick","addStyle","type","name","calcStyle","InputField","label","onSubmit","defValue","insertElementBefore","insertElementAfter","formStyle","inputFieldStyle","inputRef","inputValue","setInputValue","onChange","onSubmitForm","buttonContainerStyle","margin","perfInfoWithCaptionContainerStyle","marginTop","maxWidth","captionStyle","PerformanceInfoWithCaption","caption","setDisplay","ChooseGrid","gridSize","onGridChosen","moduleName","WrapMetricConsumerToBuildGrid","WrapMetricConsumerToUnmountGrid","gridSizeString","addRef","setValue","parseNextGridSize","parseInt","marginBottom","DisableOrEnableRowsButton","useOnPushButton","onPushButton","usePerfMetric","WrapMetricConsumer","measurePerformance","measureAtEffectStage","callback","renderInfoContainerStyle","MassivePaintButton","paintRandomPixels","painterComponents","checkResultForPaintRandomPixels","usePaintRandomPixels","isArray","defPercentsInput","parsePercentsNumber","createName","padStart","insert","MeasuredControlButton","controlPanelContainerStyle","headlineStyle","blockedStyle","unblockedStyle","lineStyle","borderTop","warnToChangeGrid","createUseBody","wantToMountCallback","wantToMountCallbackFirstRun","readyToMountCallback","readyToMountCallbackFirstRun","stageMountedCallback","wantToUnmountCallback","wantToUnmountCallbackFirstRun","readyToUnmountCallback","readyToUnmountCallbackFirstRun","stageUnmountedCallback","stageUnmountedCallbackFirstRun","pixelStageContainerRef","pixelsStage","controlsContainerStyle","containerHeight","setContainerHeight","pixelStageContainerStyle","flexGrow","pixelStageWithPropsAdded","setPixelStage","measurePerformanceToBuildGrid","measurePerformanceToToUnmountGrid","onGridChosenEnhanced","setOnGridChosenEnhanced","nextGridSize","rememberGridSize","toChangeGrid","setToChangeGrid","lifePoint","setLifePoint","transit","arg","nextLifePoint","useProvideModuleNameAndRef","refElement","flexDirection","ControlPanel","headline","useDisableRows","useEnableRows","repaintRow","useRepaintRow","paintRandomSinglePixel","usePaintRandomSinglePixel","CONTROL_ACTIONS_ORDER","drawPixels","totalNumber","numberToDraw","flagToWrite","numberToLeave","pixels","pickedPixels","pickPixel","floor","random","push","pop","range","getRandomColor","calcColor","slice","toString","storeAtoms","storeAtomsMethods","newAtom","drawPixelToPaint","randomIndex","atomToSet","getNextAtom","prefix","defaultValue","atom","getNextKey","default","choiceForPixelPlaceholderKey","colorForAlternativeKeyPrefix","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","rememberActiveChoiceAtom","alternativeForChoiceAtoms","c","nullPlaceholderAtom","initStateSnapshot","snapshot_UNSTABLE","retain","alternatives","useAlternative","useRecoilState","activeChoice","setActiveChoice","colorsState","useColorState","prevColor","setNextColor","nextPotentialChoice","altForChoiceAtom","useRecoilValue","alt","possibleAlternative","setAlternative","useSetRecoilState","usePaintRandomPixelsDependedOnGridSize","selectorToPaint","setSelectorToPaint","paintPixels","percentage","allPixelsNumber","pixelsNumberToPaint","selector","get","set","p","throwErrorAtomMustBeDefined","prevChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","PixelsStage","lines","setLines","currentLine","AppInsideRecoilRoot","defGridSize","setGridSize","initState","useGotoRecoilSnapshot","setAlternativesForChoice","commandToRefreshStage","setter","useRefreshStage","atomToPaint","setAtomToPaint","paintRandomPixel","prev","usePaintRandomSinglePixelDependedOnGridSize","App","storeKeys","storeKeysMethods","newKey","ActionType","createSelector","k","state","alternativeForChoiceKeys","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","initialState","rememberActiveChoice","dispatch","useDispatch","REPAINT_ROW","useSelector","DISABLE_ROW","ENABLE_ROW","pixel","SWITCH_PIXEL_CHOICE","payload","SWITCH_MULTIPLE_PIXELS","altControl","possibleAltControl","nextKey","CREATE_NEW_PIXEL_ENTRY","createNewPixelEntryAction","createReducer","reduce","action","updatePixel","stateUpdate","altKey","update","createStore","store","provideStore","rememberActiveChoiceKey","initInterstate","useInterstate","setInterstate","readInterstate","resetInterstate","initAppInterstate","acceptSelector","paintRandomSinglePixelDependedOnGridSize","pixelKey","altControlKey","possibleAltKey","paintRandomPixelsDependedOnGridSize","createProcessData","positionIndex","dataTable","dataMethodsTable","initTable","processData","options","newSlice","dataT","dataMethodsT","nextDataMethT","notCountFirstMeasure","currentGrid","firstRun","entryName","checkModuleName","restTags","moduleEntry","gridEntry","dataEntry","TTIs","TBTs","average","avTTI","avTBT","sum","xi","createDataMethods","assureMethodsCreated","dataPipeline","rowContainerStyle","borderBottom","recordStyle","paddingRight","recordNameStyle","lineHeight","recordNumbersStyle","textAlign","gridRowContainerStyle","gridTitleContainerStyle","fontStyle","paddingBottom","GridTitleRow","moduleNames","gridTitle","moduleN","moduleNameContainerStyle","fontVariantCaps","ModulesRow","recordContainerStyle","RecordRow","entryTitle","record","toFixed","recordsContainerStyle","InterpretData","recordsOrder","keys","gridSizesTable","gridSizesT","m","moduleTable","gST","g","eliminateDuplicates","entryTitles","ordered","gauge","t","RegExp","test","sort","arr","Set","borderLeft","borderRight","boxSizing","userSelect","TabHeader","borderBottomColor","onKeyPress","PANEL_COLOR","PANEL_HEIGHT","exteriorContainerStyle","mainContainerBaseStyle","commonBoxBaseStyle","collapsedBoxStyle","overflow","expandedBoxStyle","InfoPanel","collapsed","setCollapsed","useGetDataPool","processedData","scrollWidth","calcWidth","clientWidth","TAB_HEADER_HEIGHT","calculateScrollBarHeight","prevState","overflowX","heightWhenScroll","mainContainerStyle","versionInfoStyle","appContainerStyle","AppInFlexBox","viewportHeight","setViewportHeight","visibility","element","version","ReactDOM","render","StrictMode","getElementById","prefCountsRecords","Map","count","defSettings","measureFromCreated","id","initialStatus","pendingStatus","errorStatus","errorDoesNotSupport","createUsePerfMetricReturn","settings","obj","global","PerformanceObserver","supportedEntryTypes","isSupported","includes","actualSettings","fromEntries","mainDefinedID","isFirstRun","useEffectRegistered","setChildrenProps","startOnEffect","result","measureSettings","startMeasurement","performance","mark","perfMetricReturn","nestedComponent","childrenProps","_setChildrenProps"],"mappings":"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","file":"static/js/main.ac8cd9cc.chunk.js","sourcesContent":["export const MIN_QUIET_WINDOW_DURATION = 5000;\n\nexport const MIN_LONG_TASK_DURATION = 50;\n\nexport const errorNoMarkEvent = Error('(usePerfMetrics) No mark event has been registered');\n","import {\n  errorNoMarkEvent,\n  MIN_LONG_TASK_DURATION,\n  MIN_QUIET_WINDOW_DURATION,\n} from './constParameters';\nimport type { PerfMetric } from './PerfMetricTypes';\n\nexport const createObserverCallback = (\n  perfMarkName: string,\n  postErrorStatus: (error: Error) => void,\n  postCalculatedData: (result: PerfMetric) => void,\n  isFirstRunOrUseEffectRegistered: () => boolean\n): PerformanceObserverCallback => {\n  let timeoutID: NodeJS.Timeout | null = null;\n  let markEvent: PerformanceEntry | null = null;\n  let firstLongTaskEntry: PerformanceEntry | null = null;\n  let lastEndTime: number | null = null;\n  let evalTBT = 0;\n\n  const calculateResult = (): PerfMetric => {\n    if (!firstLongTaskEntry) {\n      return { TTI: 0, TBT: 0 };\n    }\n\n    const { startTime: markEventStartTime } = markEvent ?? throwErrorNoMarkEvent();\n\n    const { startTime: firstLongTaskStartTime, duration: firstLongTaskDuration } =\n      firstLongTaskEntry;\n\n    const delta = markEventStartTime - firstLongTaskStartTime;\n    const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n    return {\n      TTI:\n        !isZero && isLastEndTimeDefined(lastEndTime)\n          ? Math.max(0, lastEndTime - markEventStartTime)\n          : 0,\n\n      TBT: isZero\n        ? 0\n        : evalTBT + Math.max(0, firstLongTaskDuration - Math.max(MIN_LONG_TASK_DURATION, delta)),\n    };\n  };\n\n  return (list: PerformanceObserverEntryList, observer: PerformanceObserver): void => {\n    clearScheduledTimeout();\n\n    if (isFirstRunOrUseEffectRegistered()) {\n      if (!markEvent) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEvent] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          postErrorStatus(errorNoMarkEvent);\n          observer.disconnect();\n\n          return;\n        }\n      }\n\n      rescheduleTimeout();\n      const longTasksList = list.getEntriesByType('longtask');\n\n      longTasksList.every((task) => {\n        const { startTime, duration } = task;\n\n        if (!firstLongTaskEntry) {\n          firstLongTaskEntry = task;\n        } else {\n          if (\n            isLastEndTimeDefined(lastEndTime) &&\n            startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION\n          ) {\n            postCalculatedData(calculateResult());\n            clearScheduledTimeout();\n            observer.disconnect();\n\n            return false;\n          }\n\n          evalTBT += duration - MIN_LONG_TASK_DURATION;\n        }\n\n        lastEndTime = startTime + duration;\n\n        return true;\n      });\n    } else {\n      clearScheduledTimeout();\n      observer.disconnect();\n    }\n\n    function clearScheduledTimeout(): void {\n      timeoutID && clearTimeout(timeoutID);\n    }\n\n    function rescheduleTimeout(): void {\n      timeoutID = setTimeout(() => {\n        observer.disconnect();\n        postCalculatedData(calculateResult());\n      }, MIN_QUIET_WINDOW_DURATION);\n    }\n  };\n\n  function isLastEndTimeDefined(time: number | null): time is number {\n    if (time !== lastEndTime) {\n      throw Error('(usePerfMetrics) error while using last end time');\n    }\n\n    return !!firstLongTaskEntry;\n  }\n};\n\nfunction throwErrorNoMarkEvent(): never {\n  throw errorNoMarkEvent;\n}\n","import type { FC } from 'react';\nimport React, { createContext, useContext, useState } from 'react';\n\nexport interface Area {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n}\n\nconst BlockingAreaContext = createContext<Area | null>(null);\n\nexport type BlockingState =\n  | ({\n      toBlock: true;\n      resetBlockingState: () => void;\n    } & (\n      | {\n          readyToRender: false;\n          setReadyState: () => void;\n        }\n      | {\n          readyToRender: true;\n        }\n    ))\n  | { toBlock: false };\n\nconst notBlocked = { toBlock: false } as const;\n\nconst BlockingStateContext = createContext<BlockingState>(notBlocked);\n\nexport interface SetBlockingStateAndCalculateAreaMethods {\n  setStateToBlock: () => void;\n\n  addRefToCalculateArea: (ref: HTMLElement) => void;\n\n  resetArea: () => void;\n}\n\nconst SetBlockingStateAndCalculateAreaMethodsContext =\n  createContext<SetBlockingStateAndCalculateAreaMethods | null>(null);\n\nconst createBlockingStateAndCalculateArea = (): {\n  useBlockingArea: () => Area | null;\n  useBlockingState: () => BlockingState;\n  setBlockingStateAndCalculateAreaMethods: SetBlockingStateAndCalculateAreaMethods;\n} => {\n  let setBlockingState: (v: BlockingState) => void;\n  let currArea: Area | null;\n  let setArea: (area: Area | null) => void;\n\n  const useBlockingArea = (): Area | null => {\n    const [area, _setArea] = useState<Area | null>(null);\n\n    setArea =\n      setArea ??\n      ((a: Area | null) => {\n        currArea = a;\n        _setArea(a);\n      });\n\n    return area;\n  };\n\n  const resetBlockingState = (): void => {\n    setBlockingState(notBlocked);\n  };\n\n  const blockedAndReadyToRender = {\n    toBlock: true,\n    readyToRender: true,\n    resetBlockingState,\n  } as const;\n\n  const blockedNotReadyToRender = {\n    toBlock: true,\n    readyToRender: false,\n    resetBlockingState,\n\n    setReadyState(): void {\n      setBlockingState(blockedAndReadyToRender);\n    },\n  } as const;\n\n  const useBlockingState = (): BlockingState => {\n    const [blockingState, _setBlockingState] = useState<BlockingState>(notBlocked);\n\n    setBlockingState = _setBlockingState;\n\n    return blockingState;\n  };\n\n  const setStateToBlock = (): void => setBlockingState(blockedNotReadyToRender);\n\n  const addRefToCalculateArea = (ref: HTMLElement): void => {\n    const { top, left, bottom, right } = ref.getBoundingClientRect();\n    let nextArea: Area;\n\n    if (!currArea) {\n      nextArea = { top, left, bottom, right };\n    } else {\n      const { top: curTop, left: curLeft, bottom: curBottom, right: curRight } = currArea;\n      const [nextTop, nextBottom] = processDimension([curTop, curBottom], [top, bottom]);\n      const [nextLeft, nextRight] = processDimension([curLeft, curRight], [left, right]);\n      nextArea = { top: nextTop, left: nextLeft, bottom: nextBottom, right: nextRight };\n    }\n\n    (!currArea ||\n      Object.entries(currArea).some(([key, value]) => value !== nextArea[key as keyof Area])) &&\n      setArea(nextArea);\n  };\n\n  const resetArea = (): void => setArea(null);\n\n  const setBlockingStateAndCalculateAreaMethods: SetBlockingStateAndCalculateAreaMethods = {\n    setStateToBlock,\n    addRefToCalculateArea,\n    resetArea,\n  };\n\n  return {\n    useBlockingArea,\n    useBlockingState,\n    setBlockingStateAndCalculateAreaMethods,\n  };\n\n  type DimensionSet = [begin: number, end: number];\n\n  function processDimension(\n    [curBegin, curEnd]: DimensionSet,\n    [beginToAdd, endToAdd]: DimensionSet\n  ): DimensionSet {\n    return [beginToAdd < curBegin ? beginToAdd : curBegin, endToAdd > curEnd ? endToAdd : curEnd];\n  }\n};\n\nexport const BlockingParametersProvider: FC = ({ children }) => {\n  const [{ useBlockingArea, useBlockingState, setBlockingStateAndCalculateAreaMethods }] = useState(\n    createBlockingStateAndCalculateArea\n  );\n\n  const blockingArea = useBlockingArea();\n  const blockingState = useBlockingState();\n\n  return (\n    <BlockingAreaContext.Provider {...{ value: blockingArea }}>\n      <BlockingStateContext.Provider {...{ value: blockingState }}>\n        <SetBlockingStateAndCalculateAreaMethodsContext.Provider\n          {...{ value: setBlockingStateAndCalculateAreaMethods }}\n        >\n          {children}\n        </SetBlockingStateAndCalculateAreaMethodsContext.Provider>\n      </BlockingStateContext.Provider>\n    </BlockingAreaContext.Provider>\n  );\n};\n\nexport const useBlockingState = (): BlockingState => useContext(BlockingStateContext);\n\nexport const useSetStateToBlock = (): (() => void) =>\n  (useContext(SetBlockingStateAndCalculateAreaMethodsContext) ?? throwError()).setStateToBlock;\n\nexport const useBlockingArea = (): Area | null => useContext(BlockingAreaContext);\n\ninterface UseBodyInUseAddRefToCalculateAreaReturn {\n  addRefToCalculateArea: AddRefToCalculateArea;\n}\n\ntype AddRefToCalculateArea = (e: HTMLElement | null) => void;\n\nconst createAddRefToCalculateArea = (): {\n  useBody: () => UseBodyInUseAddRefToCalculateAreaReturn;\n} => {\n  let addRefToCalculateAreaFromContext: (ref: HTMLElement) => void;\n  let currMaxRight = 0;\n\n  const useBody = (): UseBodyInUseAddRefToCalculateAreaReturn => {\n    ({ addRefToCalculateArea: addRefToCalculateAreaFromContext } =\n      useContext(SetBlockingStateAndCalculateAreaMethodsContext) ?? throwError());\n\n    const addRefToCalculateArea: AddRefToCalculateArea = (ref) => {\n      if (ref) {\n        const { right } = ref.getBoundingClientRect();\n\n        if (right > currMaxRight) {\n          addRefToCalculateAreaFromContext(ref);\n          currMaxRight = right;\n        }\n      }\n    };\n\n    return { addRefToCalculateArea };\n  };\n\n  return { useBody };\n};\n\nexport const useAddRefToCalculateArea = (): ((e: HTMLElement | null) => void) => {\n  const [{ useBody }] = useState(createAddRefToCalculateArea);\n  const { addRefToCalculateArea } = useBody();\n\n  return addRefToCalculateArea;\n};\n\nexport const useResetArea = (): (() => void) =>\n  (useContext(SetBlockingStateAndCalculateAreaMethodsContext) ?? throwError()).resetArea;\n\nfunction throwError(): never {\n  throw Error('blocking parameters context provider is missing');\n}\n","import type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { cloneElement, useState } from 'react';\n\nconst DISPLAY_INFO_CONTAINER_WIDTH = 170;\nconst INITIAL_FONT_SIZE = 12;\nconst FIT_MARGINS = 15;\n\nconst displayInfoContainerStyle: CSSProperties = {\n  display: 'flex',\n  width: DISPLAY_INFO_CONTAINER_WIDTH,\n  height: 20,\n  color: 'white',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst innerBoxStyle: CSSProperties = {\n  display: 'flex',\n  flexWrap: 'nowrap',\n  whiteSpace: 'nowrap',\n};\n\nconst elementStyle: CSSProperties = { marginRight: 5 };\n\nexport const DisplayInfo: FC<{ info?: (ReactElement | string)[]; tryToFit?: boolean }> = ({\n  info,\n  tryToFit = false,\n}) => {\n  const [fontSize, setFontSize] = useState<number>(INITIAL_FONT_SIZE);\n  tryToFit || fontSize === INITIAL_FONT_SIZE || setFontSize(INITIAL_FONT_SIZE);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && tryToFit) {\n      const { width } = e.getBoundingClientRect();\n      width > DISPLAY_INFO_CONTAINER_WIDTH - FIT_MARGINS &&\n        setFontSize((fontS) => (fontS * (DISPLAY_INFO_CONTAINER_WIDTH - FIT_MARGINS)) / width);\n    }\n  };\n\n  return info ? (\n    <div {...{ style: displayInfoContainerStyle }}>\n      <div {...{ ref, style: { ...innerBoxStyle, fontSize } }}>\n        {info.map((e) =>\n          typeof e === 'string' ? (\n            <span {...{ style: elementStyle }} key={e}>\n              {e}\n            </span>\n          ) : (\n            cloneElement(e, {\n              style: { ...e.props.style, ...elementStyle },\n            })\n          )\n        )}\n      </div>\n    </div>\n  ) : (\n    <div {...{ style: { ...displayInfoContainerStyle, backgroundColor: 'transparent' } }} />\n  );\n};\n","import type { FocusEvent, FocusEventHandler } from 'react';\n\nconst disabledOnFocus = <H extends HTMLElement>(event: FocusEvent<H>): void => {\n  event.preventDefault();\n  event.target.blur();\n};\n\nexport const createOnFocus = <H extends HTMLElement = HTMLElement>(\n  disableInput: boolean,\n  defaultOnFocus: FocusEventHandler<H> | undefined = undefined\n): FocusEventHandler<H> | undefined => (disableInput ? disabledOnFocus : defaultOnFocus);\n","import type { PerfMetric } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { Dispatch, FC, SetStateAction } from 'react';\nimport React, { createContext, useState } from 'react';\n\nexport type Tags = [string, ...(string | number)[]];\n\nexport interface PerfInfoData {\n  tags: Tags;\n\n  data: PerfMetric;\n}\n\nexport interface GetDataPoolContextValue {\n  getDataPool: () => PerfInfoData[];\n}\n\nexport interface PerfInfoDataMethods {\n  addData: (data: PerfInfoData) => void;\n\n  clearData: () => void;\n}\n\nexport const GetDataPoolContext = createContext<GetDataPoolContextValue | null>(null);\n\nexport const PerfInfoDataMethodsContext = createContext<PerfInfoDataMethods | null>(null);\n\nconst createCollectDataProviderAssets = (): {\n  useGetDataPoolContextValue: () => GetDataPoolContextValue;\n  perfInfoDataMethods: PerfInfoDataMethods;\n} => {\n  let setData: Dispatch<SetStateAction<PerfInfoData[]>>;\n\n  const useGetDataPoolContextValue = (): GetDataPoolContextValue => {\n    const [dataPool, _setData] = useState<PerfInfoData[]>([]);\n    setData = _setData;\n\n    const getDataPool = () => [...dataPool];\n\n    return { getDataPool };\n  };\n\n  const perfInfoDataMethods = {\n    addData: (newData: PerfInfoData) => {\n      setData((db) => [...db, newData]);\n    },\n\n    clearData: (): void => {\n      setData([]);\n    },\n  };\n\n  return { useGetDataPoolContextValue, perfInfoDataMethods };\n};\n\nexport const CollectDataProvider: FC = ({ children }) => {\n  const [{ useGetDataPoolContextValue, perfInfoDataMethods }] = useState(() =>\n    createCollectDataProviderAssets()\n  );\n\n  const getDataPoolValue = useGetDataPoolContextValue();\n\n  return (\n    <PerfInfoDataMethodsContext.Provider {...{ value: perfInfoDataMethods }}>\n      <GetDataPoolContext.Provider {...{ value: getDataPoolValue }}>\n        {children}\n      </GetDataPoolContext.Provider>\n    </PerfInfoDataMethodsContext.Provider>\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useState } from 'react';\n\ninterface InfotipsPoolMethods {\n  addTipHandler: (dispatcher: () => void) => void;\n  removeTipHandler: (dispatcher: () => void) => void;\n  hideOtherTips: (except: () => void) => void;\n}\n\ninterface InfotipsProviderProps {\n  popupDelay: number;\n}\nexport interface InfotipsContextValue extends InfotipsPoolMethods, InfotipsProviderProps {}\n\nexport const InfotipsContext = createContext<InfotipsContextValue | null>(null);\n\nconst createInfotipsPoolMethods = (): InfotipsPoolMethods => {\n  let dispatchersPool: (() => void)[] = [];\n\n  return {\n    addTipHandler: (handler) => {\n      dispatchersPool = [...dispatchersPool, handler];\n    },\n\n    removeTipHandler: (handler) => {\n      dispatchersPool = dispatchersPool.filter((nextHandler) => nextHandler !== handler);\n    },\n\n    hideOtherTips: (except) => {\n      dispatchersPool.forEach((nextHandler) => nextHandler !== except && nextHandler());\n    },\n  };\n};\n\nexport const InfotipsProvider: FC<InfotipsProviderProps> = ({ popupDelay, children }) => {\n  const [infotipsContextValue] = useState<InfotipsContextValue>(() => ({\n    popupDelay,\n    ...createInfotipsPoolMethods(),\n  }));\n\n  return (\n    <InfotipsContext.Provider {...{ value: infotipsContextValue }}>\n      {children}\n    </InfotipsContext.Provider>\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useState } from 'react';\n\nexport interface RefsProviderAssets {\n  provideModuleNameAndRef: (modNAndRef: [string, HTMLElement]) => void;\n  getRef: (modN: string) => HTMLElement;\n}\n\nexport const RefsContext = createContext<RefsProviderAssets | null>(null);\n\nconst createRefsProviderAssets = (): RefsProviderAssets => {\n  let refsTable: { [P in string]?: HTMLElement } = {};\n\n  const provideModuleNameAndRef = ([modN, ref]: [string, HTMLElement]): void => {\n    refsTable = { ...refsTable, [modN]: ref };\n  };\n\n  const getRef = (modN: string): HTMLElement =>\n    refsTable[modN] ??\n    (() => {\n      throw Error(`${modN} is not a valid module name`);\n    })();\n\n  return { provideModuleNameAndRef, getRef };\n};\n\nexport const RefsDataProvider: FC = ({ children }) => {\n  const [refAssets] = useState(() => createRefsProviderAssets());\n\n  return <RefsContext.Provider {...{ value: refAssets }}>{children}</RefsContext.Provider>;\n};\n","import type { FC } from 'react';\nimport React, { useContext } from 'react';\nimport { BlockingParametersProvider } from './BlockingParametersProvider';\nimport type { GetDataPoolContextValue, PerfInfoDataMethods } from './CollectDataProvider';\nimport {\n  CollectDataProvider,\n  GetDataPoolContext,\n  PerfInfoDataMethodsContext,\n} from './CollectDataProvider';\nimport type { InfotipsContextValue } from './InfotipsProvider';\nimport { InfotipsContext, InfotipsProvider } from './InfotipsProvider';\nimport type { RefsProviderAssets } from './RefsDataProvider';\nimport { RefsContext, RefsDataProvider } from './RefsDataProvider';\n\nexport const PerfInfoProvider: FC<{ popupDelay?: number }> = ({ popupDelay = 100, children }) => (\n  <InfotipsProvider {...{ popupDelay }}>\n    <CollectDataProvider>\n      <RefsDataProvider>\n        <BlockingParametersProvider>{children}</BlockingParametersProvider>\n      </RefsDataProvider>\n    </CollectDataProvider>\n  </InfotipsProvider>\n);\n\nexport const usePerfInfoMethods = (): InfotipsContextValue & PerfInfoDataMethods => ({\n  ...(useContext(InfotipsContext) ?? throwError()),\n  ...(useContext(PerfInfoDataMethodsContext) ?? throwError()),\n});\n\nexport const useGetDataPool = (): GetDataPoolContextValue =>\n  useContext(GetDataPoolContext) ?? throwError();\n\nexport const useClearDataPool = (): { clearData: () => void } => {\n  const { clearData } = useContext(PerfInfoDataMethodsContext) ?? throwError();\n\n  return { clearData };\n};\n\nexport const useProvideModuleNameAndRef = (): Pick<\n  RefsProviderAssets,\n  'provideModuleNameAndRef'\n> => {\n  const { provideModuleNameAndRef } = useContext(RefsContext) ?? throwError();\n\n  return { provideModuleNameAndRef };\n};\n\nexport const useGetRef = (): Pick<RefsProviderAssets, 'getRef'> => {\n  const { getRef } = useContext(RefsContext) ?? throwError();\n\n  return { getRef };\n};\n\nfunction throwError(): never {\n  throw Error('PerfInfoProvider should be in the root of the app');\n}\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useBlockingState } from './BlockingParametersProvider';\nimport { createOnFocus } from './createOnFocus';\nimport { usePerfInfoMethods } from './PerfInfoProvider';\n\nconst infoMarkStyle: CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexShrink: 0,\n  fontSize: '1.2em',\n  fontWeight: 'bolder',\n  color: 'gray',\n  backgroundColor: 'rgb(228, 232, 255)',\n  width: '1.2em',\n  height: '1.2em',\n  borderRadius: '0.6em',\n  cursor: 'default',\n};\n\nconst infotipStyle: CSSProperties = {\n  position: 'absolute',\n  whiteSpace: 'normal',\n  width: 200,\n  padding: 10,\n  color: 'black',\n  backgroundColor: 'rgb(228, 232, 255)',\n  fontSize: '14px',\n  boxShadow: '3px 3px rgb(141, 144, 166)',\n};\n\nconst InfotipBox: FC<{\n  popupInfo: JSX.Element | string;\n  left: number;\n  bottom: number;\n  clearDelay: () => void;\n  toHide: () => void;\n}> = ({ popupInfo, left, bottom, clearDelay, toHide }) => (\n  <div\n    {...{\n      style: { ...infotipStyle, left, bottom },\n      onMouseOver: clearDelay,\n      onFocus: clearDelay,\n      onMouseLeave: toHide,\n      onBlur: toHide,\n    }}\n  >\n    {popupInfo}\n  </div>\n);\n\nconst infotipPositionOffset = { x: 10, y: 5 };\n\nexport const InfoMark: FC<{ style?: CSSProperties; popupInfo: JSX.Element | string }> = ({\n  style = {},\n  popupInfo,\n}) => {\n  const infoMarkRef = useRef<HTMLDivElement>(null);\n  const delayTimeoutID = useRef<NodeJS.Timeout | null>(null);\n\n  const [infotipBoxPosition, setInfoTipBoxPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n\n  const { popupDelay, addTipHandler, hideOtherTips, removeTipHandler } = usePerfInfoMethods();\n  const tipHandler = (): void => setInfoTipBoxPosition(null);\n\n  const { toBlock } = useBlockingState();\n\n  const hideInfoTipOnMouseLeave = () => {\n    delayTimeoutID.current = setTimeout(() => setInfoTipBoxPosition(null), popupDelay);\n  };\n\n  const clearDelay = () => {\n    delayTimeoutID.current && clearTimeout(delayTimeoutID.current);\n    delayTimeoutID.current = null;\n  };\n\n  const showInfoTip = (): void => {\n    if (infotipBoxPosition) {\n      clearDelay();\n\n      return;\n    }\n\n    if (infoMarkRef.current) {\n      hideOtherTips(tipHandler);\n      const { x, y } = infoMarkRef.current.getBoundingClientRect();\n      setInfoTipBoxPosition({ x, y });\n    } else {\n      throw Error('(PerformanceInfo) Info tip mark must exist');\n    }\n  };\n\n  const onFocus = createOnFocus<HTMLDivElement>(toBlock, showInfoTip);\n\n  useEffect(() => {\n    addTipHandler(tipHandler);\n\n    return () => removeTipHandler(tipHandler);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div\n        {...{\n          ref: infoMarkRef,\n          style: { ...infoMarkStyle, ...style },\n          onMouseOver: showInfoTip,\n          onFocus,\n          onMouseLeave: hideInfoTipOnMouseLeave,\n          onBlur: hideInfoTipOnMouseLeave,\n          role: 'link',\n          tabIndex: 0,\n        }}\n      >\n        i\n      </div>\n      {infotipBoxPosition && (\n        <InfotipBox\n          {...{\n            popupInfo,\n            left: infotipBoxPosition.x + infotipPositionOffset.x,\n            bottom:\n              document.documentElement.clientHeight -\n              document.documentElement.scrollTop -\n              infotipBoxPosition.y +\n              infotipPositionOffset.y,\n            clearDelay,\n            toHide: hideInfoTipOnMouseLeave,\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect } from 'react';\nimport { useBlockingArea, useBlockingState } from './BlockingParametersProvider';\n\nconst NUMBER_OF_CIRCLES = 8;\nconst NUMBER_FADED_CIRCLES = 4;\nconst LAST_CIRCLE_OPACITY = 0.15;\n\nconst spinPendingEffectKeyframes = `\n@keyframes spinPendingEffect {\n  from {transform: rotate(0);}\n  to {transform: rotate(1turn);}\n}`;\n\nconst pendingEffectContainerStyle: CSSProperties = {\n  animationName: 'spinPendingEffect',\n  animationDuration: '1s',\n  animationTimingFunction: 'cubic-bezier(0.34, 0.46, 0.87, 0.71)',\n  animationIterationCount: 'infinite',\n};\n\nconst circleStyle: CSSProperties = {\n  position: 'absolute',\n  left: -20,\n  top: -20,\n  height: 10,\n  width: 10,\n  borderRadius: 10,\n  backgroundColor: '#9e9e9e',\n  transformOrigin: '20px 20px',\n};\n\nconst outerContainerStyle: CSSProperties = {\n  height: 0,\n};\n\nconst spinnerContainerStyle: CSSProperties = {\n  position: 'absolute',\n  backgroundColor: 'rgba(255,255,255,50%)',\n  display: 'flex',\n  justifyContent: 'space-around',\n  alignItems: 'center',\n};\n\nconst PendingEffect: FC = () => {\n  return (\n    <>\n      <style>{spinPendingEffectKeyframes}</style>\n      <div {...{ style: pendingEffectContainerStyle }}>\n        {Array(NUMBER_OF_CIRCLES)\n          .fill(null)\n          .map((_, i) => (\n            <div\n              {...{\n                style: {\n                  ...circleStyle,\n                  transform: `rotate(${i / NUMBER_OF_CIRCLES}turn)`,\n                  opacity:\n                    i < NUMBER_FADED_CIRCLES\n                      ? (1 - LAST_CIRCLE_OPACITY) * (i / NUMBER_FADED_CIRCLES) + LAST_CIRCLE_OPACITY\n                      : 1,\n                },\n              }}\n              key={i}\n            />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport const BlockingSpinner: FC<{ zIndex?: number }> = ({ zIndex = 0 }) => {\n  const area = useBlockingArea();\n  const blockingState = useBlockingState();\n\n  useEffect(() => {\n    blockingState.toBlock && !blockingState.readyToRender && area && blockingState.setReadyState();\n  }, [area, blockingState]);\n\n  return blockingState.toBlock && area ? (\n    <div {...{ style: outerContainerStyle }}>\n      <div\n        {...{\n          style: {\n            ...spinnerContainerStyle,\n            zIndex,\n            top: area.top,\n            left: area.left,\n            height: area.bottom - area.top,\n            width: area.right - area.left,\n          },\n        }}\n      >\n        <PendingEffect />\n      </div>\n    </div>\n  ) : null;\n};\n","import type { MetricConsumerProps } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { FC } from 'react';\nimport React, { useEffect } from 'react';\nimport { useBlockingState, useSetStateToBlock } from './BlockingParametersProvider';\nimport type { Tags } from './CollectDataProvider';\nimport { DisplayInfo } from './DisplayInfo';\nimport { InfoMark } from './InfoMark';\nimport { usePerfInfoMethods } from './PerfInfoProvider';\n\nconst AcknowledgeTip: FC = () => (\n  <>\n    <strong>TTI (Time to Interactive)</strong> metric measures the time until the main sub-resources\n    of the page have rendered and it is capable of reliably responding to user input quickly\n    (similar to <a {...{ href: 'https://web.dev/tti/', target: 'blank' }}>that</a>\n    ).\n    <br />\n    <br />\n    <strong>TBT (Total Blocking Time)</strong> measures the total amount of time until TTI in the\n    chunks where the main thread was blocked for long enough to prevent input responsiveness\n    (similar to <a {...{ href: 'https://web.dev/tbt/', target: 'blank' }}>that</a>).\n  </>\n);\n\nexport type PerformanceInfoProps = (MetricConsumerProps | { status?: undefined }) & { tags?: Tags };\n\nexport const PerformanceInfo: FC<PerformanceInfoProps> = (props) => {\n  const { addData } = usePerfInfoMethods();\n  const blockingState = useBlockingState();\n  const setStateToBlock = useSetStateToBlock();\n\n  useEffect((): void => {\n    switch (props.status) {\n      case 'done':\n        {\n          props;\n          const { data, tags = ['none'] } = props;\n          addData({ data, tags });\n        }\n\n        blockingState.toBlock && blockingState.resetBlockingState();\n\n        break;\n\n      case 'pending':\n        blockingState.toBlock || setStateToBlock();\n\n        break;\n\n      case 'error':\n        blockingState.toBlock && blockingState.resetBlockingState();\n\n        break;\n\n      default:\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.status]);\n\n  useEffect((): void => {\n    props.status === 'error' &&\n      blockingState.toBlock &&\n      blockingState.readyToRender &&\n      blockingState.resetBlockingState();\n  }, [blockingState, props.status]);\n\n  switch (props.status) {\n    case 'done': {\n      const {\n        data: { TTI, TBT },\n      } = props;\n\n      return (\n        <DisplayInfo\n          {...{\n            info: [\n              `TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`,\n              <InfoMark key=\"InfoTip\" {...{ popupInfo: <AcknowledgeTip /> }} />,\n            ],\n            tryToFit: true,\n          }}\n        />\n      );\n    }\n\n    case 'pending':\n      return <DisplayInfo {...{ info: ['performance measuring...'] }} />;\n\n    case 'error':\n      return (\n        <DisplayInfo\n          {...{\n            info: ['error', <InfoMark key=\"InfoTip\" {...{ popupInfo: props.error.message }} />],\n          }}\n        />\n      );\n\n    default:\n      return <DisplayInfo />;\n  }\n};\n\nexport {\n  useAddRefToCalculateArea,\n  useBlockingArea,\n  useBlockingState,\n  useResetArea,\n  useSetStateToBlock,\n} from './BlockingParametersProvider';\nexport { BlockingSpinner } from './BlockingSpinner';\nexport type { PerfInfoData } from './CollectDataProvider';\nexport * from './createOnFocus';\nexport {\n  PerfInfoProvider,\n  useClearDataPool,\n  useGetDataPool,\n  useGetRef,\n  useProvideModuleNameAndRef,\n} from './PerfInfoProvider';\n","import {\n  createOnFocus,\n  useBlockingState,\n} from '@compare-react-state-management-solutions/performance-info';\nimport type { ButtonHTMLAttributes, CSSProperties, FC, MouseEventHandler } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{\n  onClick?: MouseEventHandler<HTMLButtonElement> | null;\n  addStyle?: CSSProperties;\n  type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];\n  name?: string;\n}> = ({ onClick: originalOnClick, addStyle, type = 'button', name = 'start' }) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  const { toBlock } = useBlockingState();\n  const onFocus = createOnFocus<HTMLButtonElement>(toBlock);\n\n  const onClick: MouseEventHandler<HTMLButtonElement> | undefined = toBlock\n    ? (event) => event.preventDefault()\n    : originalOnClick ?? undefined;\n\n  return (\n    <button\n      {...{\n        style: calcStyle,\n        type,\n        onClick,\n        onFocus,\n      }}\n    >\n      {name}\n    </button>\n  );\n};\n","import {\n  createOnFocus,\n  useBlockingState,\n} from '@compare-react-state-management-solutions/performance-info';\nimport type { ChangeEventHandler, CSSProperties, FC, FormEventHandler } from 'react';\nimport React, { useRef, useState } from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onSubmit?: (v: string, setValue: (v: string) => void) => void;\n  defValue: string;\n  width?: number;\n  addStyle?: CSSProperties;\n  insertElementBefore?: JSX.Element;\n  insertElementAfter?: JSX.Element;\n}> = ({\n  label,\n  onSubmit,\n  defValue,\n  width = 65,\n  addStyle,\n  insertElementBefore,\n  insertElementAfter,\n}) => {\n  const formStyle: CSSProperties = { display: 'block', ...addStyle };\n  const inputFieldStyle: CSSProperties = { width };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(defValue);\n  const { toBlock } = useBlockingState();\n  const onFocus = createOnFocus<HTMLInputElement>(toBlock);\n\n  const onChange: ChangeEventHandler<HTMLInputElement> = toBlock\n    ? () => null\n    : ({ target: { value } }) => setInputValue(value);\n\n  const onSubmitForm: FormEventHandler = toBlock\n    ? (event) => event.preventDefault()\n    : (event) => {\n        event.preventDefault();\n        inputRef.current?.blur();\n        onSubmit?.(inputValue, setInputValue);\n      };\n\n  return (\n    <form\n      {...{\n        onSubmit: onSubmitForm,\n        style: formStyle,\n      }}\n    >\n      {insertElementBefore}\n      <label>\n        {label}\n        <input\n          {...{\n            type: 'text',\n            onChange,\n            value: inputValue,\n            style: inputFieldStyle,\n            onFocus,\n            ref: inputRef,\n          }}\n        />\n      </label>\n      {insertElementAfter}\n    </form>\n  );\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","import type { PerformanceInfoProps } from '@compare-react-state-management-solutions/performance-info';\nimport {\n  PerformanceInfo,\n  useAddRefToCalculateArea,\n} from '@compare-react-state-management-solutions/performance-info';\nimport type { WrapMetricConsumerProps } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport type ChooseGridProps = {\n  gridSize: number;\n  onGridChosen: (p: { gridSize: number }) => void;\n  moduleName: string;\n};\n\nconst perfInfoWithCaptionContainerStyle: CSSProperties = {\n  display: 'flex',\n  marginTop: 1,\n  justifyContent: 'flex-end',\n  maxWidth: '18em',\n};\n\nconst captionStyle: CSSProperties = {\n  margin: '0px 10px 0 20px',\n  fontSize: '0.85em',\n};\n\nconst PerformanceInfoWithCaption: FC<PerformanceInfoProps & { caption: string }> = (props) => {\n  const { caption, status } = props;\n  const [display, setDisplay] = useState<true | null>(null);\n  !display && status !== 'never' && setDisplay(true);\n\n  return (\n    <div {...{ style: perfInfoWithCaptionContainerStyle }}>\n      <div {...{ style: captionStyle }}>{display && caption}</div>\n      <PerformanceInfo {...props} />\n    </div>\n  );\n};\n\nexport const ChooseGrid: FC<\n  ChooseGridProps & {\n    WrapMetricConsumerToBuildGrid: FC<WrapMetricConsumerProps>;\n    WrapMetricConsumerToUnmountGrid: FC<WrapMetricConsumerProps>;\n  }\n> = ({\n  gridSize,\n  onGridChosen,\n  moduleName,\n  WrapMetricConsumerToBuildGrid,\n  WrapMetricConsumerToUnmountGrid,\n}) => {\n  const gridSizeString = `${gridSize}`;\n  const addRef = useAddRefToCalculateArea();\n\n  const onSubmit = (value: string, setValue: (v: string) => void): void => {\n    const parseNextGridSize = parseInt(value, 10);\n\n    if (value === `${parseNextGridSize}` && parseNextGridSize > 0) {\n      onGridChosen({ gridSize: parseNextGridSize });\n\n      return;\n    }\n\n    setValue(gridSizeString);\n  };\n\n  return (\n    <div {...{ ref: addRef }}>\n      <InputField\n        {...{\n          label: 'input grid size: ',\n          onSubmit,\n          defValue: gridSizeString,\n          addStyle: { ...buttonContainerStyle, marginBottom: '2px' },\n          insertElementAfter: (\n            <Button\n              {...{\n                type: 'submit',\n                name: 'change grid',\n                addStyle: { width: 'auto', margin: '3px 5px 0 10px' },\n              }}\n            />\n          ),\n        }}\n      />\n\n      <WrapMetricConsumerToBuildGrid>\n        <PerformanceInfoWithCaption {...{ tags: [moduleName, gridSize], caption: 'build grid:' }} />\n      </WrapMetricConsumerToBuildGrid>\n\n      <WrapMetricConsumerToUnmountGrid>\n        <PerformanceInfoWithCaption\n          {...{ tags: [moduleName, 'unmount grid'], caption: 'unmount grid: ' }}\n        />\n      </WrapMetricConsumerToUnmountGrid>\n    </div>\n  );\n};\n","import {\n  PerformanceInfo,\n  useAddRefToCalculateArea,\n  useSetStateToBlock,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfMetric } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { buttonContainerStyle } from './styles';\n\nexport type DisableOrEnableRowsHook = () => (() => void) | null;\n\nexport const DisableOrEnableRowsButton: FC<{\n  useOnPushButton: DisableOrEnableRowsHook;\n  name: 'disable rows' | 'enable rows';\n  moduleName: string;\n}> = ({ useOnPushButton, name, moduleName }) => {\n  const onPushButton = useOnPushButton();\n  const { WrapMetricConsumer, measurePerformance } = usePerfMetric();\n  const addRef = useAddRefToCalculateArea();\n  const setStateToBlock = useSetStateToBlock();\n\n  return (\n    <div {...{ style: buttonContainerStyle, ref: addRef }}>\n      <Button\n        {...{\n          onClick:\n            onPushButton &&\n            (() => {\n              setStateToBlock();\n\n              measurePerformance({\n                measureAtEffectStage: true,\n\n                callback: () => {\n                  onPushButton();\n                },\n              });\n            }),\n          name,\n        }}\n      />\n      <WrapMetricConsumer>\n        <PerformanceInfo {...{ tags: [moduleName, name] }} />\n      </WrapMetricConsumer>\n    </div>\n  );\n};\n","import {\n  PerformanceInfo,\n  useAddRefToCalculateArea,\n  useSetStateToBlock,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfMetric } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport const ONE_HUNDRED_PERCENT = 100;\nconst DEF_PIXELS_PERCENT_TO_PAINT = 30;\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\ntype MassivePaintCallback = (percentage: number) => void;\n\nexport type PaintRandomPixelsProps = (\n  | {\n      paintRandomPixels: MassivePaintCallback;\n      usePaintRandomPixels?: undefined;\n    }\n  | {\n      usePaintRandomPixels:\n        | (() => MassivePaintCallback)\n        | (() => [MassivePaintCallback, ReactElement[]]);\n      paintRandomPixels?: undefined;\n    }\n) & { moduleName: string };\n\nexport const MassivePaintButton: FC<PaintRandomPixelsProps> = (props) => {\n  const { moduleName } = props;\n  let paintRandomPixels: MassivePaintCallback;\n  let painterComponents: ReactElement[] | null;\n  const addRef = useAddRefToCalculateArea();\n  const setStateToBlock = useSetStateToBlock();\n\n  if (props.paintRandomPixels) {\n    [paintRandomPixels, painterComponents] = [props.paintRandomPixels, null];\n  } else {\n    const checkResultForPaintRandomPixels = props.usePaintRandomPixels();\n\n    [paintRandomPixels, painterComponents] = Array.isArray(checkResultForPaintRandomPixels)\n      ? checkResultForPaintRandomPixels\n      : [checkResultForPaintRandomPixels, null];\n  }\n\n  const defPercentsInput = `${DEF_PIXELS_PERCENT_TO_PAINT}`;\n\n  const { WrapMetricConsumer, measurePerformance } = usePerfMetric();\n\n  const startPaint = (value: string, setValue: (v: string) => void): void => {\n    const parsePercentsNumber = parseInt(value, 10);\n\n    if (\n      value === `${parsePercentsNumber}` &&\n      parsePercentsNumber >= 0 &&\n      parsePercentsNumber <= ONE_HUNDRED_PERCENT\n    ) {\n      setStateToBlock();\n\n      measurePerformance({\n        measureAtEffectStage: true,\n\n        callback: () => {\n          paintRandomPixels(parsePercentsNumber);\n        },\n      });\n\n      return;\n    }\n\n    setValue(defPercentsInput);\n  };\n\n  return (\n    <>\n      <div {...{ ref: addRef }}>\n        <InputField\n          {...{\n            label: 'n: ',\n            defValue: defPercentsInput,\n            onSubmit: startPaint,\n            width: 40,\n            addStyle: buttonContainerStyle,\n            insertElementBefore: <Button {...{ type: 'submit', name: createName('n') }} />,\n          }}\n        />\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapMetricConsumer>\n            <PerformanceInfo\n              // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n              {...{ tags: [moduleName, createName(defPercentsInput.padStart(3, '0'))] }}\n            />\n          </WrapMetricConsumer>\n        </div>\n      </div>\n      {painterComponents}\n    </>\n  );\n};\n\nfunction createName(insert: string | number): string {\n  return `paint ${insert}% random pixels`;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n  PerformanceInfo,\n  useAddRefToCalculateArea,\n  useSetStateToBlock,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfMetric } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { buttonContainerStyle } from './styles';\n\ntype MeasuredControlButtonProps = {\n  name: string;\n  moduleName: string;\n} & HookOrNotProp<'onPushButton'>;\n\nexport const MeasuredControlButton: FC<MeasuredControlButtonProps> = (props) => {\n  const { name, moduleName } = props;\n  const onPushButton = props.onPushButton ?? props.useOnPushButton();\n  const { WrapMetricConsumer, measurePerformance } = usePerfMetric();\n  const addRef = useAddRefToCalculateArea();\n  const setStateToBlock = useSetStateToBlock();\n\n  return (\n    <div {...{ style: buttonContainerStyle, ref: addRef }}>\n      <Button\n        {...{\n          onClick: () => {\n            setStateToBlock();\n\n            measurePerformance({\n              measureAtEffectStage: true,\n\n              callback: () => {\n                onPushButton();\n              },\n            });\n          },\n          name,\n        }}\n      />\n      <WrapMetricConsumer>\n        <PerformanceInfo {...{ tags: [moduleName, name] }} />\n      </WrapMetricConsumer>\n    </div>\n  );\n};\n","import {\n  useBlockingState,\n  useProvideModuleNameAndRef,\n  useSetStateToBlock,\n} from '@compare-react-state-management-solutions/performance-info';\nimport type { WrapMetricConsumerProps } from '@compare-react-state-management-solutions/use-perf-metric';\nimport { usePerfMetric } from '@compare-react-state-management-solutions/use-perf-metric';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { cloneElement, useEffect, useState } from 'react';\nimport type { ChooseGridProps } from './ChooseGrid';\nimport { ChooseGrid } from './ChooseGrid';\nimport { DisableOrEnableRowsButton, DisableOrEnableRowsHook } from './DisableOrEnableRowsButton';\nimport type { HookOrNotProp } from './HookOrNotProp';\nimport type { PaintRandomPixelsProps } from './MassivePaintButton';\nimport { MassivePaintButton } from './MassivePaintButton';\nimport { MeasuredControlButton } from './MeasuredControlButton';\n\nconst controlPanelContainerStyle: CSSProperties = { margin: '10px 0 0 5px' };\nconst headlineStyle: CSSProperties = { margin: '0 0 10px' };\nconst blockedStyle: CSSProperties = { filter: 'blur(0.7px)' };\nconst unblockedStyle: CSSProperties = {};\nconst lineStyle: CSSProperties = { height: 0, borderTop: '0.5px solid gray', margin: '15px 0' };\n\ntype ControlPanelProps = {\n  headline: string;\n  useDisableRows: DisableOrEnableRowsHook;\n  useEnableRows: DisableOrEnableRowsHook;\n  children: ReactElement;\n} & HookOrNotProp<'repaintRow'> &\n  HookOrNotProp<'paintRandomSinglePixel'> &\n  PaintRandomPixelsProps &\n  ChooseGridProps;\n\ninterface UseBodyReturn {\n  pixelStageWithPropsAdded: ReactElement | null;\n\n  WrapMetricConsumerToBuildGrid: FC<WrapMetricConsumerProps>;\n\n  WrapMetricConsumerToUnmountGrid: FC<WrapMetricConsumerProps>;\n\n  onGridChosenEnhanced: (arg: { gridSize: number }) => void;\n\n  pixelStageContainerRef: (refElement: HTMLDivElement | null) => void;\n\n  pixelStageContainerStyle: CSSProperties;\n\n  controlsContainerStyle: CSSProperties;\n}\n\nconst warnToChangeGrid = (): never => {\n  throw Error(\n    '(ControlPanel) toChangeGrid must hold the function that refresh the App and set new grid size'\n  );\n};\n\nconst createUseBody = ({\n  moduleName,\n  onGridChosen,\n}: {\n  moduleName: string;\n  onGridChosen: (arg: { gridSize: number }) => void;\n}): {\n  useBody: (arg: { gridSize: number; pixelsStage: ReactElement }) => UseBodyReturn;\n} => {\n  type LifePoint<K extends LifePointType = never, L = [K] extends [never] ? {} : { type: K }> =\n    | L &\n        (\n          | {\n              type: 'want to mount pixel stage';\n              callback: () => LifePoint<\n                'want to mount pixel stage' | 'ready to mount pixel stage'\n              > | null;\n            }\n          | {\n              type: 'ready to mount pixel stage';\n              callback: () => LifePoint<'ready to mount pixel stage' | 'stage mounted'> | null;\n            }\n          | {\n              type: 'stage mounted';\n              callback: (() => LifePoint<'stage mounted'>) | null;\n            }\n          | {\n              type: 'want to unmount pixel stage';\n              callback: () => LifePoint<\n                'want to unmount pixel stage' | 'ready to unmount pixel stage'\n              > | null;\n            }\n          | {\n              type: 'ready to unmount pixel stage';\n              callback: () => LifePoint<'ready to unmount pixel stage' | 'stage unmounted'> | null;\n            }\n          | {\n              type: 'stage unmounted';\n              callback: () => LifePoint<'stage unmounted' | 'want to mount pixel stage'> | null;\n            }\n        );\n\n  type LifePointType =\n    | 'want to mount pixel stage'\n    | 'ready to mount pixel stage'\n    | 'stage mounted'\n    | 'want to unmount pixel stage'\n    | 'ready to unmount pixel stage'\n    | 'stage unmounted';\n\n  type LifePointCallback<T extends LifePointType> = LifePoint<T>['callback'] & FunctionLike;\n\n  let wantToMountCallback: LifePointCallback<'want to mount pixel stage'>;\n  let wantToMountCallbackFirstRun: LifePointCallback<'want to mount pixel stage'>;\n  let readyToMountCallback: LifePointCallback<'ready to mount pixel stage'>;\n  let readyToMountCallbackFirstRun: LifePointCallback<'ready to mount pixel stage'>;\n  let stageMountedCallback: LifePointCallback<'stage mounted'>;\n  let wantToUnmountCallback: LifePointCallback<'want to unmount pixel stage'>;\n  let wantToUnmountCallbackFirstRun: LifePointCallback<'want to unmount pixel stage'>;\n  let readyToUnmountCallback: LifePointCallback<'ready to unmount pixel stage'>;\n  let readyToUnmountCallbackFirstRun: LifePointCallback<'ready to unmount pixel stage'>;\n  let stageUnmountedCallback: LifePointCallback<'stage unmounted'>;\n  let stageUnmountedCallbackFirstRun: LifePointCallback<'stage unmounted'>;\n\n  let pixelStageContainerRef: (refElement: HTMLDivElement | null) => void;\n\n  const useBody = ({\n    gridSize,\n    pixelsStage,\n  }: {\n    gridSize: number;\n    pixelsStage: ReactElement;\n  }): UseBodyReturn => {\n    const blockingState = useBlockingState();\n\n    const controlsContainerStyle: CSSProperties = blockingState.toBlock\n      ? blockedStyle\n      : unblockedStyle;\n\n    const [containerHeight, setContainerHeight] = useState<number | null>(null);\n\n    const pixelStageContainerStyle: CSSProperties =\n      containerHeight === null\n        ? { flexGrow: 1 }\n        : { width: containerHeight, height: containerHeight };\n\n    const [pixelStageWithPropsAdded, setPixelStage] = useState<ReactElement | null>(null);\n    const setStateToBlock = useSetStateToBlock();\n\n    const {\n      WrapMetricConsumer: WrapMetricConsumerToBuildGrid,\n      measurePerformance: measurePerformanceToBuildGrid,\n    } = usePerfMetric();\n\n    const {\n      WrapMetricConsumer: WrapMetricConsumerToUnmountGrid,\n      measurePerformance: measurePerformanceToToUnmountGrid,\n    } = usePerfMetric();\n\n    /**\n     * onGridChosenEnhanced is callback being passed to ChooseGrid component\n     */\n    const [onGridChosenEnhanced, setOnGridChosenEnhanced] = useState<\n      (arg: { gridSize: number }) => void\n    >(() => () => null);\n\n    /**\n     * nextGridSize is used to remember last changed grid size to control if it changes in root of\n     * App to make sure it is good to proceed to 'want to mount' life point\n     */\n    const [nextGridSize, rememberGridSize] = useState<number | null>(null);\n\n    /**\n     * toChangeGrid is used to refresh App and set new grid size\n     */\n    const [toChangeGrid, setToChangeGrid] = useState<() => void>(() => warnToChangeGrid);\n\n    const [lifePoint, setLifePoint] = useState<LifePoint>({\n      type: 'want to mount pixel stage',\n      callback: () => wantToMountCallbackFirstRun(),\n    });\n\n    wantToMountCallback = () =>\n      blockingState.toBlock && blockingState.readyToRender && containerHeight !== null\n        ? ({\n            type: 'ready to mount pixel stage',\n            callback: () => readyToMountCallbackFirstRun(),\n          } as const)\n        : null;\n\n    wantToMountCallbackFirstRun = () => {\n      const transit = wantToMountCallback();\n\n      if (transit) {\n        return transit;\n      }\n\n      setStateToBlock();\n\n      return {\n        type: 'want to mount pixel stage',\n        callback: () => wantToMountCallback(),\n      } as const;\n    };\n\n    readyToMountCallback = () =>\n      pixelStageWithPropsAdded && !blockingState.toBlock\n        ? ({ type: 'stage mounted', callback: () => stageMountedCallback() } as const)\n        : null;\n\n    readyToMountCallbackFirstRun = () => {\n      const transit = readyToMountCallback();\n\n      if (transit) {\n        return transit;\n      }\n\n      measurePerformanceToBuildGrid({\n        measureAtEffectStage: true,\n\n        callback: () => {\n          setPixelStage(cloneElement(pixelsStage, { containerHeight }));\n        },\n      });\n\n      return {\n        type: 'ready to mount pixel stage',\n        callback: () => readyToMountCallback(),\n      } as const;\n    };\n\n    stageMountedCallback = () => {\n      setOnGridChosenEnhanced(() => (arg: { gridSize: number }): void => {\n        setLifePoint({\n          type: 'want to unmount pixel stage',\n          callback: () => wantToUnmountCallbackFirstRun(),\n        });\n\n        rememberGridSize(arg.gridSize);\n        setToChangeGrid(() => () => onGridChosen(arg));\n      });\n\n      return { type: 'stage mounted', callback: null } as const;\n    };\n\n    wantToUnmountCallback = () =>\n      blockingState.toBlock && blockingState.readyToRender\n        ? ({\n            type: 'ready to unmount pixel stage',\n            callback: () => readyToUnmountCallbackFirstRun(),\n          } as const)\n        : null;\n\n    wantToUnmountCallbackFirstRun = () => {\n      const transit = wantToUnmountCallback();\n\n      if (transit) {\n        return transit;\n      }\n\n      setStateToBlock();\n      setOnGridChosenEnhanced(() => () => null);\n\n      return {\n        type: 'want to unmount pixel stage',\n        callback: () => wantToUnmountCallback(),\n      } as const;\n    };\n\n    readyToUnmountCallback = () =>\n      pixelStageWithPropsAdded || blockingState.toBlock\n        ? null\n        : ({\n            type: 'stage unmounted',\n            callback: () => stageUnmountedCallbackFirstRun(),\n          } as const);\n\n    readyToUnmountCallbackFirstRun = () => {\n      const transit = readyToUnmountCallback();\n\n      if (transit) {\n        return transit;\n      }\n\n      measurePerformanceToToUnmountGrid({\n        measureAtEffectStage: true,\n\n        callback: () => {\n          setPixelStage(null);\n        },\n      });\n\n      return {\n        type: 'ready to unmount pixel stage',\n        callback: () => readyToUnmountCallback(),\n      } as const;\n    };\n\n    stageUnmountedCallback = () =>\n      gridSize === nextGridSize\n        ? ({\n            type: 'want to mount pixel stage',\n            callback: () => wantToMountCallbackFirstRun(),\n          } as const)\n        : null;\n\n    stageUnmountedCallbackFirstRun = () => {\n      const transit = stageUnmountedCallback();\n\n      if (transit) {\n        return transit;\n      }\n\n      toChangeGrid();\n      setToChangeGrid(() => warnToChangeGrid);\n\n      return { type: 'stage unmounted', callback: () => stageUnmountedCallback() } as const;\n    };\n\n    /**\n     * Making transition from one life point to next\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n      const nextLifePoint = lifePoint.callback?.();\n\n      if (nextLifePoint) {\n        setLifePoint(nextLifePoint);\n      }\n    });\n\n    const { provideModuleNameAndRef } = useProvideModuleNameAndRef();\n\n    pixelStageContainerRef =\n      pixelStageContainerRef ??\n      ((refElement: HTMLDivElement | null): void => {\n        if (refElement && containerHeight === null) {\n          provideModuleNameAndRef([moduleName, refElement]);\n          setContainerHeight(refElement.getBoundingClientRect().height);\n        }\n      });\n\n    return {\n      pixelStageWithPropsAdded,\n      WrapMetricConsumerToBuildGrid,\n      WrapMetricConsumerToUnmountGrid,\n      onGridChosenEnhanced,\n      pixelStageContainerRef,\n      controlsContainerStyle,\n      pixelStageContainerStyle,\n    };\n  };\n\n  return { useBody };\n};\n\nconst outerContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  margin: '10px 10px 0',\n};\n\nexport const ControlPanel: FC<ControlPanelProps> = (props) => {\n  const {\n    headline,\n    gridSize,\n    moduleName,\n    useDisableRows,\n    useEnableRows,\n    onGridChosen,\n    children: pixelsStage,\n  } = props;\n\n  const [{ useBody }] = useState(() => createUseBody({ moduleName, onGridChosen }));\n\n  const {\n    pixelStageWithPropsAdded,\n    WrapMetricConsumerToBuildGrid,\n    WrapMetricConsumerToUnmountGrid,\n    onGridChosenEnhanced,\n    pixelStageContainerRef,\n    controlsContainerStyle,\n    pixelStageContainerStyle,\n  } = useBody({ gridSize, pixelsStage });\n\n  return (\n    <div {...{ style: outerContainerStyle }}>\n      <div {...{ style: pixelStageContainerStyle, ref: pixelStageContainerRef }}>\n        {pixelStageWithPropsAdded}\n      </div>\n      <div {...{ style: controlPanelContainerStyle }}>\n        <div {...{ style: headlineStyle }}>\n          <strong>{headline}</strong>\n        </div>\n        <div {...{ style: controlsContainerStyle }}>\n          <MeasuredControlButton\n            {...{\n              moduleName,\n              name: 're-paint',\n              ...(props.repaintRow\n                ? { onPushButton: props.repaintRow }\n                : { useOnPushButton: props.useRepaintRow }),\n            }}\n          />\n          <DisableOrEnableRowsButton\n            {...{\n              name: 'disable rows',\n              useOnPushButton: useDisableRows,\n              moduleName,\n            }}\n          />\n          <DisableOrEnableRowsButton\n            {...{\n              name: 'enable rows',\n              useOnPushButton: useEnableRows,\n              moduleName,\n            }}\n          />\n          <MeasuredControlButton\n            {...{\n              name: 'paint random pixel',\n              ...(props.paintRandomSinglePixel\n                ? { onPushButton: props.paintRandomSinglePixel }\n                : { useOnPushButton: props.usePaintRandomSinglePixel }),\n              gridSize,\n              moduleName,\n            }}\n          />\n          <MassivePaintButton\n            {...{\n              ...(props.paintRandomPixels\n                ? { paintRandomPixels: props.paintRandomPixels }\n                : { usePaintRandomPixels: props.usePaintRandomPixels }),\n              moduleName,\n            }}\n          />\n          <div {...{ style: lineStyle }} />\n          <ChooseGrid\n            {...{\n              onGridChosen: onGridChosenEnhanced,\n              WrapMetricConsumerToBuildGrid,\n              WrapMetricConsumerToUnmountGrid,\n              gridSize,\n              moduleName,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype FunctionLike = (...x: any) => any;\n\nexport const CONTROL_ACTIONS_ORDER = [\n  'build grid',\n  'unmount grid',\n  're-paint',\n  'disable rows',\n  'enable rows',\n  'paint random pixel',\n  'paint \\\\d+% random pixels',\n];\n","export function drawPixels(totalNumber: number, numberToDraw: number): number[] {\n  if (totalNumber < numberToDraw) {\n    throw Error('Number to draw must be less than total');\n  }\n\n  const [flagToWrite, numberToLeave] =\n    numberToDraw < totalNumber / 2 ? [true, totalNumber - numberToDraw] : [false, numberToDraw];\n  const pixels = Array(totalNumber)\n    .fill(null)\n    .map((_, i) => i);\n  const pickedPixels: number[] = [];\n\n  while (pixels.length > numberToLeave) {\n    const pickPixel = Math.floor(Math.random() * pixels.length);\n\n    if (flagToWrite) {\n      pickedPixels.push(pixels[pickPixel]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    pickPixel < pixels.length - 1 ? (pixels[pickPixel] = pixels.pop()!) : pixels.pop();\n  }\n\n  return flagToWrite ? pickedPixels : pixels;\n}\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\nconst range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport const getNextAtom = <K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> =>\n  atom({ key: getNextKey(prefix), default: defaultValue });\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoiceKeyPrefixBase = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<\n  AlternativeForChoice,\n  HoldColorForAlternativeAtom | null\n>;\nexport type AlternativeForChoice = typeof alternativeForChoiceKeyPrefixBase;\nexport type HoldColorForAlternativeAtom = {\n  atom: Atom<ColorForAlternative>;\n};\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { atom, snapshot_UNSTABLE, useGotoRecoilSnapshot, useSetRecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  Atom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  HoldColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoiceKeyPrefixBase,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const createColorForAlternativeAtom = (choice: PixelChoice): Atom<ColorForAlternative> =>\n  getNextAtom(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativeKeyPrefix,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nconst alternativeForChoiceKeyPrefixes = ([0, 1] as const).map(\n  (c) => `${alternativeForChoiceKeyPrefixBase}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const alternativeForChoiceAtoms = alternativeForChoiceKeyPrefixes.map((key, i) =>\n  getNextAtom(key, { atom: createColorForAlternativeAtom(i as PixelChoice) })\n) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nexport const nullPlaceholderAtom = atom({ key: 'null-placeholder-atom', default: null });\n\nconst initStateSnapshot = snapshot_UNSTABLE();\ninitStateSnapshot.retain();\n\ninterface UseRefreshStageReturn {\n  gridSize: number;\n  commandToRefreshStage: CommandToRefreshStage;\n}\n\ntype CommandToRefreshStage = (arg: { gridSize: number }) => void;\n\nexport const useRefreshStage = ({\n  defGridSize,\n}: {\n  defGridSize: number;\n}): UseRefreshStageReturn => {\n  const [gridSize, setGridSize] = useState(defGridSize);\n  const initState = useGotoRecoilSnapshot();\n\n  const setAlternativesForChoice = alternativeForChoiceAtoms.map(useSetRecoilState) as [\n    SetterOrUpdater<HoldColorForAlternativeAtom | null>,\n    SetterOrUpdater<HoldColorForAlternativeAtom | null>\n  ];\n\n  const commandToRefreshStage: CommandToRefreshStage = ({ gridSize: nextGridSize }) => {\n    setGridSize(nextGridSize);\n    initState(initStateSnapshot);\n\n    setAlternativesForChoice.forEach((setter, i) =>\n      setter({ atom: createColorForAlternativeAtom(i as PixelChoice) })\n    );\n  };\n\n  return { commandToRefreshStage, gridSize };\n};\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useEffect, useState } from 'react';\nimport {\n  selector,\n  SetterOrUpdater,\n  useRecoilState,\n  useRecoilValue,\n  useSetRecoilState,\n} from 'recoil';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  alternativeForChoiceAtoms,\n  choiceForPixelPlaceholderAtom,\n  colorForAlternativePlaceholderAtom,\n  createColorForAlternativeAtom,\n  nullPlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from './State/State';\nimport type {\n  AlternativeForChoiceAtom,\n  ColorValue,\n  HoldColorForAlternativeAtom,\n  PixelChoice,\n} from './State/StateInterface';\nimport { storeAtomsMethods } from './State/storeAtomsMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\ntype ManageColorState = [ColorValue, SetterOrUpdater<ColorValue>];\n\nexport const useRepaintRow = (): (() => void) => {\n  const alternatives = alternativeForChoiceAtoms.map(useAlternative) as [\n    HoldColorForAlternativeAtom | null,\n    HoldColorForAlternativeAtom | null\n  ];\n\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n  const colorsState = alternatives.map(useColorState) as [ManageColorState, ManageColorState];\n\n  return (): void => {\n    const [prevColor, setNextColor] = colorsState[activeChoice];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n\n    if (alternatives[activeChoice] !== null) {\n      setNextColor(getRandomColor(prevColor));\n    }\n  };\n};\n\nfunction useAlternative(\n  altForChoiceAtom: AlternativeForChoiceAtom\n): HoldColorForAlternativeAtom | null {\n  return useRecoilValue(altForChoiceAtom);\n}\n\nfunction useColorState(alt: HoldColorForAlternativeAtom | null): ManageColorState {\n  return useRecoilState(alt?.atom ?? colorForAlternativePlaceholderAtom);\n}\n\nexport const useDisableRows = (): (() => void) | null => {\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  return possibleAlternative === null\n    ? null\n    : () => {\n        setAlternative(null);\n        setActiveChoice(0);\n      };\n};\n\nexport const useEnableRows = (): (() => void) | null => {\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n\n  return possibleAlternative === null\n    ? () => {\n        setAlternative({\n          atom: createColorForAlternativeAtom(1),\n        });\n      }\n    : null;\n};\n\nexport const usePaintRandomSinglePixelDependedOnGridSize = ({\n  gridSize,\n}: {\n  gridSize: number;\n}): (() => void) => {\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [atomToPaint]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (): void => {\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  };\n};\n\nexport const usePaintRandomPixelsDependedOnGridSize = ({\n  gridSize,\n}: {\n  gridSize: number;\n}): ((percentage: number) => void) => {\n  const [selectorToPaint, setSelectorToPaint] = useState(nullPlaceholderAtom);\n  const paintPixels = useSetRecoilState(selectorToPaint);\n\n  useEffect(() => {\n    selectorToPaint !== nullPlaceholderAtom && paintPixels(null);\n  }, [paintPixels, selectorToPaint]);\n\n  return (percentage: number): void => {\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n    setSelectorToPaint(\n      selector({\n        key: 'paint-random-pixels',\n        get: () => null,\n        set: ({ set }) => {\n          drawPixels(allPixelsNumber, pixelsNumberToPaint).forEach((p) =>\n            set(\n              storeAtomsMethods.get(p) ?? throwErrorAtomMustBeDefined(),\n              (prevChoice) => (1 - prevChoice) as PixelChoice\n            )\n          );\n        },\n      })\n    );\n  };\n};\n\nfunction throwErrorAtomMustBeDefined(): never {\n  throw Error('Atom must be defined');\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: number;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: number;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ gridSize: number; containerHeight?: number | null }> = ({\n  gridSize,\n  containerHeight = null,\n}) => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  useEffect(() => {\n    if (containerHeight !== null) {\n      let currentLine: ReactElement | null = null;\n      const pixelSize = containerHeight / gridSize;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  }, [containerHeight, gridSize]);\n\n  return <>{lines}</>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  useDisableRows,\n  useEnableRows,\n  usePaintRandomPixelsDependedOnGridSize,\n  usePaintRandomSinglePixelDependedOnGridSize,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshStage } from './State/State';\n\nexport const MODULE_NAME = 'recoil';\n\nconst AppInsideRecoilRoot: FC<{\n  defGridSize: number;\n}> = ({ defGridSize }) => {\n  const { commandToRefreshStage, gridSize } = useRefreshStage({ defGridSize });\n\n  return (\n    <ControlPanel\n      {...{\n        headline: 'Implemented using \"recoil\" library',\n        useRepaintRow,\n        useDisableRows,\n        useEnableRows,\n        usePaintRandomSinglePixel: () => usePaintRandomSinglePixelDependedOnGridSize({ gridSize }),\n        usePaintRandomPixels: () => usePaintRandomPixelsDependedOnGridSize({ gridSize }),\n        gridSize,\n        onGridChosen: commandToRefreshStage,\n        moduleName: MODULE_NAME,\n      }}\n    >\n      <PixelsStage {...{ gridSize }} />\n    </ControlPanel>\n  );\n};\n\nexport const App: FC<{\n  defGridSize: number;\n}> = (props) => {\n  return (\n    <RecoilRoot>\n      <AppInsideRecoilRoot {...props} />\n    </RecoilRoot>\n  );\n};\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { Store } from 'redux';\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport interface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  RememberActiveChoiceState;\n\nexport type AppStore = Store<State, AppAction>;\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  DISABLE_ROW = 'alternatives/disableRow',\n  ENABLE_ROW = 'alternatives/enableRow',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\nexport type AppAction<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.DISABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.ENABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n","import type { AppAction, ChoiceForPixel, PixelChoice } from './StateInterface';\nimport { ActionType } from './StateInterface';\n\nexport const createNewPixelEntryAction = (\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): AppAction<ActionType.CREATE_NEW_PIXEL_ENTRY> => ({\n  type: ActionType.CREATE_NEW_PIXEL_ENTRY,\n  payload: { pixel, choice },\n});\n\nexport const switchPixelChoiceAction = (\n  pixel: ChoiceForPixel\n): AppAction<ActionType.SWITCH_PIXEL_CHOICE> => ({\n  type: ActionType.SWITCH_PIXEL_CHOICE,\n  payload: { pixel },\n});\n\nexport const switchMultiplePixelsAction = (\n  pixels: ChoiceForPixel[]\n): AppAction<ActionType.SWITCH_MULTIPLE_PIXELS> => ({\n  type: ActionType.SWITCH_MULTIPLE_PIXELS,\n  payload: { pixels },\n});\n\nexport const disableRowAction = (): AppAction<ActionType.DISABLE_ROW> => ({\n  type: ActionType.DISABLE_ROW,\n});\n\nexport const enableRowAction = (): AppAction<ActionType.ENABLE_ROW> => ({\n  type: ActionType.ENABLE_ROW,\n});\n\nexport const repaintRowAction = (): AppAction<ActionType.REPAINT_ROW> => ({\n  type: ActionType.REPAINT_ROW,\n});\n","import type { State } from './StateInterface';\n\nexport const createSelector =\n  <K extends keyof State>(k: K): ((state: State) => State[K]) =>\n  (state: State) =>\n    state[k];\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { alternativeForChoicePlaceholderKey, colorForAlternativeKeyPrefix } from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const colorForAlternativeKey = getNextKey(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative\n  );\n  const color = getRandomColor(DEF_COLOR);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nexport const initialState = { rememberActiveChoice: 0 } as State;\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  disableRowAction,\n  enableRowAction,\n  repaintRowAction,\n  switchMultiplePixelsAction,\n  switchPixelChoiceAction,\n} from './State/actions';\nimport { createSelector } from './State/selectors';\nimport { alternativeForChoiceKeys } from './State/State';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const useRepaintRow = (): (() => void) => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(repaintRowAction());\n  };\n};\n\nexport const useDisableRows = (): (() => void) | null => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? null\n    : () => {\n        dispatch(disableRowAction());\n      };\n};\n\nexport const useEnableRows = (): (() => void) | null => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? () => {\n        dispatch(enableRowAction());\n      }\n    : null;\n};\n\nexport const usePaintRandomSinglePixelDependedOnGridSize = ({\n  gridSize,\n}: {\n  gridSize: number;\n}): (() => void) => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  };\n};\n\nexport const usePaintRandomPixelsDependedOnGridSize = ({\n  gridSize,\n}: {\n  gridSize: number;\n}): ((percentage: number) => void) => {\n  const dispatch = useDispatch();\n\n  return (percentage: number) => {\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n    dispatch(\n      switchMultiplePixelsAction(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n          (p) =>\n            storeKeysMethods.get(p) ??\n            (() => {\n              throw Error('It must be defined');\n            })()\n        )\n      )\n    );\n  };\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '../State/selectors';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector(createSelector(altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { createSelector } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: number;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useSelector(createSelector(choiceForPixel));\n  const possibleAltControl = useSelector(createSelector(alternativeForChoiceKeys[choice]));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: number;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ gridSize: number; containerHeight?: number | null }> = ({\n  gridSize,\n  containerHeight = null,\n}) => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  useEffect(() => {\n    if (containerHeight !== null) {\n      let currentLine: ReactElement | null = null;\n      const pixelSize = containerHeight / gridSize;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  }, [containerHeight, gridSize]);\n\n  return <>{lines}</>;\n};\n","import { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { Reducer } from 'redux';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  initialState,\n} from './State';\nimport type {\n  AlternativeForChoiceState,\n  AppAction,\n  ChoiceForPixel,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { ActionType } from './StateInterface';\n\nexport const createReducer = (): Reducer<State, AppAction> => {\n  const initState = {\n    ...initialState,\n\n    ...([0, 1] as const).reduce(\n      (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n      {} as ColorForAlternativeState & AlternativeForChoiceState\n    ),\n  };\n\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  const reducer = (state = initState, action: AppAction): State => {\n    switch (action.type) {\n      case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n        const {\n          payload: { choice, pixel },\n        } = action;\n\n        return { ...state, [pixel]: choice };\n      }\n\n      case ActionType.SWITCH_PIXEL_CHOICE: {\n        const {\n          payload: { pixel },\n        } = action;\n\n        return { ...state, ...updatePixel({} as State, pixel) };\n      }\n\n      case ActionType.SWITCH_MULTIPLE_PIXELS: {\n        const {\n          payload: { pixels },\n        } = action;\n\n        const stateUpdate = pixels.reduce(updatePixel, {} as State);\n\n        return { ...state, ...stateUpdate };\n      }\n\n      case ActionType.DISABLE_ROW: {\n        return { ...state, [alternativeForChoiceKeys[1]]: null, rememberActiveChoice: 0 };\n      }\n\n      case ActionType.ENABLE_ROW: {\n        return {\n          ...state,\n          ...(state[alternativeForChoiceKeys[1]] === null\n            ? createColorForAlternativeForChoiceEntry(1)\n            : null),\n        };\n      }\n\n      case ActionType.REPAINT_ROW: {\n        const { rememberActiveChoice: activeChoice } = state;\n        const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n        const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n        return {\n          ...state,\n          ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n            ? {}\n            : { rememberActiveChoice: nextPotentialChoice }),\n          ...(altKey === null ? {} : { [altKey]: getRandomColor(state[altKey]) }),\n        };\n      }\n\n      default:\n        return state;\n    }\n\n    function updatePixel(update: State, pixel: ChoiceForPixel) {\n      const prevChoice = state[pixel];\n\n      return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n    }\n  };\n\n  return reducer;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport {\n  useDisableRows,\n  useEnableRows,\n  usePaintRandomPixelsDependedOnGridSize,\n  usePaintRandomSinglePixelDependedOnGridSize,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshStage } from './State/store';\n\nexport const MODULE_NAME = 'react-redux';\n\nexport const App: FC<{ defGridSize: number }> = ({ defGridSize }) => {\n  const { store, commandToRefreshStage, gridSize } = useRefreshStage({ defGridSize });\n\n  return (\n    <Provider {...{ store }}>\n      <ControlPanel\n        {...{\n          headline: 'Implemented using \"react-redux\" library',\n          useRepaintRow,\n          useDisableRows,\n          useEnableRows,\n          usePaintRandomSinglePixel: () =>\n            usePaintRandomSinglePixelDependedOnGridSize({ gridSize }),\n          usePaintRandomPixels: () => usePaintRandomPixelsDependedOnGridSize({ gridSize }),\n          gridSize,\n          onGridChosen: commandToRefreshStage,\n          moduleName: MODULE_NAME,\n        }}\n      >\n        <PixelsStage {...{ gridSize }} />\n      </ControlPanel>\n    </Provider>\n  );\n};\n","import { useState } from 'react';\nimport { createStore } from 'redux';\nimport { createReducer } from './reducer';\nimport type { AppStore } from './StateInterface';\ninterface UseRefreshStageReturn {\n  store: AppStore;\n  gridSize: number;\n  commandToRefreshStage: CommandToRefreshStage;\n}\n\ntype CommandToRefreshStage = (arg: { gridSize: number }) => void;\n\nexport const useRefreshStage = ({\n  defGridSize,\n}: {\n  defGridSize: number;\n}): UseRefreshStageReturn => {\n  const [store, provideStore] = useState<AppStore>(() => createStore(createReducer()));\n  const [gridSize, setGridSize] = useState(defGridSize);\n\n  const commandToRefreshStage: CommandToRefreshStage = ({ gridSize: nextGridSize }): void => {\n    setGridSize(nextGridSize);\n    provideStore(createStore(createReducer()));\n  };\n\n  return { store, gridSize, commandToRefreshStage };\n};\n","import type { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\n\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n\n  get: (i: number) => ChoiceForPixel | undefined;\n\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  RememberActiveChoiceState;\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport { initInterstate } from 'use-interstate';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const { useInterstate, readInterstate, setInterstate, resetInterstate } =\n  initInterstate<State>();\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const [colorForAlternativeKey, color] = [\n    getNextKey(`${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative),\n    getRandomColor(DEF_COLOR),\n  ];\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\ninterface UseRefreshStageReturn {\n  gridSize: number;\n  commandToRefreshStage: CommandToRefreshStage;\n}\n\ntype CommandToRefreshStage = (arg: { gridSize: number }) => void;\n\nexport const useRefreshStage = ({\n  defGridSize,\n}: {\n  defGridSize: number;\n}): UseRefreshStageReturn => {\n  useState(() => initAppInterstate());\n  const [gridSize, setGridSize] = useState(defGridSize);\n\n  const commandToRefreshStage: CommandToRefreshStage = ({ gridSize: nextGridSize }) => {\n    setGridSize(nextGridSize);\n    initAppInterstate();\n  };\n\n  return { commandToRefreshStage, gridSize };\n};\n\nfunction initAppInterstate() {\n  resetInterstate({\n    ...initialState,\n    ...([0, 1] as const).reduce(\n      (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n      {} as ColorForAlternativeState & AlternativeForChoiceState\n    ),\n  });\n}\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  setInterstate,\n  useInterstate,\n} from './State/State';\nimport type {\n  ColorForAlternativeState,\n  PixelChoice,\n  RememberActiveChoiceState,\n} from './State/StateInterface';\nimport { rememberActiveChoiceKey } from './State/StateInterface';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const repaintRow = (): void => {\n  setInterstate((state) => {\n    const { [rememberActiveChoiceKey]: activeChoice } = state;\n    const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    return {\n      ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n        ? ({} as RememberActiveChoiceState)\n        : { [rememberActiveChoiceKey]: nextPotentialChoice }),\n      ...(altKey === null\n        ? ({} as ColorForAlternativeState)\n        : { [altKey]: getRandomColor(state[altKey]) }),\n    };\n  });\n};\n\nexport const useDisableRows = (): (() => void) | null =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? null\n      : () => {\n          setInterstate({\n            [alternativeForChoiceKeys[1]]: null,\n            [rememberActiveChoiceKey]: 0 as PixelChoice,\n          });\n        }\n  );\n\nexport const useEnableRows = (): (() => void) | null =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? () => {\n          setInterstate(createColorForAlternativeForChoiceEntry(1));\n        }\n      : null\n  );\n\nexport const paintRandomSinglePixelDependedOnGridSize = ({\n  gridSize,\n}: {\n  gridSize: number;\n}): void => {\n  setInterstate(drawPixelToPaint(gridSize ** 2), (prev) => (1 - prev) as PixelChoice);\n};\n\nexport const paintRandomPixelsDependedOnGridSize = ({\n  gridSize,\n  percentage,\n}: {\n  gridSize: number;\n  percentage: number;\n}): void => {\n  const allPixelsNumber = gridSize ** 2;\n  const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n  drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => {\n    setInterstate(\n      storeKeysMethods.get(p) ??\n        (() => {\n          throw Error('It must be defined');\n        })(),\n\n      (prevChoice) => (1 - prevChoice) as PixelChoice\n    );\n  });\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixelKey = storeKeysMethods.get(randomIndex);\n\n  if (!pixelKey) {\n    throw Error('It should be defined');\n  }\n\n  return pixelKey;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlKey: ColorForAlternative }> = ({ altControlKey }) => {\n  const color = useInterstate(altControlKey);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { alternativeForChoiceKeys, setInterstate, useInterstate } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: number;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useInterstate(choiceForPixel);\n  const possibleAltKey = useInterstate(alternativeForChoiceKeys[choice]);\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    setInterstate(nextKey, defChoice);\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltKey && choiceForPixel !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlKey: possibleAltKey }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: number;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ gridSize: number; containerHeight?: number | null }> = ({\n  gridSize,\n  containerHeight = null,\n}) => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  useEffect(() => {\n    if (containerHeight !== null) {\n      let currentLine: ReactElement | null = null;\n      const pixelSize = containerHeight / gridSize;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  }, [containerHeight, gridSize]);\n\n  return <>{lines}</>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport type { FC } from 'react';\nimport React from 'react';\nimport {\n  paintRandomPixelsDependedOnGridSize,\n  paintRandomSinglePixelDependedOnGridSize,\n  repaintRow,\n  useDisableRows,\n  useEnableRows,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshStage } from './State/State';\n\nexport const MODULE_NAME = 'use-interstate';\n\nexport const App: FC<{\n  defGridSize: number;\n}> = ({ defGridSize }) => {\n  const { commandToRefreshStage, gridSize } = useRefreshStage({ defGridSize });\n\n  return (\n    <ControlPanel\n      {...{\n        headline: 'Implemented using \"use-interstate\" library',\n        repaintRow,\n        useDisableRows,\n        useEnableRows,\n        paintRandomSinglePixel: () => paintRandomSinglePixelDependedOnGridSize({ gridSize }),\n\n        paintRandomPixels: (percentage) =>\n          paintRandomPixelsDependedOnGridSize({ gridSize, percentage }),\n\n        gridSize,\n        onGridChosen: commandToRefreshStage,\n        moduleName: MODULE_NAME,\n      }}\n    >\n      <PixelsStage {...{ gridSize }} />\n    </ControlPanel>\n  );\n};\n","import type { PerfInfoData } from '@compare-react-state-management-solutions/performance-info';\nimport type { Data, DataTable, GridEntry, ModuleEntry, PickRequired } from './InterpretData';\n\nexport interface NotCountFirstMeasureOptions {\n  notCountFirstMeasure: boolean;\n}\n\nexport type ProcessData = (\n  newData: PerfInfoData[],\n  options: NotCountFirstMeasureOptions\n) => DataTable;\n\nexport const createProcessData = (): {\n  processData: ProcessData;\n} => {\n  type DataMethodsTable = { [P in string]?: DataMethods };\n\n  interface DataMethods {\n    addData: AddData;\n  }\n\n  type AddData = (data: PerfInfoData, dataT: DataTable) => DataTable;\n\n  let positionIndex: number;\n  let dataTable: Readonly<DataTable>;\n  let dataMethodsTable: Readonly<DataMethodsTable>;\n  initTable();\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const processData: ProcessData = (newData, options) => {\n    newData.length === 0 && initTable();\n    const newSlice = newData.slice(positionIndex);\n    positionIndex = newData.length;\n\n    newSlice.forEach((data) => {\n      [dataTable, dataMethodsTable] = dataPipeline(data, [dataTable, dataMethodsTable], options);\n    });\n\n    return dataTable;\n  };\n\n  return { processData };\n\n  function initTable(): void {\n    positionIndex = 0;\n    dataTable = {};\n    dataMethodsTable = {};\n  }\n\n  function dataPipeline(\n    data: PerfInfoData,\n    [dataT, dataMethodsT]: [DataTable, DataMethodsTable],\n    options: NotCountFirstMeasureOptions\n  ): [DataTable, DataMethodsTable] {\n    const {\n      tags: [moduleName],\n    } = data;\n\n    const nextDataMethT = assureMethodsCreated(moduleName, dataMethodsT, options);\n    const {\n      [moduleName]: { addData },\n    } = nextDataMethT;\n\n    return [addData(data, dataT), nextDataMethT];\n  }\n\n  function assureMethodsCreated<M extends string>(\n    moduleName: M,\n    dataMethodsT: DataMethodsTable,\n    options: NotCountFirstMeasureOptions\n  ): PickRequired<DataMethodsTable, M> {\n    return (dataMethodsT[moduleName]\n      ? dataMethodsT\n      : { ...dataMethodsT, [moduleName]: createDataMethods(moduleName, options) }) as PickRequired<\n      DataMethodsTable,\n      M\n    >;\n  }\n\n  function createDataMethods(\n    moduleName: string,\n    { notCountFirstMeasure }: NotCountFirstMeasureOptions\n  ): DataMethods {\n    let currentGrid: number | null = null;\n    let firstRun = true;\n\n    const addData: AddData = (data, dataT) => {\n      const {\n        data: { TTI, TBT },\n        tags: [checkModuleName, ...restTags],\n      } = data;\n\n      if (checkModuleName !== moduleName) {\n        throw Error('wrong module name');\n      }\n\n      let entryName: string;\n\n      if (typeof restTags[0] === 'number') {\n        currentGrid = restTags[0];\n        entryName = 'build grid';\n      } else {\n        entryName = restTags[0];\n      }\n\n      if (currentGrid === null) {\n        throw Error('there is no information about the current grid size');\n      }\n\n      if (firstRun && notCountFirstMeasure) {\n        firstRun = false;\n\n        return { ...dataT, [moduleName]: {} };\n      }\n\n      const { [moduleName]: moduleEntry = {} as ModuleEntry } = dataT;\n      const { [currentGrid]: gridEntry = {} as GridEntry } = moduleEntry;\n\n      const {\n        [entryName]: dataEntry = { TTIs: [], TBTs: [] } as Pick<Data, 'TTIs' | 'TBTs'>,\n      } = gridEntry;\n\n      const [TTIs, TBTs] = [\n        [...dataEntry.TTIs, TTI],\n        [...dataEntry.TBTs, TBT],\n      ];\n\n      const [avTTI, avTBT] = [average(TTIs), average(TBTs)];\n\n      return {\n        ...dataT,\n        [moduleName]: {\n          ...moduleEntry,\n          [currentGrid]: {\n            ...gridEntry,\n            [entryName]: { ...dataEntry, TTIs, TBTs, avTTI, avTBT },\n          },\n        },\n      };\n\n      function average(x: number[]): number {\n        return x.reduce((sum, xi) => sum + xi) / x.length;\n      }\n    };\n\n    return { addData };\n  }\n};\n","import type { CSSProperties } from 'react';\n\nexport const rowContainerStyle: CSSProperties = {\n  display: 'flex',\n  marginRight: 30,\n};\n\nexport const borderBottom: CSSProperties = {\n  borderBottom: 'solid 0.5px',\n};\n\nexport const recordStyle: CSSProperties = {\n  width: '100%',\n  paddingRight: 5,\n};\n\nexport const recordNameStyle: CSSProperties = {\n  ...recordStyle,\n  fontSize: '0.8em',\n  lineHeight: '1.8em',\n};\n\nexport const recordNumbersStyle: CSSProperties = {\n  ...recordStyle,\n  textAlign: 'right',\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { borderBottom, recordNumbersStyle, recordStyle, rowContainerStyle } from './tableStyles';\n\nconst gridRowContainerStyle: CSSProperties = {\n  ...rowContainerStyle,\n  marginTop: 20,\n};\n\nconst gridTitleContainerStyle: CSSProperties = {\n  ...borderBottom,\n  fontStyle: 'italic',\n  fontWeight: 600,\n  fontSize: '0.9em',\n  display: 'flex',\n  paddingBottom: 3,\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const GridTitleRow: FC<{ moduleNames: string[]; gridTitle: number | string }> = ({\n  moduleNames,\n  gridTitle,\n}) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: gridRowContainerStyle }}>\n      {moduleNames.map((moduleN) => (\n        <div\n          {...{\n            style: {\n              ...gridTitleContainerStyle,\n              width: getRef(moduleN).getBoundingClientRect().width,\n            },\n          }}\n          key={moduleN}\n        >\n          <div {...{ style: recordStyle }}>{`Grid size: ${gridTitle}`}</div>\n          <div {...{ style: recordNumbersStyle }}>average TTI (ms)</div>\n          <div {...{ style: recordNumbersStyle }}>average TBT (ms)</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { rowContainerStyle } from './tableStyles';\n\nconst moduleNameContainerStyle: CSSProperties = {\n  fontWeight: 200,\n  fontVariantCaps: 'small-caps',\n  fontSize: '1.2em',\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const ModulesRow: FC<{ moduleNames: string[] }> = ({ moduleNames }) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: rowContainerStyle }}>\n      {moduleNames.map((moduleN) => (\n        <div\n          {...{\n            style: {\n              ...moduleNameContainerStyle,\n              width: getRef(moduleN).getBoundingClientRect().width,\n            },\n          }}\n          key={moduleN}\n        >\n          {moduleN}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport type { DataTable } from '../InterpretData';\nimport {\n  borderBottom,\n  recordNameStyle,\n  recordNumbersStyle,\n  rowContainerStyle,\n} from './tableStyles';\n\nconst recordContainerStyle: CSSProperties = {\n  ...borderBottom,\n  display: 'flex',\n  paddingBottom: 3,\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const RecordRow: FC<{\n  moduleNames: string[];\n  data: DataTable;\n  gridTitle: number | string;\n  entryTitle: string;\n}> = ({ moduleNames, data, gridTitle, entryTitle }) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: rowContainerStyle }}>\n      {moduleNames.map((moduleN) => {\n        const record = data[moduleN]?.[(gridTitle as unknown) as number]?.[entryTitle];\n\n        return (\n          <div\n            {...{\n              style: {\n                ...recordContainerStyle,\n                width: getRef(moduleN).getBoundingClientRect().width,\n              },\n            }}\n            key={moduleN}\n          >\n            <div {...{ style: recordNameStyle }}>\n              {`${entryTitle} `}\n              <span {...{ style: { fontStyle: 'italic' } }}>\n                {record ? `(${record.TTIs.length} tries)` : '(no data)'}\n              </span>\n            </div>\n            <div {...{ style: recordNumbersStyle }}>{record ? record.avTTI.toFixed(0) : '-'}</div>\n            <div {...{ style: recordNumbersStyle }}>{record ? record.avTBT.toFixed(0) : '-'}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { GridTitleRow } from './TableComponents/GridTitleRow';\nimport { ModulesRow } from './TableComponents/ModulesRow';\nimport { RecordRow } from './TableComponents/RecordRow';\n\nexport type DataTable<\n  M extends string = never,\n  G extends number = never,\n  D extends string = never\n> = PickRequired<\n  {\n    [P in string]?: ModuleEntry<G, D>;\n  },\n  M\n>;\n\nexport type ModuleEntry<G extends number = never, D extends string = never> = PickRequired<\n  {\n    [P in number]?: GridEntry<D>;\n  },\n  G\n>;\n\nexport type GridEntry<D extends string = never> = PickRequired<\n  {\n    [P in string]?: Data;\n  },\n  D\n>;\n\nexport type PickRequired<T, K> = T & { [P in keyof T & K]: {} };\n\nexport interface Data {\n  TTIs: number[];\n  TBTs: number[];\n  avTTI: number;\n  avTBT: number;\n}\n\nconst recordsContainerStyle: CSSProperties = { padding: 0, margin: '0 0 15px' };\n\nexport const InterpretData: FC<{ data: DataTable; recordsOrder: string[] }> = ({\n  data,\n  recordsOrder,\n}) => {\n  const moduleNames = Object.keys(data);\n\n  const gridSizesTable = moduleNames.reduce((gridSizesT, m) => {\n    const moduleTable = (data as DataTable<string>)[m];\n\n    return Object.keys(moduleTable).reduce(\n      (gST, g) => ({\n        ...gST,\n        [g]: eliminateDuplicates(\n          ...(gST[g] ?? []),\n          ...Object.keys((moduleTable as ModuleEntry<number>)[(g as unknown) as number])\n        ),\n      }),\n      gridSizesT\n    );\n  }, {} as { [P in string]?: string[] });\n\n  return (\n    <div {...{ style: { display: 'flex', flexDirection: 'column' } }}>\n      <ModulesRow {...{ moduleNames }} />\n      {Object.entries(gridSizesTable as { [P in string]: string[] }).map(\n        ([gridTitle, entryTitles]) => [\n          <GridTitleRow {...{ moduleNames, gridTitle }} key={gridTitle} />,\n\n          <div {...{ style: recordsContainerStyle }} key={`list-${gridTitle}`}>\n            {(recordsOrder.length\n              ? recordsOrder.reduce(\n                  (ordered, gauge) => [\n                    ...ordered,\n                    ...entryTitles.filter((t) => RegExp(gauge).test(t)).sort(),\n                  ],\n                  [] as string[]\n                )\n              : entryTitles.sort()\n            ).map((entryTitle) => (\n              <RecordRow {...{ moduleNames, data, gridTitle, entryTitle }} key={entryTitle} />\n            ))}\n          </div>,\n        ]\n      )}\n    </div>\n  );\n};\n\nfunction eliminateDuplicates(...arr: string[]): string[] {\n  return [...new Set(arr)];\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = {\n  borderBottom: '25px solid',\n  borderLeft: '15px solid transparent',\n  borderRight: '15px solid transparent',\n  boxSizing: 'content-box',\n  height: 0,\n  width: 50,\n  textAlign: 'center',\n  fontWeight: 500,\n  cursor: 'default',\n  userSelect: 'none',\n};\n\nexport const TabHeader: FC<{\n  name: string;\n  color: string;\n  onClick: () => void;\n  addStyle?: CSSProperties;\n}> = ({ name, color, onClick, addStyle = {} }) => (\n  <div\n    {...{\n      style: { ...style, ...addStyle, borderBottomColor: color },\n      role: 'button',\n      tabIndex: 0,\n      onClick,\n    }}\n    onKeyPress={onClick}\n  >\n    {name}\n  </div>\n);\n","import { CONTROL_ACTIONS_ORDER } from '@compare-react-state-management-solutions/control-panel';\nimport { useGetDataPool } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { createProcessData, NotCountFirstMeasureOptions } from './createProcessData';\nimport { InterpretData } from './InterpretData';\nimport { TabHeader } from './TabHeader';\n\nexport const TAB_HEADER_HEIGHT = 25;\n\nconst PANEL_COLOR = 'yellow';\nconst PANEL_HEIGHT = '50vh';\n\nconst exteriorContainerStyle: CSSProperties = {\n  height: 0,\n};\n\nconst mainContainerBaseStyle: CSSProperties = {\n  position: 'relative',\n};\n\nconst commonBoxBaseStyle: CSSProperties = { backgroundColor: PANEL_COLOR };\nconst collapsedBoxStyle: CSSProperties = { ...commonBoxBaseStyle, height: 0, overflow: 'hidden' };\n\nconst expandedBoxStyle: CSSProperties = {\n  ...commonBoxBaseStyle,\n  padding: '10px 0',\n  height: PANEL_HEIGHT,\n  overflow: 'auto',\n};\n\nexport type InfoPanelOptions = NotCountFirstMeasureOptions;\n\nexport const InfoPanel: FC<{\n  recordsOrder?: string[];\n  options?: InfoPanelOptions;\n  zIndex?: number;\n}> = ({\n  recordsOrder = CONTROL_ACTIONS_ORDER,\n  options = { notCountFirstMeasure: false },\n  zIndex = 0,\n}) => {\n  const [collapsed, setCollapsed] = useState(true);\n  const { getDataPool } = useGetDataPool();\n  const [{ processData }] = useState(createProcessData);\n  const processedData = processData(getDataPool(), options);\n  const scrollWidth = document.documentElement.scrollWidth;\n  const clientWidth = document.documentElement.clientWidth;\n  const calcWidth = scrollWidth > clientWidth ? scrollWidth : '100%';\n\n  return (\n    <div {...{ style: exteriorContainerStyle }}>\n      {Object.entries(processedData).length === 0 || (\n        <div\n          {...{\n            style: {\n              ...mainContainerBaseStyle,\n              zIndex,\n              width: calcWidth,\n              bottom: collapsed\n                ? TAB_HEADER_HEIGHT + 1 - calculateScrollBarHeight()\n                : `calc(${PANEL_HEIGHT} + ${TAB_HEADER_HEIGHT}px - ${calculateScrollBarHeight().toFixed(\n                    0\n                  )}px`,\n            },\n          }}\n        >\n          <TabHeader\n            {...{\n              name: 'stat',\n              color: PANEL_COLOR,\n              addStyle: { margin: '0 auto', transform: 'translateY(1px)' },\n              onClick: () => {\n                setCollapsed((prevState) => !prevState);\n              },\n            }}\n          />\n          <div {...{ style: collapsed ? collapsedBoxStyle : expandedBoxStyle }}>\n            <InterpretData {...{ data: processedData, recordsOrder }} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction calculateScrollBarHeight(): number {\n  const { documentElement } = document;\n  documentElement.style.overflowX = 'scroll';\n  const heightWhenScroll = documentElement.clientHeight;\n  documentElement.style.overflowX = 'auto';\n  const actualHeight = documentElement.clientHeight;\n\n  return actualHeight - heightWhenScroll;\n}\n","import {\n  BlockingSpinner,\n  PerfInfoProvider,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { App as RecoilApp } from '@compare-react-state-management-solutions/recoil-component';\nimport { App as ReduxHooksApp } from '@compare-react-state-management-solutions/redux-hooks-component';\nimport { App as UseInterstateApp } from '@compare-react-state-management-solutions/use-interstate-component';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { version } from '../package.json';\nimport { InfoPanel, TAB_HEADER_HEIGHT } from './internal_packages/info-panel/InfoPanel';\n\nconst DEF_GRID_SIZE = 32;\n\nconst outerContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n};\n\nconst mainContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  paddingBottom: TAB_HEADER_HEIGHT,\n};\n\nconst versionInfoStyle: CSSProperties = { margin: '5px 0 0 10px', fontWeight: 'bold' };\n\nconst appContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexGrow: 1,\n  marginRight: 30,\n};\n\nexport const AppInFlexBox: FC = () => {\n  const [viewportHeight, setViewportHeight] = useState<number | null>(null);\n\n  const calculateViewportHeight = (element: HTMLDivElement | null) => {\n    if (viewportHeight === null && element) {\n      const { documentElement } = document;\n      documentElement.style.overflowX = 'scroll';\n      setViewportHeight(documentElement.clientHeight);\n      documentElement.style.overflowX = 'auto';\n    }\n  };\n\n  return viewportHeight === null ? (\n    <div {...{ style: { visibility: 'hidden' }, ref: calculateViewportHeight }} />\n  ) : (\n    <PerfInfoProvider>\n      <div {...{ style: outerContainerStyle }}>\n        <div\n          {...{\n            style: { ...mainContainerStyle, height: viewportHeight },\n          }}\n        >\n          <div {...{ style: versionInfoStyle }}>{`v.${version}`}</div>\n\n          <div {...{ style: appContainerStyle }}>\n            <ReduxHooksApp {...{ defGridSize: DEF_GRID_SIZE }} />\n            <RecoilApp {...{ defGridSize: DEF_GRID_SIZE }} />\n            <UseInterstateApp {...{ defGridSize: DEF_GRID_SIZE }} />\n          </div>\n\n          <BlockingSpinner {...{ zIndex: 10 }} />\n        </div>\n\n        <InfoPanel\n          {...{\n            options: { notCountFirstMeasure: true },\n            zIndex: 20,\n          }}\n        />\n      </div>\n    </PerfInfoProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppInFlexBox } from './AppInFlexBox';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppInFlexBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { FC } from 'react';\nimport { cloneElement, useEffect, useState } from 'react';\nimport { createObserverCallback } from './createObserverCallback';\nimport type {\n  EffectCallback,\n  MeasurementStatus,\n  MeasurePerformance,\n  MeasurePerformanceSettings,\n  MetricConsumerProps,\n  PerfMetric,\n  PerfMetricReturn,\n  PerfMetricSettings,\n  UsePerfMetric,\n  WrapMetricConsumerProps,\n} from './PerfMetricTypes';\n\nconst defSettings: Required<PerfMetricSettings> = {\n  measureFromCreated: false,\n  measureAtEffectStage: false,\n  id: 'start-use-perf-metrics',\n};\n\nconst initialStatus: MetricConsumerProps & { status: 'never' } = { status: 'never', data: null };\n\nconst pendingStatus: MetricConsumerProps & { status: 'pending' } = {\n  status: 'pending',\n  data: null,\n};\n\nconst errorStatus: Omit<MetricConsumerProps & { status: 'error' }, 'error'> = {\n  status: 'error',\n};\n\nconst errorDoesNotSupport = Error('(usePerfMetrics) The browser does not support the library');\n\nconst createUsePerfMetricReturn = (\n  settings: PerfMetricSettings\n): { perfMetricReturn: PerfMetricReturn; useBody: () => void } => {\n  const { supportedEntryTypes = null } = global.PerformanceObserver ?? null;\n\n  const isSupported =\n    supportedEntryTypes &&\n    supportedEntryTypes.includes('mark') &&\n    supportedEntryTypes.includes('longtask');\n\n  const actualSettings = { ...defSettings, ...eliminateUndefinedRecords(settings) };\n  const { measureFromCreated, id: mainDefinedID } = actualSettings;\n  let isFirstRun = true;\n  let useEffectRegistered = false;\n\n  /**\n   * While WrapMetric is rendering first time its child component receives status ('pending' if\n   * measureFromCreated set true and 'never' otherwise) at useState stage. In order to avoid\n   * increasing complexity variable setChildrenProps holds the placeholder function that could be\n   * called with no side effect at the same stage when useState in WrapMetrics returns props for\n   * the child. Later setChildrenProps holds the method that is a setter returned from that useState\n   * responsible for updating MetricConsumer's props.\n   */\n  let setChildrenProps: (result: MetricConsumerProps) => void = () => undefined;\n  let startOnEffect: (() => void) | null = null;\n\n  const useBody = (): void => {\n    useEffect(() => {\n      useEffectRegistered = true;\n    }, []);\n  };\n\n  const postErrorStatus = (error: Error): void => setChildrenProps({ ...errorStatus, error });\n\n  const postCalculatedData = (result: PerfMetric): void =>\n    setChildrenProps({ status: 'done', data: result });\n\n  const isFirstRunOrUseEffectRegistered = (): boolean => {\n    const result = isFirstRun || useEffectRegistered;\n    isFirstRun = false;\n\n    return result;\n  };\n\n  const measurePerformance = (measureSettings: MeasurePerformanceSettings = {}) => {\n    const { id } = { id: mainDefinedID, ...measureSettings };\n    const perfMarkName = getNextKey(id);\n\n    const observer =\n      isSupported &&\n      new PerformanceObserver(\n        createObserverCallback(\n          perfMarkName,\n          postErrorStatus,\n          postCalculatedData,\n          isFirstRunOrUseEffectRegistered\n        )\n      );\n\n    isSupported && setChildrenProps(pendingStatus);\n\n    measureSettings.measureAtEffectStage\n      ? (startOnEffect = () => {\n          startMeasurement();\n          measureSettings.callback?.();\n        })\n      : startMeasurement();\n\n    function startMeasurement() {\n      if (observer) {\n        observer.observe({ entryTypes: ['mark', 'longtask'] });\n        performance.mark(perfMarkName);\n      }\n    }\n  };\n\n  const WrapMetricConsumer: FC<WrapMetricConsumerProps> = ({ children: nestedComponent }) => {\n    const [childrenProps, _setChildrenProps] = useState((): MetricConsumerProps => {\n      if (isSupported) {\n        if (measureFromCreated) {\n          measurePerformance(actualSettings);\n\n          return pendingStatus;\n        }\n\n        return initialStatus;\n      }\n\n      return { ...errorStatus, error: errorDoesNotSupport };\n    });\n\n    setChildrenProps = _setChildrenProps;\n\n    useEffect(() => {\n      if (startOnEffect) {\n        startOnEffect();\n        startOnEffect = null;\n      }\n    });\n\n    useEffect(\n      () => () => {\n        setChildrenProps = () => undefined;\n      },\n      []\n    );\n\n    return cloneElement(nestedComponent, childrenProps);\n  };\n\n  const perfMetricReturn = { WrapMetricConsumer, measurePerformance };\n\n  return { perfMetricReturn, useBody };\n};\n\ntype OnlyDefinedRecords<O> = O extends {} ? { [P in keyof O]-?: O[P] } : never;\n\nexport const usePerfMetric = ((settings: PerfMetricSettings = {}): PerfMetricReturn => {\n  const [{ perfMetricReturn, useBody }] = useState(() => createUsePerfMetricReturn(settings));\n  useBody();\n\n  return perfMetricReturn;\n}) as UsePerfMetric;\n\nfunction eliminateUndefinedRecords<O extends {}>(obj: O): OnlyDefinedRecords<O> {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([_, val]) => val !== undefined)\n  ) as OnlyDefinedRecords<O>;\n}\n\nexport type {\n  PerfMetric,\n  MeasurementStatus,\n  MetricConsumerProps,\n  PerfMetricReturn,\n  PerfMetricSettings,\n  MeasurePerformanceSettings,\n  EffectCallback,\n  MeasurePerformance,\n  WrapMetricConsumerProps,\n};\n"],"sourceRoot":""}