{"version":3,"sources":["internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/reusable-components/InputField.tsx","component_packages/recoil-implementation/reusable-components/Spinner.tsx","component_packages/recoil-implementation/reusable-components/DelayedInput.tsx","component_packages/recoil-implementation/controls/ChooseGrid.tsx","component_packages/recoil-implementation/reusable-components/Button.tsx","component_packages/recoil-implementation/controls/styles.ts","component_packages/recoil-implementation/controls/DisableEnableButtons.tsx","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/controls/MassivePaintButton.tsx","component_packages/recoil-implementation/controls/RandomPaintButton.tsx","component_packages/recoil-implementation/controls/RepaintButton.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-connect-implementation/State/StateInterface.ts","component_packages/redux-connect-implementation/State/State.ts","component_packages/redux-connect-implementation/helpers/getNextAtom.ts","component_packages/redux-connect-implementation/reusable-components/InputField.tsx","component_packages/redux-connect-implementation/reusable-components/Spinner.tsx","component_packages/redux-connect-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-connect-implementation/State/selectors.ts","component_packages/redux-connect-implementation/controls/ChooseGrid.tsx","component_packages/redux-connect-implementation/State/actionTypes.ts","component_packages/redux-connect-implementation/reusable-components/Button.tsx","component_packages/redux-connect-implementation/State/actions.ts","component_packages/redux-connect-implementation/controls/styles.ts","component_packages/redux-connect-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-connect-implementation/State/storeKeysMethods.ts","component_packages/redux-connect-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-connect-implementation/controls/MassivePaintButton.tsx","component_packages/redux-connect-implementation/State/reducer.ts","component_packages/redux-connect-implementation/controls/RandomPaintButton.tsx","component_packages/redux-connect-implementation/controls/RepaintButton.tsx","component_packages/redux-connect-implementation/pixels-components/Pixel.tsx","component_packages/redux-connect-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-connect-implementation/State/store.ts","component_packages/redux-connect-implementation/App.tsx","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/helpers/getNextAtom.ts","component_packages/redux-hooks-implementation/reusable-components/InputField.tsx","component_packages/redux-hooks-implementation/reusable-components/Spinner.tsx","component_packages/redux-hooks-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/controls/ChooseGrid.tsx","component_packages/redux-hooks-implementation/State/actionTypes.ts","component_packages/redux-hooks-implementation/reusable-components/Button.tsx","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/controls/styles.ts","component_packages/redux-hooks-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/controls/MassivePaintButton.tsx","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/controls/RandomPaintButton.tsx","component_packages/redux-hooks-implementation/controls/RepaintButton.tsx","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/use-interstate-implementation/helpers/getNextAtom.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/reusable-components/InputField.tsx","component_packages/use-interstate-implementation/reusable-components/Spinner.tsx","component_packages/use-interstate-implementation/reusable-components/DelayedInput.tsx","component_packages/use-interstate-implementation/controls/ChooseGrid.tsx","component_packages/use-interstate-implementation/reusable-components/Button.tsx","component_packages/use-interstate-implementation/controls/styles.ts","component_packages/use-interstate-implementation/controls/DisableEnableButtons.tsx","component_packages/use-interstate-implementation/State/storeAtomsMethods.ts","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/controls/MassivePaintButton.tsx","component_packages/use-interstate-implementation/controls/RandomPaintButton.tsx","component_packages/use-interstate-implementation/controls/RepaintButton.tsx","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","App.tsx","index.js"],"names":["style","display","width","height","fontSize","color","padding","backgroundColor","borderRadius","justifyContent","PerformanceInfo","data","status","TTI","TBT","Math","round","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","clearTimeout","scheduleNext","setTimeout","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","children","updateStartMeasureCallback","measureFromCreating","name","useState","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","useRef","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","props","observe","entryTypes","longTasksList","getEntriesByType","every","task","info","performance","mark","createObserver","conditionalObserverResult","current","useEffect","callback","useMemo","cloneElement","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","range","getRandomColor","calcColor","parseInt","slice","random","toString","padStart","getNextAtom","defaultValue","atom","key","default","choiceForPixelPlaceholderKey","colorForAlternativePlaceholderKey","alternativeForChoicePlaceholderKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceAtoms","map","c","createFreshKey","InputField","label","onChange","value","addStyle","type","baseStyle","marginRight","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","useMultiState","inputValue","showSpin","inputState","setInputState","alignItems","e","input","target","records","activeTimeoutId","waitDelay","ChooseGrid","beAwareWhenChosen","gridSize","useRecoilValue","WrapDisplay","startMeasure","nextGridSize","marginBottom","Button","calcStyle","onClick","buttonContainerStyle","margin","DisableEnableButtons","setActiveChoice","useSetRecoilState","manageAlternativesState","useRecoilState","perfMeasureAssets","i","evenOrOdd","prevAtom","storeAtoms","storeAtomsMethods","newAtom","push","drawPixelToPaint","totalNumber","randomIndex","floor","atomToSet","Error","renderInfoContainerStyle","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","MassivePaintButton","percentInput","setPercentInput","pixelsToPaint","setPixelsToPaint","prevPixels","checkPercent","percent","allPixelsNumber","pixelsNumberToPaint","pixelsAtoms","a","RandomPaintButton","atomToPaint","setAtomToPaint","paintRandomPixel","prev","RepaintButton","alternatives","colorsState","activeChoice","prevColor","nextPotentialChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","Array","fill","PixelsStage","lines","setLines","flexGrow","ref","getBoundingClientRect","currentLine","_App","refreshKey","createKey","setAlternatives","setGridSize","setter","useRefreshApp","commandToCreateRefreshKey","flexDirection","borderTop","App","alternativeForChoiceKeys","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","defInitialState","rememberActiveChoice","getChoiceForPixel","state","getColorForAlternative","getAlternativeForChoice","getGridSize","ActionType","connect","switchPixelChoiceAction","pixel","SWITCH_PIXEL_CHOICE","payload","switchAlternatives","alternativeOfChoice","SWITCH_ALTERNATIVES","storeKeys","storeKeysMethods","newKey","initialState","switchPixelChoice","forEach","p","pixels","repaintRow","REPAINT_ROW","altControl","ControlPixelInner","possibleAltControl","createPixel","CREATE_NEW_PIXEL_ENTRY","nextKey","appReducer","action","CHOOSE_GRID","REMEMBER_ACTIVE_CHOICE","TURN_ON_ALTERNATIVE","prevValue","colorForAlternativeForChoiceEntry","alternative","initializeState","reduce","entries","store","createStore","provideStore","setNewKey","useCreateStore","commandToCreateFreshStore","useSelector","dispatch","useDispatch","getEvenOrOddRowSwitch","createNewPixelEntryAction","gridSizeKey","rememberActiveChoiceKey","createAlternativeForChoiceAtoms","k","storedAtoms","addAtoms","atoms","record","getAtom","getUseInterstate","useInterstate","Scope","setAlternativesOfChoices","alternativesRecord","setColors","both","appsContainerStyle","fontWeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d96b2d32.chunk.js","sourcesContent":["import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<Required<MetricsComponentProps>>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps((props) => ({ ...props, status: 'error' }));\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps((info) => ({ ...info, status: 'pending' }));\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from 'get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<Required<MetricsComponentProps>>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return { data: null, status: 'error' };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps((info) => ({ ...info, status: 'pending' }));\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => {});\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","const range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import { getNextKey } from 'get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return atom({ key: getNextKey(prefix), default: defaultValue });\n}\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\nexport interface CarryAtom<K extends keyof State> {\n  atom: Atom<K>;\n}\n\nexport type CarryAtomColorForAlternative = CarryAtom<ColorForAlternative> | null;\n\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: CarryAtomColorForAlternative;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getNextKey } from 'get-next-key';\nimport { getRandomColor } from 'random-color';\nimport { useState } from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { atom, useSetRecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  Atom,\n  CarryAtomColorForAlternative,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): Atom<ColorForAlternative> {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativePlaceholderKey,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport const gridSizeAtom = atom({ key: gridSizeKey, default: DEF_GRID_SIZE });\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nexport const alternativeForChoiceAtoms = (([0, 1] as const).map((c) =>\n  atom({\n    key: `${alternativeForChoicePlaceholderKey}-${c}`,\n    default: { atom: createColorForAlternativeAtom(c) },\n  })\n) as readonly AlternativeForChoiceAtom[]) as readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n];\n\nexport function createAlternativeForChoiceAtoms(): readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] {\n  return (([0, 1] as const).map((c) =>\n    atom({\n      key: `${alternativeForChoicePlaceholderKey}-${c}`,\n      default: { atom: createColorForAlternativeAtom(c) },\n    })\n  ) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useRefreshApp(): [string, ({ gridSize }: { gridSize: number }) => void] {\n  const [refreshKey, createKey] = useState(createFreshKey);\n  const setAlternatives = (alternativeForChoiceAtoms.map((a) =>\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useSetRecoilState(a)\n  ) as readonly SetterOrUpdater<CarryAtomColorForAlternative>[]) as readonly [\n    SetterOrUpdater<CarryAtomColorForAlternative>,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n  const setGridSize = useSetRecoilState(gridSizeAtom);\n\n\n  function commandToCreateRefreshKey({ gridSize }: { gridSize: number }) {\n    setAlternatives.every((setter, i) =>\n      setter({ atom: createColorForAlternativeAtom(i as PixelChoice) })\n    );\n\n    setGridSize(gridSize);\n    createKey(createFreshKey);\n  }\n\n  return [refreshKey, commandToCreateRefreshKey];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { gridSizeAtom } from '../State/State';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  createColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtom,\n  CarryAtomColorForAlternative,\n  ColorForAlternative,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  type ManageAlternativesState = [\n    CarryAtomColorForAlternative,\n    SetterOrUpdater<CarryAtomColorForAlternative>\n  ];\n\n  const manageAlternativesState = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilState(atom)\n  ) as readonly ManageAlternativesState[]) as readonly [\n    ManageAlternativesState,\n    ManageAlternativesState\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      const prevAtom = manageAlternativesState[evenOrOdd][0];\n\n      perfMeasureAssets[evenOrOdd][1]();\n\n      if (!prevAtom) {\n        setActiveChoice(evenOrOdd);\n        manageAlternativesState[evenOrOdd][1]({\n          atom: createColorForAlternativeAtom(evenOrOdd),\n        } as CarryAtom<ColorForAlternative>);\n      } else {\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        manageAlternativesState[evenOrOdd][1](null);\n      }\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { SetterOrUpdater } from 'recoil';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type {\n  CarryAtomColorForAlternative,\n  ColorValue,\n  PixelChoice,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternatives = (alternativeForChoiceAtoms.map((atom) =>\n    useRecoilValue(atom)\n  ) as readonly CarryAtomColorForAlternative[]) as readonly [\n    CarryAtomColorForAlternative,\n    CarryAtomColorForAlternative\n  ];\n\n  type ManageColorsState = [ColorValue, SetterOrUpdater<ColorValue>];\n  const colorsState = ([0, 1].map((i) =>\n    useRecoilState(alternatives[i]?.atom ?? colorForAlternativePlaceholderAtom)\n  ) as readonly ManageColorsState[]) as readonly [ManageColorsState, ManageColorsState];\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshApp } from './State/State';\n\n// eslint-disable-next-line no-underscore-dangle\nconst _App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <div\n      {...{\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '10px auto 10px 10px',\n        },\n        key: refreshKey,\n      }}\n    >\n      <PixelsStage />\n      <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n        <div {...{ style: { margin: '0 0 10px' } }}>\n          <strong>Implemented using &apos;recoil&apos; library</strong>\n        </div>\n        <RepaintButton />\n        <DisableEnableButtons />\n        <RandomPaintButton />\n        <MassivePaintButton />\n        <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n        <ChooseGrid {...{ beAwareWhenChosen: commandToCreateRefreshKey }} />\n      </div>\n    </div>\n  );\n};\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    {/* eslint-disable-next-line react/jsx-pascal-case */}\n    <_App />\n  </RecoilRoot>\n);\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  colorForAlternativePlaceholderKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nfunction createColorForAlternativeAtom(choice: PixelChoice) {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport function createColorForAlternativeForChoiceEntry(\n  choice: PixelChoice\n): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  const [colorForAlternativeKey, color] = createColorForAlternativeAtom(choice);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n}\n\nexport const defInitialState: Readonly<Partial<State>> = { rememberActiveChoice: 0 };\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport React, { CSSProperties, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getGridSize } from '../State/selectors';\nimport type { State } from '../State/StateInterface';\n\nexport const ChooseGrid = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function ChooseGrid({ addStyle = {}, beAwareWhenChosen, gridSize }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n    function inputCallback(input: string) {\n      startMeasure();\n      const nextGridSize = parseInt(input, 10) || gridSize;\n      beAwareWhenChosen({ gridSize: nextGridSize });\n    }\n\n    return (\n      <div {...{ style: addStyle }}>\n        <DelayedInput\n          {...{\n            label: 'input grid size: ',\n            inputCallback,\n            value: `${gridSize}`,\n            addStyle: { marginBottom: '2px' },\n          }}\n        />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{\n    addStyle?: CSSProperties;\n    beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n    gridSize: number;\n  }>\n);\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: ActionType.CREATE_NEW_PIXEL_ENTRY;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: ActionType.SWITCH_PIXEL_CHOICE; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID\n      ? { type: ActionType.CHOOSE_GRID; payload: { gridSize: number } }\n      : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: ActionType.REMEMBER_ACTIVE_CHOICE; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE\n      ? { type: ActionType.TURN_ON_ALTERNATIVE; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES\n      ? { type: ActionType.SWITCH_ALTERNATIVES; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: ActionType.REPAINT_ROW } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { choice: alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { choice: alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons = connect(null, {\n  switchAlternatives: switchAlternativeAction,\n})(function DisableEnableButtons({ switchAlternatives }) {\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      switchAlternatives(evenOrOdd);\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n} as FC<{\n  switchAlternatives: (activeChoice: PixelChoice) => void;\n}>);\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function MassivePaintButton({ gridSize, switchPixelChoice }) {\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ChoiceForPixel[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    pixelsToPaint.forEach((p) => switchPixelChoice(p));\n    setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels));\n  }, [pixelsToPaint, switchPixelChoice]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixels: ChoiceForPixel[] = [];\n\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let pixel: ChoiceForPixel;\n      do {\n        pixel = drawPixelToPaint(allPixelsNumber);\n      } while (pixels.includes(pixel));\n      pixels.push(pixel);\n    }\n\n    setPixelsToPaint(pixels);\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import { getRandomColor } from 'random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  defInitialState,\n} from './State';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initialState: Readonly<Partial<State>>;\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n      const prevChoice = state[pixel];\n\n      return { ...state, [pixel]: (1 - prevChoice) as PixelChoice };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n        };\n      }\n\n      return state;\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n          rememberActiveChoice: choice,\n        };\n      }\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[choice]]: null,\n        rememberActiveChoice: (1 - choice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction createSetOfEntries(): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as Pick<State, ColorForAlternative | AlternativeForChoice>\n  );\n}\n\nexport function initializeState(gridSize: number): void {\n  initialState = { ...defInitialState, gridSize, ...createSetOfEntries() };\n}\n","import { PerformanceInfo } from 'performance-info';\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function RandomPaintButton({ gridSize, switchPixelChoice }) {\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    switchPixelChoice(drawPixelToPaint(gridSize ** 2));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton = connect(null, { repaintRow: repaintRowAction })(\n  function RepaintButton({ repaintRow }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver();\n\n    function repaintCallback() {\n      startMeasure();\n      repaintRow();\n    }\n\n    return (\n      <div {...{ style: buttonContainerStyle }}>\n        <Button {...{ callback: repaintCallback, name: 're-paint' }} />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{ repaintRow: () => void }>\n);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, ColorValue, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel = connect(\n  (state: State, { altControl }: { altControl: ColorForAlternative }) => ({\n    color: getColorForAlternative(state, altControl),\n  })\n)(function Pixel({ color }) {\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n} as FC<{ color: ColorValue }>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type {\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nconst ControlPixelInner = connect(\n  (state: State, { choiceForPixel }: { choiceForPixel: ChoiceForPixel }) => ({\n    possibleAltControl: getAlternativeForChoice(\n      state,\n      alternativeForChoiceKeys[getChoiceForPixel(state, choiceForPixel)]\n    ),\n  })\n)(function ControlPixelInner({ possibleAltControl }) {\n  return possibleAltControl ? <Pixel {...{ altControl: possibleAltControl }} /> : null;\n} as FC<{\n  possibleAltControl: ColorForAlternative | null;\n}>);\n\nexport const ControlPixel = connect(null, {\n  createPixel: createNewPixelEntryAction,\n})(function ControlPixel({ pixelSize, defChoice, createPixel }) {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    createPixel(nextKey, defChoice);\n    storeKeysMethods.push(nextKey);\n    setChoiceForPixel(nextKey);\n  }, [createPixel, defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {choiceForPixel === choiceForPixelPlaceholderKey ? null : (\n        <ControlPixelInner {...{ choiceForPixel }} />\n      )}\n    </div>\n  );\n} as FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n  createPixel: (pixel: ChoiceForPixel, choice: PixelChoice) => void;\n}>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice, State } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function PixelsStage({ gridSize }) {\n    const [lines, setLines] = useState<ReactElement | null>(null);\n\n    const ref = (e: HTMLDivElement | null) => {\n      if (e && !lines) {\n        const { height } = e.getBoundingClientRect();\n        const pixelSize = `${height / gridSize}px`;\n        let currentLine: ReactElement | null = null;\n\n        for (let i = 0; i < gridSize; i++) {\n          currentLine = (\n            <PixelsLine\n              {...{\n                length: gridSize,\n                pixelSize,\n                defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n              }}\n            >\n              {currentLine}\n            </PixelsLine>\n          );\n        }\n\n        storeKeysMethods.reset();\n        setLines(currentLine);\n      }\n    };\n\n    return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n  } as FC<{ gridSize: number }>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport { getNextKey } from 'get-next-key';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport { DEF_GRID_SIZE } from './State';\nimport type { State } from './StateInterface';\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useCreateStore(): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  ({ gridSize }: { gridSize: number }) => void\n] {\n  const [{ store, refreshKey }, { store: provideStore, refreshKey: setNewKey }] = useMultiState<{\n    store: Store<State, ActionReturn<ActionType>>;\n    refreshKey: string;\n  }>({\n    store: () => {\n      initializeState(DEF_GRID_SIZE);\n\n      return createStore(appReducer);\n    },\n    refreshKey: createFreshKey,\n  });\n\n  function commandToCreateFreshStore({ gridSize }: { gridSize: number }): void {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  }\n\n  return [store, refreshKey, commandToCreateFreshStore];\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;react-redux&apos; (connect) library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshStore }} />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  colorForAlternativePlaceholderKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nfunction createColorForAlternativeAtom(choice: PixelChoice) {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport function createColorForAlternativeForChoiceEntry(\n  choice: PixelChoice\n): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  const [colorForAlternativeKey, color] = createColorForAlternativeAtom(choice);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n}\n\nexport const defInitialState: Readonly<Partial<State>> = { rememberActiveChoice: 0 };\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport React, { CSSProperties, FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getGridSize } from '../State/selectors';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useSelector(getGridSize);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface AlternativesPayloads {\n  choice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: ActionType.CREATE_NEW_PIXEL_ENTRY;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: ActionType.SWITCH_PIXEL_CHOICE; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID\n      ? { type: ActionType.CHOOSE_GRID; payload: { gridSize: number } }\n      : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: ActionType.REMEMBER_ACTIVE_CHOICE; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE\n      ? { type: ActionType.TURN_ON_ALTERNATIVE; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES\n      ? { type: ActionType.SWITCH_ALTERNATIVES; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: ActionType.REPAINT_ROW } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { choice: alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { choice: alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const dispatch = useDispatch();\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      dispatch(switchAlternativeAction(evenOrOdd));\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport type { ChoiceForPixel } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const dispatch = useDispatch();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ChoiceForPixel[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    pixelsToPaint.forEach((p) => dispatch(switchPixelChoiceAction(p)));\n    setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels));\n  }, [dispatch, pixelsToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixels: ChoiceForPixel[] = [];\n\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let pixel: ChoiceForPixel;\n      do {\n        pixel = drawPixelToPaint(allPixelsNumber);\n      } while (pixels.includes(pixel));\n      pixels.push(pixel);\n    }\n\n    setPixelsToPaint(pixels);\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n};\n","import { getRandomColor } from 'random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  defInitialState,\n} from './State';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initialState: Readonly<Partial<State>>;\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n      const prevChoice = state[pixel];\n\n      return { ...state, [pixel]: (1 - prevChoice) as PixelChoice };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n        };\n      }\n\n      return state;\n    }\n\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { choice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[choice]];\n\n      if (!prevValue) {\n        const colorForAlternativeForChoiceEntry = createColorForAlternativeForChoiceEntry(choice);\n\n        return {\n          ...state,\n          ...colorForAlternativeForChoiceEntry,\n          rememberActiveChoice: choice,\n        };\n      }\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[choice]]: null,\n        rememberActiveChoice: (1 - choice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction createSetOfEntries(): Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>> {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as Pick<State, ColorForAlternative | AlternativeForChoice>\n  );\n}\n\nexport function initializeState(gridSize: number): void {\n  initialState = { ...defInitialState, gridSize, ...createSetOfEntries() };\n}\n","import { PerformanceInfo } from 'performance-info';\nimport React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const dispatch = useDispatch();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const dispatch = useDispatch();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    dispatch(repaintRowAction());\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector((state: State) => getColorForAlternative(state, altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice, State } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{ pixelSize: string; defChoice: PixelChoice }> = ({\n  pixelSize,\n  defChoice,\n}) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n  const choice = useSelector((state: State) => getChoiceForPixel(state, choiceForPixel));\n  const possibleAltControl = useSelector((state: State) =>\n    getAlternativeForChoice(state, alternativeForChoiceKeys[choice])\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    storeKeysMethods.push(nextKey);\n    setChoiceForPixel(nextKey);\n  }, [defChoice, dispatch]);\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useSelector(getGridSize);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport { getNextKey } from 'get-next-key';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport { DEF_GRID_SIZE } from './State';\nimport type { State } from './StateInterface';\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useCreateStore(): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  ({ gridSize }: { gridSize: number }) => void\n] {\n  const [{ store, refreshKey }, { store: provideStore, refreshKey: setNewKey }] = useMultiState<{\n    store: Store<State, ActionReturn<ActionType>>;\n    refreshKey: string;\n  }>({\n    store: () => {\n      initializeState(DEF_GRID_SIZE);\n\n      return createStore(appReducer);\n    },\n    refreshKey: createFreshKey,\n  });\n\n  function commandToCreateFreshStore({ gridSize }: { gridSize: number }): void {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  }\n\n  return [store, refreshKey, commandToCreateFreshStore];\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;react-redux&apos; (hooks) library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateFreshStore }} />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternativePlaceholderKey = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternativePlaceholderKey;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternativeAtom | null;\n};\n\nexport const gridSizeKey = 'grid-size';\nexport type GridSize = typeof gridSizeKey;\ninterface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getUseInterstate } from '@smart-hooks/use-interstate';\nimport { getNextKey } from 'get-next-key';\nimport { getRandomColor } from 'random-color';\nimport { useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  Atom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativePlaceholderKey,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nexport function createColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternativePlaceholderKey}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nfunction createAlternativeForChoiceAtoms() {\n  return (alternativeForChoiceKeys.map((k, i) => [\n    k,\n    createColorForAlternativeAtom(i as PixelChoice),\n  ]) as readonly AlternativeForChoiceAtom[]) as readonly [\n    AlternativeForChoiceAtom,\n    AlternativeForChoiceAtom\n  ];\n}\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [colorForAlternativePlaceholderKey]: DEF_COLOR,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\nlet storedAtoms: State = { ...initialState };\n\nfunction addAtoms<K extends keyof State>(...atoms: Atom<K>[]): void {\n  atoms.forEach(([key, record]) => {\n    storedAtoms = { ...storedAtoms, [key]: record };\n  });\n}\n\naddAtoms(...createAlternativeForChoiceAtoms());\n\nexport function getAtom<K extends keyof State>(key: K): Atom<K> {\n  return [key, storedAtoms[key]] as [K, State[K]];\n}\n\nexport const { useInterstate, Scope } = getUseInterstate<State>();\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n\nexport function useRefreshApp(): [string, ({ gridSize }: { gridSize: number }) => void] {\n  const [refreshKey, createKey] = useState(createFreshKey);\n\n  function commandToCreateRefreshKey({ gridSize }: { gridSize: number }): void {\n    addAtoms([gridSizeKey, gridSize], ...createAlternativeForChoiceAtoms());\n    createKey(createFreshKey);\n  }\n\n  return [refreshKey, commandToCreateRefreshKey];\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { getAtom, useInterstate } from '../State/State';\nimport { gridSizeKey } from '../State/StateInterface';\n\nexport const ChooseGrid: FC<{\n  addStyle?: CSSProperties;\n  beAwareWhenChosen: ({ gridSize }: { gridSize: number }) => void;\n}> = ({ addStyle = {}, beAwareWhenChosen }) => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    const nextGridSize = parseInt(input, 10) || gridSize;\n    beAwareWhenChosen({ gridSize: nextGridSize });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${gridSize}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React from 'react';\nimport type { UsePerfMetricsReturn } from 'use-perf-observer';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeAtom,\n  getAtom,\n  useInterstate,\n} from '../State/State';\nimport type { ColorForAlternativeAtom, PixelChoice } from '../State/StateInterface';\nimport { rememberActiveChoiceKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useInterstate(...getAtom(rememberActiveChoiceKey)).set();\n\n  type SetColorForAlternativeAtom = SetInterstate<ColorForAlternativeAtom | null>;\n\n  const setAlternativesOfChoices = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).set()\n  ) as readonly SetColorForAlternativeAtom[]) as readonly [\n    SetColorForAlternativeAtom,\n    SetColorForAlternativeAtom\n  ];\n  const perfMeasureAssets = ([0, 1].map(() =>\n    usePerfObserver()\n  ) as readonly UsePerfMetricsReturn[]) as readonly [UsePerfMetricsReturn, UsePerfMetricsReturn];\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      setAlternativesOfChoices[evenOrOdd]((prevAtom) => {\n        if (!prevAtom) {\n          setActiveChoice(evenOrOdd);\n          return createColorForAlternativeAtom(evenOrOdd);\n        }\n\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n\n        return null;\n      });\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  reset: () => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { PerformanceInfo } from 'performance-info';\nimport type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useInterstate(...pixelChoiceAtom).set();\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import { PerformanceInfo } from 'performance-info';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey, gridSizeKey } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [atomToPaint, setAtomToPaint] = useState({ atom: getAtom(choiceForPixelPlaceholderKey) });\n  const paintRandomPixel = useInterstate(...atomToPaint.atom).set();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { SetInterstate } from '@smart-hooks/use-interstate';\nimport { PerformanceInfo } from 'performance-info';\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom, ColorValue, PixelChoice } from '../State/StateInterface';\nimport {\n  colorForAlternativePlaceholderKey,\n  rememberActiveChoiceKey,\n} from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternativesRecord = (alternativeForChoiceKeys.map((key) =>\n    useInterstate(...getAtom(key)).get()\n  ) as readonly (ColorForAlternativeAtom | null)[]) as readonly [\n    ColorForAlternativeAtom | null,\n    ColorForAlternativeAtom | null\n  ];\n  const setColors = ([0, 1].map((i) =>\n    useInterstate(...(alternativesRecord[i] ?? getAtom(colorForAlternativePlaceholderKey))).set()\n  ) as readonly SetInterstate<ColorValue>[]) as readonly [\n    SetInterstate<ColorValue>,\n    SetInterstate<ColorValue>\n  ];\n  const [activeChoice, setActiveChoice] = useInterstate(...getAtom(rememberActiveChoiceKey)).both();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    setColors[activeChoice]((prevColor) => {\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n      if (alternativesRecord[nextPotentialChoice] !== null) {\n        setActiveChoice(nextPotentialChoice);\n      }\n      if (alternativesRecord[activeChoice] !== null) {\n        return getRandomColor(prevColor);\n      }\n      return prevColor;\n    });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useInterstate(...altControlAtom).get();\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceKeys, getAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixelAtom>(\n    getAtom(choiceForPixelPlaceholderKey)\n  );\n  const choice = useInterstate(...choiceForPixel).get();\n  const possibleStateAtom = useInterstate(...getAtom(alternativeForChoiceKeys[choice])).get();\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, [defChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlAtom: possibleStateAtom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { getAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useInterstate(...getAtom(gridSizeKey)).get();\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { Scope, useRefreshApp } from './State/State';\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n\n  return (\n    <Scope {...{ key: refreshKey }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;use-interstate&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid {...{ beAwareWhenChosen: commandToCreateRefreshKey }} />\n        </div>\n      </div>\n    </Scope>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { App as RecoilApp } from 'recoil-component';\nimport { App as ReduxConnectApp } from 'redux-connect-component';\nimport { App as ReduxHooksApp } from 'redux-hooks-component';\nimport { App as UseInterstateApp } from 'use-interstate-component';\n\nconst appsContainerStyle: CSSProperties = { display: 'flex' };\n\nexport const App: FC = () => (\n  <div {...{ style: { display: 'flex', flexDirection: 'column', height: 'calc(100vh - 20px)' } }}>\n    <div {...{ style: { margin: '5px 0 0 10px', fontWeight: 'bold' } }}>v.1.0.0</div>\n    <div {...{ style: { display: 'flex', flexGrow: 1 } }}>\n      <div {...{ style: appsContainerStyle }}>\n        <RecoilApp />\n      </div>\n      <div {...{ style: appsContainerStyle }}>\n        <UseInterstateApp />\n      </div>\n      <div {...{ style: appsContainerStyle }}>\n        <ReduxConnectApp />\n      </div>\n      <div {...{ style: appsContainerStyle }}>\n        <ReduxHooksApp />\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}