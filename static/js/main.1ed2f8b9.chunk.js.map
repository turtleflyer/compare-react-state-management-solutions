{"version":3,"sources":["internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/reusable-components/InputField.tsx","component_packages/recoil-implementation/reusable-components/Spinner.tsx","component_packages/recoil-implementation/reusable-components/DelayedInput.tsx","component_packages/recoil-implementation/reusable-components/PerformanceInfo.tsx","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/controls/ChooseGrid.tsx","component_packages/recoil-implementation/reusable-components/Button.tsx","component_packages/recoil-implementation/controls/styles.ts","component_packages/recoil-implementation/controls/DisableEnableButtons.tsx","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/controls/MassivePaintButton.tsx","component_packages/recoil-implementation/controls/RandomPaintButton.tsx","component_packages/recoil-implementation/controls/RepaintButton.tsx","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/use-interstate-implementation/helpers/getNextAtom.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/reusable-components/InputField.tsx","component_packages/use-interstate-implementation/reusable-components/Spinner.tsx","component_packages/use-interstate-implementation/reusable-components/DelayedInput.tsx","component_packages/use-interstate-implementation/reusable-components/PerformanceInfo.tsx","component_packages/use-interstate-implementation/State/storeAtomsMethods.ts","component_packages/use-interstate-implementation/controls/ChooseGrid.tsx","component_packages/use-interstate-implementation/reusable-components/Button.tsx","component_packages/use-interstate-implementation/controls/styles.ts","component_packages/use-interstate-implementation/controls/DisableEnableButtons.tsx","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/controls/MassivePaintButton.tsx","component_packages/use-interstate-implementation/controls/RandomPaintButton.tsx","component_packages/use-interstate-implementation/controls/RepaintButton.tsx","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","component_packages/redux-connect-implementation/State/StateInterface.ts","component_packages/redux-connect-implementation/State/State.ts","component_packages/redux-connect-implementation/helpers/getNextAtom.ts","component_packages/redux-connect-implementation/State/actionTypes.ts","component_packages/redux-connect-implementation/reusable-components/InputField.tsx","component_packages/redux-connect-implementation/reusable-components/Spinner.tsx","component_packages/redux-connect-implementation/reusable-components/DelayedInput.tsx","component_packages/redux-connect-implementation/reusable-components/PerformanceInfo.tsx","component_packages/redux-connect-implementation/State/actions.ts","component_packages/redux-connect-implementation/State/storeKeysMethods.ts","component_packages/redux-connect-implementation/controls/ChooseGrid.tsx","component_packages/redux-connect-implementation/reusable-components/Button.tsx","component_packages/redux-connect-implementation/controls/styles.ts","component_packages/redux-connect-implementation/controls/DisableEnableButtons.tsx","component_packages/redux-connect-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-connect-implementation/State/selectors.ts","component_packages/redux-connect-implementation/controls/MassivePaintButton.tsx","component_packages/redux-connect-implementation/controls/RandomPaintButton.tsx","component_packages/redux-connect-implementation/controls/RepaintButton.tsx","component_packages/redux-connect-implementation/pixels-components/Pixel.tsx","component_packages/redux-connect-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-connect-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-connect-implementation/State/store.ts","component_packages/redux-connect-implementation/State/reducer.ts","component_packages/redux-connect-implementation/App.tsx","App.tsx","index.js"],"names":["prefCountsRecords","Map","getNextKey","prefix","count","has","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","clearTimeout","scheduleNext","setTimeout","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","TTI","Math","max","TBT","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","children","updateStartMeasureCallback","measureFromCreating","name","useState","perfMarkName","data","status","childrenProps","setChildrenProps","firstTimeRunRec","useRef","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","props","observe","entryTypes","longTasksList","getEntriesByType","every","task","info","performance","mark","createObserver","conditionalObserverResult","current","useEffect","callback","useMemo","cloneElement","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","range","getRandomColor","color","calcColor","round","parseInt","slice","random","toString","padStart","getNextAtom","defaultValue","atom","key","default","choiceForPixel","colorForAlternative","DEF_COLOR","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","getNextColorForAlternativeAtom","choice","alternativeForChoiceAtoms","map","c","gridSizeAtom","rememberActiveChoiceAtom","InputField","label","onChange","value","width","addStyle","style","display","type","baseStyle","height","marginRight","borderRadius","backgroundColor","animationName","animationDuration","animationIterationCount","Spinner","toShow","animationDelay","DelayedInput","inputCallback","keepDelayedInputRecords","useMultiState","inputValue","showSpin","inputState","setInputState","alignItems","e","input","target","records","activeTimeoutId","waitDelay","fontSize","padding","justifyContent","PerformanceInfo","storeAtoms","curIndex","storeAtomsMethods","newAtom","push","i","ChooseGrid","setGridSize","useSetRecoilState","setActiveChoice","setAlternatives","WrapDisplay","startMeasure","forEach","prevState","marginBottom","Button","calcStyle","onClick","buttonContainerStyle","margin","DisableEnableButtons","alternativesState","useRecoilState","perfMeasureAssets","evenOrOdd","prevAtom","drawPixelToPaint","totalNumber","randomIndex","floor","atomToSet","Error","renderInfoContainerStyle","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","MassivePaintButton","gridSize","useRecoilValue","percentInput","setPercentInput","pixelsToPaint","setPixelsToPaint","prevPixels","checkPercent","percent","allPixelsNumber","pixelsNumberToPaint","pixelsAtoms","a","RandomPaintButton","atomToPaint","setAtomToPaint","paintRandomPixel","prev","RepaintButton","alternatives","colorsState","activeChoice","prevColor","nextPotentialChoice","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","setChoiceForPixel","possibleStateAtom","nextAtom","choiceForPixelPref","PixelsLine","line","Array","fill","PixelsStage","stageHeight","setStageHeight","lines","useSmartMemo","currentLine","flexGrow","ref","getBoundingClientRect","App","flexDirection","borderTop","useInterstate","getUseInterstate","alternativesRecord","setColors","both","choiceForPixelPlaceholderKey","ActionType","alternativeForChoiceKeys","colorForAlternativeForChoiceEntries","reduce","entries","alternativeForChoiceKey","colorForAlternativeKey","initialState","switchPixelChoiceAction","pixel","SWITCH_PIXEL_CHOICE","payload","storeKeys","storeKeysMethods","newKey","connect","CHOOSE_GRID","rememberActiveChoice","REMEMBER_ACTIVE_CHOICE","setAlternative","alternativeOfChoice","TURN_ON_ALTERNATIVE","switchAlternatives","SWITCH_ALTERNATIVES","getChoiceForPixel","state","getColorForAlternative","getAlternativeForChoice","getGridSize","switchPixelChoice","p","pixels","repaintRow","REPAINT_ROW","altControl","ControlPixelInner","possibleAltControl","SET_CHOICE_FOR_PIXEL","createPixel","CREATE_NEW_PIXEL_ENTRY","nextKey","store","createStore","action","prevValue","nextColorForAlternativeKey","nextColor","prevActiveChoice","alternative","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ed2f8b9.chunk.js","sourcesContent":["const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  let count = 0;\n  if (prefCountsRecords.has(prefix)) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    count = prefCountsRecords.get(prefix)! + 1;\n  }\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type { CreateObserverResult, Measures, MetricsComponentProps } from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<Required<MetricsComponentProps>>>,\n  updateStartMeasureCallback: (startMeasureCallback: () => void) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps((props) => ({ ...props, status: 'error' }));\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps((info) => ({ ...info, status: 'pending' }));\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from 'get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<Required<MetricsComponentProps>>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return { data: null, status: 'error' };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps((info) => ({ ...info, status: 'pending' }));\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  EventTimingType,\n  Measures,\n  MetricsComponentProps,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<(event?: EventTimingType) => void>(() => {});\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps };\n","const range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import { getNextKey } from 'get-next-key';\nimport { atom, RecoilState } from 'recoil';\nimport type { State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): RecoilState<D> {\n  return atom({ key: getNextKey(prefix), default: defaultValue });\n}\n","import type { RecoilState } from 'recoil';\n\nexport const choiceForPixel = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixel;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternative = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternative;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoice = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoice;\nexport interface CarryAtom<K extends keyof State> {\n  atom: Atom<K>;\n}\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: CarryAtom<ColorForAlternative> | null;\n};\n\nexport const gridSize = 'grid-size';\ninterface GridSizeState {\n  [gridSize]: number;\n}\n\nexport const rememberActiveChoice = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoice]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]> & { key: K };\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getRandomColor } from 'random-color';\nimport { atom, RecoilState } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  ColorValue,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoice,\n  choiceForPixel,\n  colorForAlternative,\n  gridSize,\n  rememberActiveChoice,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixel,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternative,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nexport function getNextColorForAlternativeAtom(choice: PixelChoice): RecoilState<ColorValue> {\n  return getNextAtom(\n    `${colorForAlternative}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\nexport const alternativeForChoiceAtoms = ([0, 1] as const).map(\n  (c) =>\n    atom({\n      key: `${alternativeForChoice}-${c}`,\n      default: { atom: getNextColorForAlternativeAtom(c) },\n    }) as AlternativeForChoiceAtom\n) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nexport const gridSizeAtom = atom({ key: gridSize, default: DEF_GRID_SIZE });\n\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoice, default: 0 });\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nconst storeAtoms = [] as ChoiceForPixelAtom[];\nlet curIndex = 0;\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  getNext: () => ChoiceForPixelAtom | undefined;\n  resetIndex: (i?: number) => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n  get(i) {\n    return storeAtoms[i];\n  },\n  getNext() {\n    return storeAtoms[curIndex++];\n  },\n  resetIndex(i = 0) {\n    curIndex = i;\n  },\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  DEF_GRID_SIZE,\n  getNextColorForAlternativeAtom,\n  gridSizeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type { CarryAtom, ColorForAlternative, PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{ addStyle?: CSSProperties }> = ({ addStyle = {} }) => {\n  const setGridSize = useSetRecoilState(gridSizeAtom);\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const setAlternatives = [0, 1].map((i) => useSetRecoilState(alternativeForChoiceAtoms[i]));\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.resetIndex();\n    setGridSize(parseInt(input, 10));\n    setActiveChoice(0);\n    setAlternatives.forEach((set, i) => {\n      set((prevState) => {\n        if (!prevState) {\n          return { atom: getNextColorForAlternativeAtom(i as PixelChoice) } as CarryAtom<\n            ColorForAlternative\n          >;\n        }\n        return prevState;\n      });\n    });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${DEF_GRID_SIZE}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  getNextColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type { CarryAtom, ColorForAlternative, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  const alternativesState = [0, 1].map((i) => useRecoilState(alternativeForChoiceAtoms[i]));\n  const perfMeasureAssets = [0, 1].map(() => usePerfObserver());\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      const prevAtom = alternativesState[evenOrOdd][0];\n      perfMeasureAssets[evenOrOdd][1]();\n\n      if (!prevAtom) {\n        setActiveChoice(evenOrOdd);\n        alternativesState[evenOrOdd][1]({\n          atom: getNextColorForAlternativeAtom(evenOrOdd),\n        } as CarryAtom<ColorForAlternative>);\n      } else {\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        alternativesState[evenOrOdd][1](null);\n      }\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n\n  const [atomToPaint, setAtomToPaint] = useState([choiceForPixelPlaceholderAtom] as const);\n  const paintRandomPixel = useSetRecoilState(atomToPaint[0]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint([drawPixelToPaint(gridSize ** 2)]);\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n} from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternatives = [0, 1].map((i) => useRecoilValue(alternativeForChoiceAtoms[i]));\n  const colorsState = [0, 1].map((i) =>\n    useRecoilState(alternatives[i]?.atom ?? colorForAlternativePlaceholderAtom)\n  );\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { alternativeForChoiceAtoms, choiceForPixelPlaceholderAtom } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixel as choiceForPixelPref } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixelAtom>(\n    choiceForPixelPlaceholderAtom\n  );\n  const [choice, setChoice] = useRecoilState(choiceForPixel);\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    if (choiceForPixel === choiceForPixelPlaceholderAtom) {\n      let nextAtom = storeAtomsMethods.getNext();\n      if (!nextAtom) {\n        nextAtom = getNextAtom(choiceForPixelPref, defChoice) as ChoiceForPixelAtom;\n        storeAtomsMethods.push(nextAtom);\n      }\n      setChoiceForPixel(nextAtom);\n    } else {\n      setChoice(defChoice);\n    }\n  }, [defChoice, choiceForPixel, setChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { gridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\n\nexport const App: FC = () => (\n  <RecoilRoot>\n    <div {...{ style: { display: 'inline-block' } }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: 'calc(100vh - 20px)',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;recoil&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid />\n        </div>\n      </div>\n    </div>\n  </RecoilRoot>\n);\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","export const choiceForPixel = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixel;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternative = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternative;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoice = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoice;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternativeAtom | null;\n};\n\nexport const gridSize = 'grid-size';\ninterface GridSizeState {\n  [gridSize]: number;\n}\n\nexport const rememberActiveChoice = 'remember-active-choice';\ninterface RememberActiveChoiceState {\n  [rememberActiveChoice]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { getUseInterstate } from '@smart-hooks/use-interstate';\nimport { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoice,\n  choiceForPixel,\n  colorForAlternative,\n  gridSize,\n  rememberActiveChoice,\n} from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const choiceForPixelPlaceholderAtom = [choiceForPixel, 0] as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = [\n  colorForAlternative,\n  DEF_COLOR,\n] as ColorForAlternativeAtom;\n\nexport function getNextColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternative}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\nexport const alternativeForChoiceAtoms = (([0, 1] as const).map((c) => [\n  `${alternativeForChoice}-${c}` as AlternativeForChoice,\n  getNextColorForAlternativeAtom(c),\n]) as readonly AlternativeForChoiceAtom[]) as readonly [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n];\n\nexport const gridSizeAtom = [gridSize, DEF_GRID_SIZE] as const;\n\nexport const rememberActiveChoiceAtom = [rememberActiveChoice, 0] as const;\n\nexport const { useInterstate } = getUseInterstate<State>();\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nconst storeAtoms = [] as ChoiceForPixelAtom[];\nlet curIndex = 0;\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n  getNext: () => ChoiceForPixelAtom | undefined;\n  resetIndex: (i?: number) => void;\n}\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n  get(i) {\n    return storeAtoms[i];\n  },\n  getNext() {\n    return storeAtoms[curIndex++];\n  },\n  resetIndex(i = 0) {\n    curIndex = i;\n  },\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  DEF_GRID_SIZE,\n  getNextColorForAlternativeAtom,\n  gridSizeAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport const ChooseGrid: FC<{ addStyle?: CSSProperties }> = ({ addStyle = {} }) => {\n  const setGridSize = useInterstate(...gridSizeAtom).set();\n  const setActiveChoice = useInterstate(...rememberActiveChoiceAtom).set();\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const setAlternatives = [0, 1].map((i) => useInterstate(...alternativeForChoiceAtoms[i]).set());\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeAtomsMethods.resetIndex();\n    setGridSize(parseInt(input, 10));\n    setActiveChoice(0);\n    setAlternatives.forEach((set, i) => {\n      set((prevAtom) => {\n        if (!prevAtom) {\n          return getNextColorForAlternativeAtom(i as PixelChoice);\n        }\n        return prevAtom;\n      });\n    });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${DEF_GRID_SIZE}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  getNextColorForAlternativeAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons: FC = () => {\n  const setActiveChoice = useInterstate(...rememberActiveChoiceAtom).set();\n\n  const alternativesState = [0, 1].map((i) => useInterstate(...alternativeForChoiceAtoms[i]).set());\n  const perfMeasureAssets = [0, 1].map(() => usePerfObserver());\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      alternativesState[evenOrOdd]((prevAtom) => {\n        if (!prevAtom) {\n          setActiveChoice(evenOrOdd);\n          return getNextColorForAlternativeAtom(evenOrOdd);\n        }\n        setActiveChoice((1 - evenOrOdd) as PixelChoice);\n        return null;\n      });\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { ChangeEvent, CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { DEF_PIXELS_PERCENT_TO_PAINT, gridSizeAtom, useInterstate } from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useInterstate(...pixelChoiceAtom).set();\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <></>;\n};\n\nexport const MassivePaintButton: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ReactElement[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixelsAtoms: ChoiceForPixelAtom[] = [];\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let atom: ChoiceForPixelAtom;\n      do {\n        atom = drawPixelToPaint(allPixelsNumber);\n      } while (pixelsAtoms.includes(atom));\n      pixelsAtoms.push(atom);\n    }\n    // eslint-disable-next-line react/jsx-key\n    setPixelsToPaint(pixelsAtoms.map((a) => <PixelToPaint {...{ pixelChoiceAtom: a }} />));\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <>\n      <div>\n        <div {...{ style: buttonContainerStyle }}>\n          <Button\n            {...{\n              callback: randomPaint,\n              name: 'paint n% random pixels',\n            }}\n          />\n          <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n        </div>\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo {...{ data: null }} />\n          </WrapDisplay>\n        </div>\n      </div>\n      {pixelsToPaint}\n    </>\n  );\n};\n","import type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { choiceForPixelPlaceholderAtom, gridSizeAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n\n  const [atomToPaint, setAtomToPaint] = useState([choiceForPixelPlaceholderAtom] as const);\n  const paintRandomPixel = useInterstate(...atomToPaint[0]).set();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [paintRandomPixel, atomToPaint]);\n\n  function randomPaint() {\n    startMeasure();\n    setAtomToPaint([drawPixelToPaint(gridSize ** 2)]);\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { getRandomColor } from 'random-color';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  alternativeForChoiceAtoms,\n  colorForAlternativePlaceholderAtom,\n  rememberActiveChoiceAtom,\n  useInterstate,\n} from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton: FC = () => {\n  const alternativesRecord = [0, 1].map((i) =>\n    useInterstate(...alternativeForChoiceAtoms[i]).get()\n  );\n\n  const setColors = [0, 1].map((i) =>\n    useInterstate(...(alternativesRecord[i] ?? colorForAlternativePlaceholderAtom)).set()\n  );\n  const [activeChoice, setActiveChoice] = useInterstate(...rememberActiveChoiceAtom).both();\n\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function repaintRow() {\n    startMeasure();\n    setColors[activeChoice]((prevColor) => {\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n      if (alternativesRecord[nextPotentialChoice] !== null) {\n        setActiveChoice(nextPotentialChoice);\n      }\n      if (alternativesRecord[activeChoice] !== null) {\n        return getRandomColor(prevColor);\n      }\n      return prevColor;\n    });\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button {...{ callback: repaintRow, name: 're-paint' }} />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useInterstate(...altControlAtom).get();\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport {\n  alternativeForChoiceAtoms,\n  choiceForPixelPlaceholderAtom,\n  useInterstate,\n} from '../State/State';\nimport type { ChoiceForPixelAtom, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixel as choiceForPixelPref } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixelAtom>(\n    choiceForPixelPlaceholderAtom\n  );\n  const [choice, setChoice] = useInterstate(...choiceForPixel).both();\n  const possibleStateAtom = useInterstate(...alternativeForChoiceAtoms[choice]).get();\n\n  useEffect(() => {\n    if (choiceForPixel === choiceForPixelPlaceholderAtom) {\n      let nextAtom = storeAtomsMethods.getNext();\n      if (!nextAtom) {\n        nextAtom = getNextAtom(choiceForPixelPref, defChoice);\n        storeAtomsMethods.push(nextAtom);\n      }\n      setChoiceForPixel(nextAtom);\n    } else {\n      setChoice(defChoice);\n    }\n  }, [defChoice, choiceForPixel, setChoice]);\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { gridSizeAtom, useInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC = () => {\n  const gridSize = useInterstate(...gridSizeAtom).get();\n  const [stageHeight, setStageHeight] = useState(0);\n\n  const lines: ReactElement | null = useSmartMemo(() => {\n    if (!stageHeight) {\n      return null;\n    }\n\n    const pixelSize = `${stageHeight / gridSize}px`;\n    let currentLine: ReactElement | null = null;\n    for (let i = 0; i < gridSize; i++) {\n      currentLine = (\n        <PixelsLine\n          {...{\n            length: gridSize,\n            pixelSize,\n            defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n          }}\n        >\n          {currentLine}\n        </PixelsLine>\n      );\n    }\n\n    return currentLine as ReactElement;\n  }, [gridSize, stageHeight]);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !stageHeight) {\n      const { height } = e.getBoundingClientRect();\n      setStageHeight(height);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\n\nexport const App: FC = () => {\n  return (\n    <div {...{ style: { display: 'inline-block' } }}>\n      <div\n        {...{\n          style: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: 'calc(100vh - 20px)',\n            margin: '10px auto 10px 10px',\n          },\n        }}\n      >\n        <PixelsStage />\n        <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n          <div {...{ style: { margin: '0 0 10px' } }}>\n            <strong>Implemented using &apos;use-interstate&apos; library</strong>\n          </div>\n          <RepaintButton />\n          <DisableEnableButtons />\n          <RandomPaintButton />\n          <MassivePaintButton />\n          <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n          <ChooseGrid />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const choiceForPixel = 'choice-for-pixel' as const;\nexport type ChoiceForPixel = typeof choiceForPixel;\nexport type PixelChoice = 0 | 1;\ntype ChoiceForPixelState = { [P in ChoiceForPixel]: PixelChoice };\n\nexport const colorForAlternative = 'color-for-alternative';\nexport type ColorForAlternative = typeof colorForAlternative;\nexport type ColorValue = string;\ntype ColorForAlternativeState = { [P in ColorForAlternative]: ColorValue };\n\nexport const alternativeForChoice = 'alternative-for-choice';\nexport type AlternativeForChoice = typeof alternativeForChoice;\ntype AlternativeForChoiceState = {\n  [P in AlternativeForChoice]: ColorForAlternative | null;\n};\n\ninterface GridSizeState {\n  gridSize: number;\n}\n\ninterface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type Atom<K extends keyof State> = readonly [K, State[K]];\n\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\n","import { getRandomColor } from 'random-color';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { alternativeForChoice, choiceForPixel, colorForAlternative } from './StateInterface';\n\nexport const DEF_GRID_SIZE = 32;\nexport const DEF_COLOR = '#AAAAAA';\nexport const INPUT_WAITING_DELAY = 3000;\nexport const DEF_PIXELS_PERCENT_TO_PAINT = 30;\n\nexport const choiceForPixelPlaceholderKey = choiceForPixel;\n\nexport const colorForAlternativePlaceholderKey = colorForAlternative;\n\nexport function getNextColorForAlternativeAtom(choice: PixelChoice): ColorForAlternativeAtom {\n  return getNextAtom(\n    `${colorForAlternative}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n}\n\nexport const alternativeForChoiceKeys = ([0, 1].map(\n  (c) => `${alternativeForChoice}-${c}`\n) as readonly AlternativeForChoice[]) as readonly [AlternativeForChoice, AlternativeForChoice];\n\nconst colorForAlternativeForChoiceEntries = alternativeForChoiceKeys.reduce(\n  (entries, alternativeForChoiceKey, c) => {\n    const [colorForAlternativeKey, color] = getNextColorForAlternativeAtom(c as PixelChoice);\n    return {\n      ...entries,\n      [alternativeForChoiceKey]: colorForAlternativeKey,\n      [colorForAlternativeKey]: color,\n    };\n  },\n  {} as Readonly<Pick<State, ColorForAlternative | AlternativeForChoice>>\n);\n\nexport const initialState: Partial<State> = {\n  ...{\n    [choiceForPixelPlaceholderKey]: 0,\n    gridSize: DEF_GRID_SIZE,\n    rememberActiveChoice: 0,\n  },\n  ...colorForAlternativeForChoiceEntries,\n};\n","import { getNextKey } from 'get-next-key';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport function getNextAtom<K extends keyof State, D extends State[K] = State[K]>(\n  prefix: K,\n  defaultValue: D\n): Atom<K> {\n  return [getNextKey(prefix), defaultValue];\n}\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  SET_CHOICE_FOR_PIXEL = 'pixels/setChoiceForPixel',\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  CHOOSE_GRID = 'grid/chooseGrid',\n  REMEMBER_ACTIVE_CHOICE = 'management/rememberActiveChoice',\n  TURN_ON_ALTERNATIVE = 'alternatives/turnOnAlternative',\n  SWITCH_ALTERNATIVES = 'alternatives/switchAlternatives',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\ninterface PixelsPayloads {\n  pixel: ChoiceForPixel;\n  choice: PixelChoice;\n}\n\ninterface AlternativesPayloads {\n  alternativeOfChoice: PixelChoice;\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.SET_CHOICE_FOR_PIXEL\n      ? {\n          type: ActionType.SET_CHOICE_FOR_PIXEL;\n          payload: PixelsPayloads;\n        }\n      : never)\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: ActionType.CREATE_NEW_PIXEL_ENTRY;\n          payload: PixelsPayloads;\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? {\n          type: ActionType.SWITCH_PIXEL_CHOICE;\n          payload: { pixel: ChoiceForPixel };\n        }\n      : never)\n  | (T extends ActionType.CHOOSE_GRID\n      ? { type: ActionType.CHOOSE_GRID; payload: { gridSize: number } }\n      : never)\n  | (T extends ActionType.REMEMBER_ACTIVE_CHOICE\n      ? { type: ActionType.REMEMBER_ACTIVE_CHOICE; payload: { rememberActiveChoice: PixelChoice } }\n      : never)\n  | (T extends ActionType.TURN_ON_ALTERNATIVE\n      ? { type: ActionType.TURN_ON_ALTERNATIVE; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.SWITCH_ALTERNATIVES\n      ? { type: ActionType.SWITCH_ALTERNATIVES; payload: AlternativesPayloads }\n      : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: ActionType.REPAINT_ROW } : never);\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, onChange, value = '', width = 65, addStyle = {} }) => {\n  const style: CSSProperties = { width };\n  return (\n    <form {...{ style: { display: 'block', ...addStyle } }}>\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n    </form>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst baseStyle: CSSProperties = {\n  width: 5,\n  height: 5,\n  marginRight: 5,\n  borderRadius: '100%',\n  backgroundColor: '#999',\n  animationName: 'jump-dot',\n  animationDuration: '0.5s',\n  animationIterationCount: 'infinite',\n};\nexport const Spinner: FC<{ toShow: boolean }> = ({ toShow }) => (\n  <div {...{ style: { display: 'flex', width: 30 } }}>\n    {toShow ? (\n      <>\n        <div {...{ style: { ...baseStyle, animationDelay: '0s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.1s' } }} />\n        <div {...{ style: { ...baseStyle, animationDelay: '0.2s' } }} />\n      </>\n    ) : null}\n  </div>\n);\n","import { useMultiState } from '@smart-hooks/use-multi-state';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { INPUT_WAITING_DELAY } from '../State/State';\nimport { InputField } from './InputField';\nimport { Spinner } from './Spinner';\n\nexport const DelayedInput: FC<{\n  label: string;\n  inputCallback: (input: string) => void;\n  value?: string;\n  width?: number;\n  addStyle?: CSSProperties;\n}> = ({ label, inputCallback, value = '', width = 65, addStyle = {} }) => {\n  interface KeepDelayedInputRecords {\n    activeTimeoutId?: NodeJS.Timeout;\n  }\n  const keepDelayedInputRecords = useRef<KeepDelayedInputRecords>({});\n\n  interface InputState {\n    inputValue: string;\n    showSpin: boolean;\n  }\n  const [inputState, setInputState] = useMultiState<InputState>({\n    inputValue: value,\n    showSpin: false,\n  });\n\n  function waitDelay(input: string) {\n    const {\n      current: records,\n      current: { activeTimeoutId },\n    } = keepDelayedInputRecords;\n\n    setInputState.showSpin(true);\n\n    if (activeTimeoutId) {\n      clearTimeout(activeTimeoutId);\n    }\n\n    records.activeTimeoutId = setTimeout(() => {\n      setInputState.showSpin(false);\n      records.activeTimeoutId = undefined;\n\n      inputCallback(input);\n    }, INPUT_WAITING_DELAY);\n  }\n\n  function onChange(e: ChangeEvent<HTMLInputElement>): void {\n    const input = e.target.value;\n    setInputState.inputValue(input);\n    waitDelay(input);\n  }\n\n  return (\n    <div {...{ style: { display: 'flex', alignItems: 'center', ...addStyle } }}>\n      <InputField\n        {...{\n          label,\n          onChange,\n          value: inputState.inputValue,\n          width,\n          addStyle: { marginRight: 10 },\n        }}\n      />\n      <Spinner {...{ toShow: inputState.showSpin }} />\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { MetricsComponentProps } from 'use-perf-observer';\n\nconst style: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  fontSize: '12px',\n  color: 'white',\n  padding: '1px 3px',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n};\n\nexport const PerformanceInfo: FC<MetricsComponentProps> = ({ data, status }) => {\n  if (status === 'done' && data) {\n    const { TTI, TBT } = data;\n    return <div {...{ style }}>{`TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`}</div>;\n  }\n\n  if (status === 'pending') {\n    return <div {...{ style }}>performance measuring...</div>;\n  }\n\n  if (status === 'error') {\n    return <div {...{ style }}>error</div>;\n  }\n\n  return <div {...{ style: { ...style, backgroundColor: 'transparent' } }} />;\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport function setChoiceForPixelAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.SET_CHOICE_FOR_PIXEL> {\n  return { type: ActionType.SET_CHOICE_FOR_PIXEL, payload: { pixel, choice } };\n}\nexport function createNewPixelEntryAction(\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> {\n  return { type: ActionType.CREATE_NEW_PIXEL_ENTRY, payload: { pixel, choice } };\n}\n\nexport function switchPixelChoiceAction(\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> {\n  return { type: ActionType.SWITCH_PIXEL_CHOICE, payload: { pixel } };\n}\n\nexport function chooseGridAction(gridSize: number): ActionReturn<ActionType.CHOOSE_GRID> {\n  return { type: ActionType.CHOOSE_GRID, payload: { gridSize } };\n}\n\nexport function rememberActiveChoiceAction(\n  rememberActiveChoice: PixelChoice\n): ActionReturn<ActionType.REMEMBER_ACTIVE_CHOICE> {\n  return { type: ActionType.REMEMBER_ACTIVE_CHOICE, payload: { rememberActiveChoice } };\n}\n\nexport function turnOnAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.TURN_ON_ALTERNATIVE> {\n  return { type: ActionType.TURN_ON_ALTERNATIVE, payload: { alternativeOfChoice } };\n}\n\nexport function switchAlternativeAction(\n  alternativeOfChoice: PixelChoice\n): ActionReturn<ActionType.SWITCH_ALTERNATIVES> {\n  return { type: ActionType.SWITCH_ALTERNATIVES, payload: { alternativeOfChoice } };\n}\n\nexport function repaintRowAction(): ActionReturn<ActionType.REPAINT_ROW> {\n  return { type: ActionType.REPAINT_ROW };\n}\n","import { ChoiceForPixel } from './StateInterface';\n\nconst storeKeys = [] as ChoiceForPixel[];\nlet curIndex = 0;\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  getNext: () => ChoiceForPixel | undefined;\n  resetIndex: (i?: number) => void;\n}\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n  get(i) {\n    return storeKeys[i];\n  },\n  getNext() {\n    return storeKeys[curIndex++];\n  },\n  resetIndex(i = 0) {\n    curIndex = i;\n  },\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { DelayedInput } from '../reusable-components/DelayedInput';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport {\n  chooseGridAction,\n  rememberActiveChoiceAction,\n  turnOnAlternativeAction,\n} from '../State/actions';\nimport { DEF_GRID_SIZE } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport const ChooseGrid = connect(null, {\n  setGridSize: chooseGridAction,\n  setActiveChoice: rememberActiveChoiceAction,\n  setAlternative: turnOnAlternativeAction,\n})(function ChooseGrid({ addStyle = {}, setGridSize, setActiveChoice, setAlternative }) {\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n\n  function inputCallback(input: string) {\n    startMeasure();\n    storeKeysMethods.resetIndex();\n    setGridSize(parseInt(input, 10));\n    setActiveChoice(0);\n    [0, 1].forEach((c) => {\n      setAlternative(c as PixelChoice);\n    });\n  }\n\n  return (\n    <div {...{ style: addStyle }}>\n      <DelayedInput\n        {...{\n          label: 'input grid size: ',\n          inputCallback,\n          value: `${DEF_GRID_SIZE}`,\n          addStyle: { marginBottom: '2px' },\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n} as FC<{\n  addStyle?: CSSProperties;\n  setGridSize: (gridSize: number) => void;\n  setActiveChoice: (activeChoice: PixelChoice) => void;\n  setAlternative: (alternativeOfChoice: PixelChoice) => void;\n}>);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{ callback: () => void; addStyle?: CSSProperties; name?: string }> = ({\n  callback,\n  addStyle = {},\n  name = 'start',\n}) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type: 'button', onClick: callback }}>{name}</button>;\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { switchAlternativeAction } from '../State/actions';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const DisableEnableButtons = connect(null, {\n  switchAlternatives: switchAlternativeAction,\n})(function DisableEnableButtons({ switchAlternatives }) {\n  const perfMeasureAssets = [0, 1].map(() => usePerfObserver());\n\n  function getEvenOrOddRowSwitch(evenOrOdd: PixelChoice): () => void {\n    return () => {\n      perfMeasureAssets[evenOrOdd][1]();\n      switchAlternatives(evenOrOdd);\n    };\n  }\n\n  return (\n    <>\n      {['enable/disable even rows', 'enable/disable odd rows'].map((name, i) => {\n        const WrapDisplay = perfMeasureAssets[i][0];\n        return (\n          <div {...{ style: buttonContainerStyle }} key={name}>\n            <Button\n              {...{\n                callback: getEvenOrOddRowSwitch(i as PixelChoice),\n                name,\n              }}\n            />\n            <WrapDisplay>\n              <PerformanceInfo {...{ data: null }} />\n            </WrapDisplay>\n          </div>\n        );\n      })}\n    </>\n  );\n} as FC<{\n  switchAlternatives: (activeChoice: PixelChoice) => void;\n}>);\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import type {\n  AlternativeForChoice,\n  ChoiceForPixel,\n  ColorForAlternative,\n  State,\n} from './StateInterface';\n\nfunction createSelector<K extends keyof State>(): (state: State, a: K) => State[K] {\n  return (state, a) => state[a];\n}\n\nexport const getChoiceForPixel = createSelector<ChoiceForPixel>();\nexport const getColorForAlternative = createSelector<ColorForAlternative>();\nexport const getAlternativeForChoice = createSelector<AlternativeForChoice>();\nexport function getGridSize(state: State): number {\n  return state.gridSize;\n}\n","import type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { InputField } from '../reusable-components/InputField';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport { DEF_PIXELS_PERCENT_TO_PAINT } from '../State/State';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\nexport const MassivePaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function MassivePaintButton({ gridSize, switchPixelChoice }) {\n  const [percentInput, setPercentInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [pixelsToPaint, setPixelsToPaint] = useState<ChoiceForPixel[]>([]);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  useEffect(() => {\n    pixelsToPaint.forEach((p) => switchPixelChoice(p));\n    setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels));\n  }, [pixelsToPaint, switchPixelChoice]);\n\n  function randomPaint() {\n    startMeasure();\n    const checkPercent = parseInt(percentInput, 10);\n    const percent = checkPercent >= 0 && checkPercent <= 100 ? checkPercent : 0;\n    setPercentInput(`${percent}`);\n\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percent) / 100;\n    const pixels: ChoiceForPixel[] = [];\n\n    for (let i = 0; i < pixelsNumberToPaint; i++) {\n      let pixel: ChoiceForPixel;\n      do {\n        pixel = drawPixelToPaint(allPixelsNumber);\n      } while (pixels.includes(pixel));\n      pixels.push(pixel);\n    }\n\n    setPixelsToPaint(pixels);\n  }\n\n  function percentCallback(e: ChangeEvent<HTMLInputElement>) {\n    const {\n      target: { value: input },\n    } = e;\n    setPercentInput(input);\n  }\n\n  return (\n    <div>\n      <div {...{ style: buttonContainerStyle }}>\n        <Button\n          {...{\n            callback: randomPaint,\n            name: 'paint n% random pixels',\n          }}\n        />\n        <InputField {...{ label: 'n: ', value: percentInput, onChange: percentCallback }} />\n      </div>\n      <div {...{ style: renderInfoContainerStyle }}>\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { drawPixelToPaint } from '../helpers/drawPixelToPaint';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { switchPixelChoiceAction } from '../State/actions';\nimport { getGridSize } from '../State/selectors';\nimport type { ChoiceForPixel, State } from '../State/StateInterface';\nimport { buttonContainerStyle } from './styles';\n\nexport const RandomPaintButton = connect((state: State) => ({ gridSize: getGridSize(state) }), {\n  switchPixelChoice: switchPixelChoiceAction,\n})(function RandomPaintButton({ gridSize, switchPixelChoice }) {\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  function randomPaint() {\n    startMeasure();\n    switchPixelChoice(drawPixelToPaint(gridSize ** 2));\n  }\n\n  return (\n    <div {...{ style: buttonContainerStyle }}>\n      <Button\n        {...{\n          callback: randomPaint,\n          name: 'paint random pixel',\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ data: null }} />\n      </WrapDisplay>\n    </div>\n  );\n} as FC<{ gridSize: number; switchPixelChoice: (pixel: ChoiceForPixel) => void }>);\n","import type { FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { usePerfObserver } from 'use-perf-observer';\nimport { Button } from '../reusable-components/Button';\nimport { PerformanceInfo } from '../reusable-components/PerformanceInfo';\nimport { repaintRowAction } from '../State/actions';\nimport { buttonContainerStyle } from './styles';\n\nexport const RepaintButton = connect(null, { repaintRow: repaintRowAction })(\n  function RepaintButton({ repaintRow }) {\n    const [WrapDisplay, startMeasure] = usePerfObserver();\n\n    function repaintCallback() {\n      startMeasure();\n      repaintRow();\n    }\n\n    return (\n      <div {...{ style: buttonContainerStyle }}>\n        <Button {...{ callback: repaintCallback, name: 're-paint' }} />\n        <WrapDisplay>\n          <PerformanceInfo {...{ data: null }} />\n        </WrapDisplay>\n      </div>\n    );\n  } as FC<{ repaintRow: () => void }>\n);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getColorForAlternative } from '../State/selectors';\nimport type { ColorForAlternative, ColorValue, State } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel = connect(\n  (state: State, { altControl }: { altControl: ColorForAlternative }) => ({\n    color: getColorForAlternative(state, altControl),\n  })\n)(function Pixel({ color }) {\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n} as FC<{ color: ColorValue }>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { createNewPixelEntryAction, setChoiceForPixelAction } from '../State/actions';\nimport { getAlternativeForChoice, getChoiceForPixel } from '../State/selectors';\nimport { alternativeForChoiceKeys, choiceForPixelPlaceholderKey } from '../State/State';\nimport type {\n  ChoiceForPixel,\n  ColorForAlternative,\n  PixelChoice,\n  State,\n} from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nconst ControlPixelInner = connect(\n  (state: State, { choiceForPixel }: { choiceForPixel: ChoiceForPixel }) => ({\n    possibleAltControl: getAlternativeForChoice(\n      state,\n      alternativeForChoiceKeys[getChoiceForPixel(state, choiceForPixel)]\n    ),\n  })\n)(function ControlPixelInner({ possibleAltControl }) {\n  return possibleAltControl ? <Pixel {...{ altControl: possibleAltControl }} /> : null;\n} as FC<{\n  possibleAltControl: ColorForAlternative | null;\n}>);\n\nexport const ControlPixel = connect(null, {\n  setChoice: setChoiceForPixelAction,\n  createPixel: createNewPixelEntryAction,\n})(function ControlPixel({ pixelSize, defChoice, setChoice, createPixel }) {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  useEffect(() => {\n    if (choiceForPixel === choiceForPixelPlaceholderKey) {\n      let nextKey = storeKeysMethods.getNext();\n      if (!nextKey) {\n        nextKey = getNextKey(choiceForPixelPlaceholderKey);\n        createPixel(nextKey, defChoice);\n        storeKeysMethods.push(nextKey);\n      }\n      setChoiceForPixel(nextKey);\n    } else {\n      setChoice(choiceForPixel, defChoice);\n    }\n  }, [createPixel, defChoice, choiceForPixel, setChoice]);\n\n  return (\n    <div {...{ style }}>\n      {choiceForPixel === choiceForPixelPlaceholderKey ? null : (\n        <ControlPixelInner {...{ choiceForPixel }} />\n      )}\n    </div>\n  );\n} as FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n  setChoice: (pixel: ChoiceForPixel, choice: PixelChoice) => void;\n  createPixel: (pixel: ChoiceForPixel, choice: PixelChoice) => void;\n}>);\n","import { getNextKey } from 'get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useMemo } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const line: ReactElement[] = useMemo(\n    () =>\n      Array(length)\n        .fill(null)\n        .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />),\n    [defChoice, length, pixelSize]\n  );\n\n  return (\n    <>\n      <div {...{ style }}>{line}</div>\n      {children && <div>{children}</div>}\n    </>\n  );\n};\n","import { useSmartMemo } from '@smart-hooks/use-smart-memo';\nimport type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice, State } from '../State/StateInterface';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage = connect((state: State) => ({ gridSize: getGridSize(state) }))(\n  function PixelsStage({ gridSize }) {\n    const [stageHeight, setStageHeight] = useState(0);\n\n    const lines: ReactElement | null = useSmartMemo(() => {\n      if (!stageHeight) {\n        return null;\n      }\n\n      const pixelSize = `${stageHeight / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      return currentLine as ReactElement;\n    }, [gridSize, stageHeight]);\n\n    const ref = (e: HTMLDivElement | null) => {\n      if (e && !stageHeight) {\n        const { height } = e.getBoundingClientRect();\n        setStageHeight(height);\n      }\n    };\n\n    return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n  } as FC<{ gridSize: number }>\n);\n","import { createStore } from 'redux';\nimport { appReducer } from './reducer';\n\nexport const store = createStore(appReducer);\n","import { getRandomColor } from 'random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport { alternativeForChoiceKeys, getNextColorForAlternativeAtom, initialState } from './State';\nimport { PixelChoice, State } from './StateInterface';\n\nexport function appReducer(state = initialState as State, action: ActionReturn): State {\n  switch (action.type) {\n    case ActionType.SET_CHOICE_FOR_PIXEL:\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n      const prevChoice = state[pixel];\n\n      return { ...state, [pixel]: (1 - prevChoice) as PixelChoice };\n    }\n\n    case ActionType.CHOOSE_GRID: {\n      const {\n        payload: { gridSize },\n      } = action;\n\n      return { ...state, gridSize };\n    }\n\n    case ActionType.REMEMBER_ACTIVE_CHOICE: {\n      const {\n        payload: { rememberActiveChoice },\n      } = action;\n\n      return { ...state, rememberActiveChoice };\n    }\n\n    case ActionType.TURN_ON_ALTERNATIVE: {\n      const {\n        payload: { alternativeOfChoice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[alternativeOfChoice]];\n\n      if (!prevValue) {\n        const [nextColorForAlternativeKey, nextColor] = getNextColorForAlternativeAtom(\n          alternativeOfChoice\n        );\n\n        return {\n          ...state,\n          [alternativeForChoiceKeys[alternativeOfChoice]]: nextColorForAlternativeKey,\n          [nextColorForAlternativeKey]: nextColor,\n        };\n      }\n\n      return state;\n    }\n    case ActionType.SWITCH_ALTERNATIVES: {\n      const {\n        payload: { alternativeOfChoice },\n      } = action;\n      const prevValue = state[alternativeForChoiceKeys[alternativeOfChoice]];\n\n      if (!prevValue) {\n        const [nextColorForAlternativeKey, nextColor] = getNextColorForAlternativeAtom(\n          alternativeOfChoice\n        );\n\n        return {\n          ...state,\n          [alternativeForChoiceKeys[alternativeOfChoice]]: nextColorForAlternativeKey,\n          [nextColorForAlternativeKey]: nextColor,\n          rememberActiveChoice: alternativeOfChoice,\n        };\n      }\n\n      const { rememberActiveChoice: prevActiveChoice } = state;\n\n      return {\n        ...state,\n        [alternativeForChoiceKeys[alternativeOfChoice]]: null,\n        rememberActiveChoice: (1 - prevActiveChoice) as PixelChoice,\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const alternative = state[alternativeForChoiceKeys[activeChoice]];\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        rememberActiveChoice: state[alternativeForChoiceKeys[nextPotentialChoice]]\n          ? nextPotentialChoice\n          : activeChoice,\n        ...(alternative ? { [alternative]: getRandomColor(state[alternative]) } : {}),\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import type { FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { ChooseGrid } from './controls/ChooseGrid';\nimport { DisableEnableButtons } from './controls/DisableEnableButtons';\nimport { MassivePaintButton } from './controls/MassivePaintButton';\nimport { RandomPaintButton } from './controls/RandomPaintButton';\nimport { RepaintButton } from './controls/RepaintButton';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { store } from './State/store';\n\nexport const App: FC = () => {\n  return (\n    <Provider {...{ store }}>\n      <div {...{ style: { display: 'inline-block' } }}>\n        <div\n          {...{\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              height: 'calc(100vh - 20px)',\n              margin: '10px auto 10px 10px',\n            },\n          }}\n        >\n          <PixelsStage />\n          <div {...{ style: { margin: '10px 0 auto 5px' } }}>\n            <div {...{ style: { margin: '0 0 10px' } }}>\n              <strong>\n                Implemented using &apos;react-redux&apos; (connect components) library\n              </strong>\n            </div>\n            <RepaintButton />\n            <DisableEnableButtons />\n            <RandomPaintButton />\n            <MassivePaintButton />\n            <div {...{ style: { borderTop: '0.5px solid gray', margin: '15px 0' } }} />\n            <ChooseGrid />\n          </div>\n        </div>\n      </div>\n    </Provider>\n  );\n};\n","import type { FC } from 'react';\nimport React from 'react';\nimport { App as RecoilApp } from 'recoil-component';\nimport { App as UseInterstateApp } from 'use-interstate-component';\nimport { App as ReduxConnectApp } from 'redux-connect-component';\n\nexport const App: FC = () => {\n  return (\n    <div {...{ style: { display: 'flex' } }}>\n      <div>\n        <RecoilApp />\n      </div>\n      <div>\n        <UseInterstateApp />\n      </div>\n      <div>\n        <ReduxConnectApp />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App.tsx';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}