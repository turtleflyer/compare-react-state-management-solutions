{"version":3,"sources":["internal_packages/perfomance-info/BlockingParametersProvider.tsx","internal_packages/perfomance-info/DisplayInfo.tsx","internal_packages/perfomance-info/CollectDataProvider.tsx","internal_packages/perfomance-info/InfotipsProvider.tsx","internal_packages/perfomance-info/RefsDataProvider.tsx","internal_packages/perfomance-info/PerfInfoProvider.tsx","internal_packages/perfomance-info/InfoMark.tsx","internal_packages/perfomance-info/BlockingSpinner.tsx","internal_packages/perfomance-info/PerformanceInfo.tsx","internal_packages/get-next-key/getNextKey.ts","internal_packages/use-perf-observer/constParameters.ts","internal_packages/use-perf-observer/createObserver.ts","internal_packages/use-perf-observer/MeasureComponent.ts","internal_packages/use-perf-observer/usePerfObserver.tsx","internal_packages/control-panel/Button.tsx","internal_packages/control-panel/InputField.tsx","internal_packages/control-panel/styles.ts","internal_packages/control-panel/ChooseGrid.tsx","internal_packages/control-panel/DisableOrEnableRowsButton.tsx","internal_packages/control-panel/MassivePaintButton.tsx","internal_packages/control-panel/MeasuredControlButton.tsx","internal_packages/control-panel/ControlPanel.tsx","internal_packages/draw-pixels/drawPixels.ts","internal_packages/random-color/randomColor.ts","component_packages/recoil-implementation/State/storeAtomsMethods.ts","component_packages/recoil-implementation/helpers/drawPixelToPaint.ts","component_packages/recoil-implementation/helpers/getNextAtom.ts","component_packages/recoil-implementation/State/StateInterface.ts","component_packages/recoil-implementation/State/State.ts","component_packages/recoil-implementation/controlStage.tsx","component_packages/redux-hooks-implementation/State/actionTypes.ts","component_packages/recoil-implementation/pixels-components/Pixel.tsx","component_packages/recoil-implementation/pixels-components/ControlPixel.tsx","component_packages/recoil-implementation/pixels-components/PixelsLine.tsx","component_packages/recoil-implementation/pixels-components/PixelsStage.tsx","component_packages/recoil-implementation/App.tsx","component_packages/redux-hooks-implementation/State/storeKeysMethods.ts","component_packages/redux-hooks-implementation/State/actions.ts","component_packages/redux-hooks-implementation/State/reducer.ts","component_packages/redux-hooks-implementation/State/selectors.ts","component_packages/redux-hooks-implementation/State/StateInterface.ts","component_packages/redux-hooks-implementation/State/State.ts","component_packages/redux-hooks-implementation/controlStage.ts","component_packages/redux-hooks-implementation/helpers/drawPixelToPaint.ts","component_packages/redux-hooks-implementation/pixels-components/Pixel.tsx","component_packages/redux-hooks-implementation/pixels-components/ControlPixel.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsLine.tsx","component_packages/redux-hooks-implementation/pixels-components/PixelsStage.tsx","component_packages/redux-hooks-implementation/State/store.ts","component_packages/redux-hooks-implementation/App.tsx","component_packages/use-interstate-implementation/State/storeKeysMethods.ts","component_packages/use-interstate-implementation/State/StateInterface.ts","component_packages/use-interstate-implementation/State/State.ts","component_packages/use-interstate-implementation/controlStage.ts","component_packages/use-interstate-implementation/helpers/drawPixelToPaint.ts","component_packages/use-interstate-implementation/pixels-components/Pixel.tsx","component_packages/use-interstate-implementation/pixels-components/ControlPixel.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsLine.tsx","component_packages/use-interstate-implementation/pixels-components/PixelsStage.tsx","component_packages/use-interstate-implementation/App.tsx","internal_packages/info-panel/createProcessData.ts","internal_packages/info-panel/TableComponents/tableStyles.ts","internal_packages/info-panel/TableComponents/GridTitleRow.tsx","internal_packages/info-panel/TableComponents/ModulesRow.tsx","internal_packages/info-panel/TableComponents/RecordRow.tsx","internal_packages/info-panel/InterpretData.tsx","internal_packages/info-panel/TabHeader.tsx","internal_packages/info-panel/InfoPanel.tsx","AppInFlexBox.tsx","index.js"],"names":["BlockingAreaContext","createContext","ToBlockContext","SetBlockingParametersMethodsContext","createSetBlockingParametersMethods","setParamToShow","currArea","setArea","useBlockingArea","useState","area","_setArea","top","left","bottom","right","useToBlock","toShow","_setParamToShow","setBlockingParametersMethods","setToBlock","toBlock","addRef","ref","getBoundingClientRect","curTop","curLeft","curBottom","curRight","processDimension","nextTop","nextBottom","nextLeft","nextRight","curBegin","curEnd","beginToAdd","endToAdd","BlockingParametersProvider","children","blockingArea","Provider","value","useContext","throwError","useAddRef","e","Error","outerBoxStyle","display","width","height","color","backgroundColor","borderRadius","justifyContent","alignItems","innerBoxStyle","flexWrap","whiteSpace","elementStyle","margin","DisplayInfo","info","fontSize","setFontSize","initialFontSize","style","map","key","cloneElement","props","GetDataPoolContext","PerfInfoDataMethodsContext","CollectDataProvider","setData","useGetDataPoolContextValue","dataPool","_setData","getDataPool","perfInfoDataMethods","addData","newData","db","clearData","createCollectDataProviderAssets","getDataPoolValue","InfotipsContext","InfotipsProvider","popupDelay","dispatchersPool","addTipHandler","handler","removeTipHandler","filter","nextHandler","hideOtherTips","except","forEach","createInfotipsPoolMethods","infotipsContextValue","RefsContext","RefsDataProvider","refsTable","provideModuleNameAndRef","modN","getRef","createRefsProviderAssets","refAssets","PerfInfoProvider","usePerfInfoMethods","useProvideModuleNameAndRef","useGetRef","infoMarkStyle","flexShrink","fontWeight","cursor","infotipStyle","position","padding","boxShadow","InfotipBox","popupInfo","clearDelay","toHide","onMouseOver","onFocus","onMouseLeave","onBlur","infotipPositionOffset","InfoMark","infoMarkRef","useRef","delayTimeoutID","infotipBoxPosition","setInfoTipBoxPosition","tipHandler","useCallback","hideInfoTipOnMouseLeave","current","setTimeout","clearTimeout","showInfoTip","x","y","useEffect","role","tabIndex","document","documentElement","clientHeight","scrollTop","pendingEffectContainerStyle","transform","animationName","animationDuration","animationTimingFunction","animationIterationCount","circleStyle","transformOrigin","outerContainerStyle","spinnerContainerStyle","PendingEffect","Array","fill","_","i","opacity","BlockingSpinner","zIndex","outerContainerRef","SPREADING_AREA_WIDTH","AcknowledgeTip","href","target","PerformanceInfo","useSetToBlock","status","data","tags","TTI","TBT","Math","round","error","message","prefCountsRecords","Map","getNextKey","prefix","count","get","set","MIN_QUIET_WINDOW_DURATION","clearScheduledTimeout","tID","observer","stateFlags","settings","undefined","scheduleNext","disconnect","useEffectRegistered","finish","calculateResult","evalTBT","start","end","firstLongTaskEntry","startTime","duration","startLongTask","delta","isZero","max","supportedEntryTypes","PerformanceObserver","isSupported","includes","isCreateObserverResultValid","r","MeasureComponent","nestedComponent","updateStartMeasureCallback","measureFromCreating","name","perfMarkName","childrenProps","setChildrenProps","firstTimeRunRec","updateChildrenProps","timeoutID","markEntry","initRun","lastEndTime","createdObserver","list","markList","getEntriesByName","length","observe","entryTypes","longTasksList","getEntriesByType","every","task","performance","mark","createObserver","conditionalObserverResult","callback","useMemo","defSettings","usePerfObserver","actualSettings","startMeasureRec","startMeasureCallback","usePerfObserverReturn","marginRight","Button","onClick","addStyle","type","calcStyle","InputField","label","onChange","onSubmit","insertElementBefore","insertElementAfter","preventDefault","buttonContainerStyle","ChooseGrid","moduleName","gridSize","useGridSize","inputValue","setInputValue","WrapDisplay","startMeasure","nextGridSize","parseInt","onGridChosen","marginBottom","DisableOrEnableRowsButton","useOnPushButton","onPushButton","renderInfoContainerStyle","MassivePaintButton","paintRandomPixels","painterComponents","checkResultForPaintRandomPixels","usePaintRandomPixels","isArray","percentsInput","setPercentsInput","input","percentsNumber","createName","padStart","insert","MeasuredControlButton","mainContainerStyle","headlineStyle","blockedStyle","lineStyle","borderTop","ControlPanel","headline","useDisableRows","useEnableRows","repaintRow","useRepaintRow","paintRandomSinglePixel","usePaintRandomSinglePixel","CONTROL_ACTIONS_ORDER","drawPixels","totalNumber","numberToDraw","flagToWrite","numberToLeave","pixels","pickedPixels","pickPixel","floor","random","push","pop","range","getRandomColor","calcColor","slice","toString","storeAtoms","storeAtomsMethods","newAtom","drawPixelToPaint","randomIndex","atomToSet","getNextAtom","defaultValue","atom","default","choiceForPixelPlaceholderKey","colorForAlternativeKeyPrefix","gridSizeKey","DEF_COLOR","createColorForAlternativeAtom","choice","choiceForPixelPlaceholderAtom","colorForAlternativePlaceholderAtom","gridSizeAtom","getGridSizeAtom","rememberActiveChoiceAtom","alternativeForChoiceKeyPrefixes","c","createAlternativeForChoiceAtoms","alternativeForChoiceAtoms","getAlternativeForChoiceAtoms","createFreshKey","alternatives","useAlternative","useRecoilState","activeChoice","setActiveChoice","colorsState","useColorState","prevColor","nextPotentialChoice","altForChoiceAtom","useRecoilValue","alt","ActionType","possibleAlternative","setAlternative","useSetRecoilState","atomToPaint","setAtomToPaint","paintRandomPixel","prev","PixelToPaint","pixelChoiceAtom","setChoice","prevChoice","pixelsToPaint","setPixelsToPaint","prevPixels","percentage","allPixelsNumber","p","Pixel","altControlAtom","alteredStyle","ControlPixel","pixelSize","defChoice","choiceForPixel","setChoiceForPixel","possibleStateAtom","nextAtom","PixelsLine","line","setLine","evalLine","PixelsStage","provideRef","lines","setLines","flexGrow","currentLine","MODULE_NAME","containerStyle","flexDirection","App","refreshKey","createKey","useRefreshApp","commandToCreateRefreshKey","storeKeys","storeKeysMethods","newKey","initState","createSelector","k","state","getGridSize","alternativeForChoiceKeys","createColorForAlternativeForChoiceEntry","colorForAlternativeKey","initialState","rememberActiveChoice","dispatch","useDispatch","REPAINT_ROW","useSelector","DISABLE_ROW","ENABLE_ROW","pixel","SWITCH_PIXEL_CHOICE","payload","SWITCH_MULTIPLE_PIXELS","altControl","possibleAltControl","nextKey","CREATE_NEW_PIXEL_ENTRY","createNewPixelEntryAction","appReducer","action","updatePixel","stateUpdate","reduce","altKey","update","initializeState","entries","createStore","store","provideStore","setNewKey","useCreateStore","commandToCreateFreshStore","rememberActiveChoiceKey","goInterstate","initInterstate","useInterstate","readInterstate","setInterstate","createColorForChoiceDefState","acceptSelector","altControlKey","possibleAltKey","setKey","createProcessData","positionIndex","dataTable","dataMethodsTable","initTable","processData","options","newSlice","dataT","dataMethodsT","nextDataMethT","notCountFirstMeasure","currentGrid","firstRun","entryName","checkModuleName","restTags","moduleEntry","gridEntry","dataEntry","TTIs","TBTs","average","avTTI","avTBT","sum","xi","createDataMethods","assureMethodsCreated","dataPipeline","rowContainerStyle","borderBottom","recordStyle","paddingRight","recordNameStyle","lineHeight","recordNumbersStyle","textAlign","gridRowContainerStyle","marginTop","gridTitleContainerStyle","fontStyle","paddingBottom","GridTitleRow","moduleNames","gridTitle","moduleN","moduleNameContainerStyle","fontVariantCaps","ModulesRow","recordContainerStyle","RecordRow","entryTitle","record","toFixed","recordsContainerStyle","InterpretData","recordsOrder","Object","keys","gridSizesTable","gridSizesT","m","moduleTable","gST","g","eliminateDuplicates","entryTitles","ordered","gauge","t","RegExp","test","sort","arr","Set","borderLeft","borderRight","boxSizing","TabHeader","borderBottomColor","onKeyPress","PANEL_COLOR","PANEL_HEIGHT","exteriorContainerStyle","mainContainerBaseStyle","commonBoxBaseStyle","collapsedBoxStyle","overflow","expandedBoxStyle","InfoPanel","collapsed","setCollapsed","useGetDataPool","processedData","scrollWidth","calcWidth","clientWidth","TAB_HEADER_HEIGHT","calculateScrollBarHeight","prevState","overflowX","heightWhenScroll","versionInfoStyle","appContainerStyle","AppInFlexBox","viewportHeight","setViewportHeight","visibility","element","version","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5a0fc5c.chunk.js","sourcesContent":["import type { FC } from 'react';\nimport React, { createContext, useContext, useState } from 'react';\n\nexport interface Area {\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n}\n\nconst BlockingAreaContext = createContext<Area | null>(null);\nconst ToBlockContext = createContext<boolean | null>(null);\n\nexport interface SetBlockingParametersMethods {\n  setToBlock: (toBlock: boolean) => void;\n  addRef: (ref: HTMLElement) => void;\n}\n\nconst SetBlockingParametersMethodsContext = createContext<SetBlockingParametersMethods | null>(\n  null\n);\n\nconst createSetBlockingParametersMethods = (): {\n  useBlockingArea: () => Area;\n  useToBlock: () => boolean;\n  setBlockingParametersMethods: SetBlockingParametersMethods;\n} => {\n  let setParamToShow: (toShow: boolean) => void;\n  let currArea: Area | null;\n  let setArea: (area: Area) => void;\n\n  const useBlockingArea = (): Area => {\n    const [area, _setArea] = useState<Area | null>(null);\n    setArea = _setArea;\n\n    return area ?? { top: 0, left: 0, bottom: 0, right: 0 };\n  };\n\n  const useToBlock = (): boolean => {\n    const [toShow, _setParamToShow] = useState(false);\n    setParamToShow = _setParamToShow;\n\n    return toShow;\n  };\n\n  const setToBlock = (toBlock: boolean): void => setParamToShow(toBlock);\n\n  const addRef = (ref: HTMLElement): void => {\n    const { top, left, bottom, right } = ref.getBoundingClientRect();\n\n    if (!currArea) {\n      currArea = { top, left, bottom, right };\n    } else {\n      const { top: curTop, left: curLeft, bottom: curBottom, right: curRight } = currArea;\n      const [nextTop, nextBottom] = processDimension([curTop, curBottom], [top, bottom]);\n      const [nextLeft, nextRight] = processDimension([curLeft, curRight], [left, right]);\n      currArea = { top: nextTop, left: nextLeft, bottom: nextBottom, right: nextRight };\n    }\n\n    setArea(currArea);\n  };\n\n  const setBlockingParametersMethods = { setToBlock, addRef };\n\n  return { useBlockingArea, useToBlock, setBlockingParametersMethods };\n\n  type DimensionSet = [begin: number, end: number];\n\n  function processDimension(\n    [curBegin, curEnd]: DimensionSet,\n    [beginToAdd, endToAdd]: DimensionSet\n  ): DimensionSet {\n    return [beginToAdd < curBegin ? beginToAdd : curBegin, endToAdd > curEnd ? endToAdd : curEnd];\n  }\n};\n\nexport const BlockingParametersProvider: FC = ({ children }) => {\n  const [{ useBlockingArea, useToBlock, setBlockingParametersMethods }] = useState(\n    createSetBlockingParametersMethods\n  );\n\n  const blockingArea = useBlockingArea();\n  const toBlock = useToBlock();\n\n  return (\n    <BlockingAreaContext.Provider {...{ value: blockingArea }}>\n      <ToBlockContext.Provider {...{ value: toBlock }}>\n        <SetBlockingParametersMethodsContext.Provider {...{ value: setBlockingParametersMethods }}>\n          {children}\n        </SetBlockingParametersMethodsContext.Provider>\n      </ToBlockContext.Provider>\n    </BlockingAreaContext.Provider>\n  );\n};\n\nexport const useBlockingArea = (): Area => useContext(BlockingAreaContext) ?? throwError();\n\nexport const useToBlock = (): boolean => useContext(ToBlockContext) ?? throwError();\n\nexport const useSetToBlock = (): SetBlockingParametersMethods['setToBlock'] =>\n  (useContext(SetBlockingParametersMethodsContext) ?? throwError()).setToBlock;\n\nexport const useAddRef = (): ((e: HTMLElement | null) => void) => {\n  const { addRef } = useContext(SetBlockingParametersMethodsContext) ?? throwError();\n\n  return (e: HTMLElement | null) => e && addRef(e);\n};\n\nfunction throwError(): never {\n  throw Error('blocking parameters context provider is missing');\n}\n","import React, { cloneElement, useState } from 'react';\nimport type { CSSProperties, FC } from 'react';\n\nconst boxInnerWidth = 164;\nconst initialFontSize = 12;\n\nconst outerBoxStyle: CSSProperties = {\n  display: 'flex',\n  width: 170,\n  height: 20,\n  color: 'white',\n  backgroundColor: 'gray',\n  borderRadius: 5,\n  justifyContent: 'center',\n  alignItems: 'center',\n};\n\nconst innerBoxStyle: CSSProperties = {\n  display: 'flex',\n  flexWrap: 'nowrap',\n  whiteSpace: 'nowrap',\n};\n\nconst elementStyle: CSSProperties = {\n  margin: '0 5px',\n};\n\nexport const DisplayInfo: FC<{ info?: (JSX.Element | string)[] }> = ({ info }) => {\n  const [fontSize, setFontSize] = useState<number | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !fontSize) {\n      const { width } = e.getBoundingClientRect();\n      width > boxInnerWidth && setFontSize((initialFontSize * boxInnerWidth) / width);\n    }\n  };\n\n  return info ? (\n    <div\n      {...{\n        ref,\n        style: { ...outerBoxStyle, ...innerBoxStyle, fontSize: fontSize ?? initialFontSize },\n      }}\n    >\n      {info.map((e) =>\n        typeof e === 'string' ? (\n          <span {...{ style: elementStyle }} key={e}>\n            {e}\n          </span>\n        ) : (\n          cloneElement(e, {\n            ...e.props,\n            style: { ...(e.props.style ?? {}), ...elementStyle },\n          })\n        )\n      )}\n    </div>\n  ) : (\n    <div {...{ style: { ...outerBoxStyle, backgroundColor: 'transparent' } }} />\n  );\n};\n","import { Measures } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { Dispatch, FC, SetStateAction } from 'react';\nimport React, { createContext, useState } from 'react';\n\nexport type Tags = [string, ...(string | number)[]];\n\nexport interface PerfInfoData {\n  tags: Tags;\n  data: Measures;\n}\n\nexport interface GetDataPoolContextValue {\n  getDataPool: () => PerfInfoData[];\n}\n\nexport interface PerfInfoDataMethods {\n  addData: (data: PerfInfoData) => void;\n\n  clearData: () => void;\n}\n\nexport const GetDataPoolContext = createContext<GetDataPoolContextValue | null>(null);\n\nexport const PerfInfoDataMethodsContext = createContext<PerfInfoDataMethods | null>(null);\n\nconst createCollectDataProviderAssets = (): {\n  useGetDataPoolContextValue: () => GetDataPoolContextValue;\n  perfInfoDataMethods: PerfInfoDataMethods;\n} => {\n  let setData: Dispatch<SetStateAction<PerfInfoData[]>>;\n\n  const useGetDataPoolContextValue = (): GetDataPoolContextValue => {\n    const [dataPool, _setData] = useState<PerfInfoData[]>([]);\n    setData = _setData;\n\n    const getDataPool = () => [...dataPool];\n\n    return { getDataPool };\n  };\n\n  const perfInfoDataMethods = {\n    addData: (newData: PerfInfoData) => {\n      setData((db) => [...db, newData]);\n    },\n\n    clearData: (): void => {\n      setData([]);\n    },\n  };\n\n  return { useGetDataPoolContextValue, perfInfoDataMethods };\n};\n\nexport const CollectDataProvider: FC = ({ children }) => {\n  const [{ useGetDataPoolContextValue, perfInfoDataMethods }] = useState(() =>\n    createCollectDataProviderAssets()\n  );\n\n  const getDataPoolValue = useGetDataPoolContextValue();\n\n  return (\n    <PerfInfoDataMethodsContext.Provider {...{ value: perfInfoDataMethods }}>\n      <GetDataPoolContext.Provider {...{ value: getDataPoolValue }}>\n        {children}\n      </GetDataPoolContext.Provider>\n    </PerfInfoDataMethodsContext.Provider>\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useState } from 'react';\n\ninterface InfotipsPoolMethods {\n  addTipHandler: (dispatcher: () => void) => void;\n  removeTipHandler: (dispatcher: () => void) => void;\n  hideOtherTips: (except: () => void) => void;\n}\n\ninterface InfotipsProviderProps {\n  popupDelay: number;\n}\nexport interface InfotipsContextValue extends InfotipsPoolMethods, InfotipsProviderProps {}\n\nexport const InfotipsContext = createContext<InfotipsContextValue | null>(null);\n\nconst createInfotipsPoolMethods = (): InfotipsPoolMethods => {\n  let dispatchersPool: (() => void)[] = [];\n\n  return {\n    addTipHandler: (handler) => {\n      dispatchersPool = [...dispatchersPool, handler];\n    },\n\n    removeTipHandler: (handler) => {\n      dispatchersPool = dispatchersPool.filter((nextHandler) => nextHandler !== handler);\n    },\n\n    hideOtherTips: (except) => {\n      dispatchersPool.forEach((nextHandler) => nextHandler !== except && nextHandler());\n    },\n  };\n};\n\nexport const InfotipsProvider: FC<InfotipsProviderProps> = ({ popupDelay, children }) => {\n  const [infotipsContextValue] = useState<InfotipsContextValue>(() => ({\n    popupDelay,\n    ...createInfotipsPoolMethods(),\n  }));\n\n  return (\n    <InfotipsContext.Provider {...{ value: infotipsContextValue }}>\n      {children}\n    </InfotipsContext.Provider>\n  );\n};\n","import type { FC } from 'react';\nimport React, { createContext, useState } from 'react';\n\nexport interface RefsProviderAssets {\n  provideModuleNameAndRef: (modNAndRef: [string, HTMLElement]) => void;\n  getRef: (modN: string) => HTMLElement;\n}\n\nexport const RefsContext = createContext<RefsProviderAssets | null>(null);\n\nconst createRefsProviderAssets = (): RefsProviderAssets => {\n  let refsTable: { [P in string]?: HTMLElement } = {};\n\n  const provideModuleNameAndRef = ([modN, ref]: [string, HTMLElement]): void => {\n    refsTable = { ...refsTable, [modN]: ref };\n  };\n\n  const getRef = (modN: string): HTMLElement =>\n    refsTable[modN] ??\n    (() => {\n      throw Error(`${modN} is not a valid module name`);\n    })();\n\n  return { provideModuleNameAndRef, getRef };\n};\n\nexport const RefsDataProvider: FC = ({ children }) => {\n  const [refAssets] = useState(() => createRefsProviderAssets());\n\n  return <RefsContext.Provider {...{ value: refAssets }}>{children}</RefsContext.Provider>;\n};\n","import type { FC } from 'react';\nimport React, { useContext } from 'react';\nimport { BlockingParametersProvider } from './BlockingParametersProvider';\nimport type { GetDataPoolContextValue, PerfInfoDataMethods } from './CollectDataProvider';\nimport {\n  CollectDataProvider,\n  GetDataPoolContext,\n  PerfInfoDataMethodsContext,\n} from './CollectDataProvider';\nimport type { InfotipsContextValue } from './InfotipsProvider';\nimport { InfotipsContext, InfotipsProvider } from './InfotipsProvider';\nimport type { RefsProviderAssets } from './RefsDataProvider';\nimport { RefsContext, RefsDataProvider } from './RefsDataProvider';\n\nexport const PerfInfoProvider: FC<{ popupDelay?: number }> = ({ popupDelay = 100, children }) => (\n  <InfotipsProvider {...{ popupDelay }}>\n    <CollectDataProvider>\n      <RefsDataProvider>\n        <BlockingParametersProvider>{children}</BlockingParametersProvider>\n      </RefsDataProvider>\n    </CollectDataProvider>\n  </InfotipsProvider>\n);\n\nexport const usePerfInfoMethods = (): InfotipsContextValue & PerfInfoDataMethods => ({\n  ...(useContext(InfotipsContext) ?? throwError()),\n  ...(useContext(PerfInfoDataMethodsContext) ?? throwError()),\n});\n\nexport const useGetDataPool = (): GetDataPoolContextValue =>\n  useContext(GetDataPoolContext) ?? throwError();\n\nexport const useClearDataPool = (): { clearData: () => void } => {\n  const { clearData } = useContext(PerfInfoDataMethodsContext) ?? throwError();\n\n  return { clearData };\n};\n\nexport const useProvideModuleNameAndRef = (): Pick<\n  RefsProviderAssets,\n  'provideModuleNameAndRef'\n> => {\n  const { provideModuleNameAndRef } = useContext(RefsContext) ?? throwError();\n\n  return { provideModuleNameAndRef };\n};\n\nexport const useGetRef = (): Pick<RefsProviderAssets, 'getRef'> => {\n  const { getRef } = useContext(RefsContext) ?? throwError();\n\n  return { getRef };\n};\n\nfunction throwError(): never {\n  throw Error('PerfInfoProvider should be in the root of the app');\n}\n","import type { CSSProperties, FC } from 'react';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { usePerfInfoMethods } from './PerfInfoProvider';\n\nconst infoMarkStyle: CSSProperties = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexShrink: 0,\n  fontSize: '1.2em',\n  fontWeight: 'bolder',\n  color: 'gray',\n  backgroundColor: 'rgb(228, 232, 255)',\n  width: '1.2em',\n  height: '1.2em',\n  borderRadius: '0.6em',\n  cursor: 'default',\n};\n\nconst infotipStyle: CSSProperties = {\n  position: 'absolute',\n  whiteSpace: 'normal',\n  width: 200,\n  padding: 10,\n  color: 'black',\n  backgroundColor: 'rgb(228, 232, 255)',\n  fontSize: '14px',\n  boxShadow: '3px 3px rgb(141, 144, 166)',\n};\n\nconst InfotipBox: FC<{\n  popupInfo: JSX.Element | string;\n  left: number;\n  bottom: number;\n  clearDelay: () => void;\n  toHide: () => void;\n}> = ({ popupInfo, left, bottom, clearDelay, toHide }) => (\n  <div\n    {...{\n      style: { ...infotipStyle, left, bottom },\n      onMouseOver: clearDelay,\n      onFocus: clearDelay,\n      onMouseLeave: toHide,\n      onBlur: toHide,\n    }}\n  >\n    {popupInfo}\n  </div>\n);\n\nconst infotipPositionOffset = { x: 10, y: 5 };\n\nexport const InfoMark: FC<{ style?: CSSProperties; popupInfo: JSX.Element | string }> = ({\n  style = {},\n  popupInfo,\n}) => {\n  const infoMarkRef = useRef<HTMLDivElement>(null);\n  const delayTimeoutID = useRef<NodeJS.Timeout | null>(null);\n\n  const [infotipBoxPosition, setInfoTipBoxPosition] = useState<{ x: number; y: number } | null>(\n    null\n  );\n\n  const tipHandler = useCallback(() => setInfoTipBoxPosition(null), []);\n\n  const { popupDelay, addTipHandler, hideOtherTips, removeTipHandler } = usePerfInfoMethods();\n\n  const hideInfoTipOnMouseLeave = () => {\n    delayTimeoutID.current = setTimeout(() => setInfoTipBoxPosition(null), popupDelay);\n  };\n\n  const clearDelay = () => {\n    delayTimeoutID.current && clearTimeout(delayTimeoutID.current);\n    delayTimeoutID.current = null;\n  };\n\n  const showInfoTip = () => {\n    if (infotipBoxPosition) {\n      clearDelay();\n\n      return;\n    }\n\n    if (infoMarkRef.current) {\n      hideOtherTips(tipHandler);\n      const { x, y } = infoMarkRef.current.getBoundingClientRect();\n      setInfoTipBoxPosition({ x, y });\n    } else {\n      throw Error('(PerformanceInfo) Info tip mark must exist');\n    }\n  };\n\n  useEffect(() => {\n    addTipHandler(tipHandler);\n\n    return () => removeTipHandler(tipHandler);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div\n        {...{\n          ref: infoMarkRef,\n          style: { ...infoMarkStyle, ...style },\n          onMouseOver: showInfoTip,\n          onFocus: showInfoTip,\n          onMouseLeave: hideInfoTipOnMouseLeave,\n          onBlur: hideInfoTipOnMouseLeave,\n          role: 'link',\n          tabIndex: 0,\n        }}\n      >\n        i\n      </div>\n      {infotipBoxPosition && (\n        <InfotipBox\n          {...{\n            popupInfo,\n            left: infotipBoxPosition.x + infotipPositionOffset.x,\n            bottom:\n              document.documentElement.clientHeight -\n              document.documentElement.scrollTop -\n              infotipBoxPosition.y +\n              infotipPositionOffset.y,\n            clearDelay,\n            toHide: hideInfoTipOnMouseLeave,\n          }}\n        />\n      )}\n    </>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useRef } from 'react';\nimport { useBlockingArea, useToBlock } from './BlockingParametersProvider';\n\nconst NUMBER_OF_CIRCLES = 8;\nconst SPREADING_AREA_WIDTH = 5;\nconst NUMBER_FADED_CIRCLES = 4;\nconst LAST_CIRCLE_OPACITY = 0.15;\n\nconst spinPendingEffectKeyframes = `\n@keyframes spinPendingEffect {\n  from {transform: rotate(0);}\n  to {transform: rotate(1turn);}\n}`;\n\nconst pendingEffectContainerStyle: CSSProperties = {\n  position: 'relative',\n  width: 0,\n  height: 0,\n  transform: 'translate(-10px, -10px)',\n  animationName: 'spinPendingEffect',\n  animationDuration: '1s',\n  animationTimingFunction: 'cubic-bezier(0.34, 0.46, 0.87, 0.71)',\n  animationIterationCount: 'infinite',\n};\n\nconst circleStyle: CSSProperties = {\n  position: 'absolute',\n  left: -20,\n  top: -20,\n  height: 10,\n  width: 10,\n  borderRadius: 10,\n  backgroundColor: '#9e9e9e',\n  transformOrigin: '20px 20px',\n};\n\nconst outerContainerStyle: CSSProperties = {\n  height: 0,\n};\n\nconst spinnerContainerStyle: CSSProperties = {\n  position: 'relative',\n  backgroundColor: 'rgba(255,255,255,50%)',\n  display: 'flex',\n  justifyContent: 'space-around',\n  alignItems: 'center',\n};\n\nconst PendingEffect: FC = () => {\n  return (\n    <>\n      <style>{spinPendingEffectKeyframes}</style>\n      <div {...{ style: pendingEffectContainerStyle }}>\n        {Array(NUMBER_OF_CIRCLES)\n          .fill(null)\n          .map((_, i) => (\n            <div\n              {...{\n                style: {\n                  ...circleStyle,\n                  transform: `rotate(${i / NUMBER_OF_CIRCLES}turn)`,\n                  opacity:\n                    i < NUMBER_FADED_CIRCLES\n                      ? (1 - LAST_CIRCLE_OPACITY) * (i / NUMBER_FADED_CIRCLES) + LAST_CIRCLE_OPACITY\n                      : 1,\n                },\n              }}\n              key={i}\n            />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport const BlockingSpinner: FC<{ zIndex?: number }> = ({ zIndex = 0 }) => {\n  const area = useBlockingArea();\n  const toShow = useToBlock();\n  const outerContainerRef = useRef<HTMLDivElement | null>(null);\n\n  return toShow ? (\n    <div {...{ style: outerContainerStyle, ref: outerContainerRef }}>\n      {outerContainerRef.current && (\n        <div\n          {...{\n            style: {\n              ...spinnerContainerStyle,\n              zIndex,\n              top:\n                area.top -\n                outerContainerRef.current.getBoundingClientRect().top -\n                SPREADING_AREA_WIDTH,\n              left:\n                area.left -\n                outerContainerRef.current.getBoundingClientRect().left -\n                SPREADING_AREA_WIDTH,\n              height: area.bottom - area.top + SPREADING_AREA_WIDTH * 2,\n              width: area.right - area.left + SPREADING_AREA_WIDTH * 2,\n            },\n          }}\n        >\n          <PendingEffect />\n        </div>\n      )}\n    </div>\n  ) : null;\n};\n","import type { MetricsComponentProps } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React, { useEffect } from 'react';\nimport { useSetToBlock } from './BlockingParametersProvider';\nimport type { Tags } from './CollectDataProvider';\nimport { DisplayInfo } from './DisplayInfo';\nimport { InfoMark } from './InfoMark';\nimport { usePerfInfoMethods } from './PerfInfoProvider';\n\nconst AcknowledgeTip: FC = () => (\n  <>\n    <strong>TTI (Time to Interactive)</strong> metric measures the time until the main sub-resources\n    of the page have rendered and it is capable of reliably responding to user input quickly\n    (similar to <a {...{ href: 'https://web.dev/tti/', target: 'blank' }}>that</a>\n    ).\n    <br />\n    <br />\n    <strong>TBT (Total Blocking Time)</strong> measures the total amount of time until TTI in the\n    chunks where the main thread was blocked for long enough to prevent input responsiveness\n    (similar to <a {...{ href: 'https://web.dev/tbt/', target: 'blank' }}>that</a>).\n  </>\n);\n\nexport const PerformanceInfo: FC<MetricsComponentProps & { tags?: Tags }> = (props) => {\n  const { addData } = usePerfInfoMethods();\n  const setToBlock = useSetToBlock();\n\n  useEffect(() => {\n    switch (props.status) {\n      case 'done':\n        {\n          const { data, tags = ['none'] } = props;\n          addData({ data, tags });\n        }\n\n        setToBlock(false);\n\n        break;\n\n      case 'pending':\n        setToBlock(true);\n\n        break;\n\n      case 'error':\n        setToBlock(false);\n\n        break;\n\n      default:\n        setToBlock(false);\n    }\n  });\n\n  switch (props.status) {\n    case 'done': {\n      const {\n        data: { TTI, TBT },\n      } = props;\n\n      return (\n        <DisplayInfo\n          {...{\n            info: [\n              `TTI: ${Math.round(TTI)}ms - TBT: ${Math.round(TBT)}ms`,\n              <InfoMark key=\"InfoTip\" {...{ popupInfo: <AcknowledgeTip /> }} />,\n            ],\n          }}\n        />\n      );\n    }\n\n    case 'pending':\n      return <DisplayInfo {...{ info: ['performance measuring...'] }} />;\n\n    case 'error':\n      return (\n        <DisplayInfo\n          {...{\n            info: ['error', <InfoMark key=\"InfoTip\" {...{ popupInfo: props.error.message }} />],\n          }}\n        />\n      );\n\n    default:\n      return <DisplayInfo />;\n  }\n};\n\nexport { useAddRef, useToBlock } from './BlockingParametersProvider';\nexport { BlockingSpinner } from './BlockingSpinner';\nexport type { PerfInfoData } from './CollectDataProvider';\nexport {\n  PerfInfoProvider,\n  useClearDataPool,\n  useGetDataPool,\n  useGetRef,\n  useProvideModuleNameAndRef,\n} from './PerfInfoProvider';\n","const prefCountsRecords = new Map<string, number>();\n\nexport function getNextKey<K extends string>(prefix: K): K {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const count = (prefCountsRecords.get(prefix) ?? -1) + 1;\n  prefCountsRecords.set(prefix, count);\n\n  return `${prefix}-${count}` as K;\n}\n","export const MIN_QUIET_WINDOW_DURATION = 5000;\nexport const MIN_LONG_TASK_DURATION = 50;\n","import type { Dispatch, SetStateAction } from 'react';\nimport { MIN_LONG_TASK_DURATION, MIN_QUIET_WINDOW_DURATION } from './constParameters';\nimport type {\n  CreateObserverResult,\n  Measures,\n  MetricsComponentProps,\n  StartMeasure,\n} from './PerfMetricsTypes';\n\nfunction clearScheduledTimeout(\n  tID: NodeJS.Timeout | undefined,\n  observer: PerformanceObserver,\n  stateFlags: { useEffectRegistered: boolean },\n  settings: { scheduleNext: true; finish: () => void } | { scheduleNext: false; finish?: undefined }\n): NodeJS.Timeout | undefined {\n  tID === undefined || clearTimeout(tID);\n\n  return settings.scheduleNext\n    ? setTimeout(() => {\n        observer.disconnect();\n        if (stateFlags.useEffectRegistered) {\n          settings.finish();\n        }\n      }, MIN_QUIET_WINDOW_DURATION)\n    : (observer.disconnect() as undefined);\n}\n\nfunction calculateResult(\n  evalTBT: number,\n  start: number,\n  end: number,\n  firstLongTaskEntry: PerformanceEntry | undefined\n): Measures {\n  const { startTime: startLongTask, duration } = firstLongTaskEntry ?? {\n    startTime: start,\n    duration: 0,\n  };\n  const delta = start - startLongTask;\n  const isZero = -delta >= MIN_QUIET_WINDOW_DURATION;\n\n  return {\n    TTI: isZero ? 0 : Math.max(0, end - start),\n    TBT: isZero\n      ? 0\n      : evalTBT +\n        Math.max(\n          0,\n          delta < MIN_LONG_TASK_DURATION ? duration - MIN_LONG_TASK_DURATION : duration - delta\n        ),\n  };\n}\n\nexport function createObserver(\n  perfMarkName: string,\n  updateChildrenProps: Dispatch<SetStateAction<MetricsComponentProps>>,\n  updateStartMeasureCallback: (startMeasureCallback: StartMeasure) => void\n): CreateObserverResult {\n  let initRun = true;\n  let evalTBT = 0;\n  let lastEndTime = 0;\n  let timeoutID: NodeJS.Timeout | undefined;\n  let markEntry: PerformanceEntry | undefined;\n  let firstLongTaskEntry: PerformanceEntry | undefined;\n  const stateFlags = { useEffectRegistered: false };\n\n  function finish() {\n    updateChildrenProps({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data: calculateResult(evalTBT, markEntry!.startTime, lastEndTime, firstLongTaskEntry),\n      status: 'done',\n    });\n  }\n\n  const createdObserver = new PerformanceObserver((list, observer) => {\n    const { useEffectRegistered } = stateFlags;\n\n    timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n      scheduleNext: true,\n      finish,\n    });\n\n    if (initRun || useEffectRegistered) {\n      initRun = false;\n\n      if (!markEntry) {\n        const markList = list.getEntriesByName(perfMarkName);\n\n        if (markList.length > 0) {\n          [markEntry] = markList;\n          observer.observe({ entryTypes: ['longtask'] });\n        } else {\n          updateChildrenProps({\n            status: 'error',\n            data: null,\n            error: Error('(usePerfObserver) No long task has been registered'),\n          });\n          timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n            scheduleNext: false,\n          });\n          return;\n        }\n      }\n\n      const longTasksList = list.getEntriesByType('longtask');\n\n      if (longTasksList.length > 0) {\n        longTasksList.every((task) => {\n          const { startTime, duration } = task;\n\n          if (!firstLongTaskEntry) {\n            firstLongTaskEntry = task;\n          } else {\n            if (startTime - lastEndTime >= MIN_QUIET_WINDOW_DURATION) {\n              timeoutID = clearScheduledTimeout(timeoutID, observer, stateFlags, {\n                scheduleNext: false,\n              });\n              finish();\n\n              return false;\n            }\n\n            evalTBT += duration - MIN_LONG_TASK_DURATION;\n          }\n\n          lastEndTime = startTime + duration;\n\n          return true;\n        });\n      }\n    } else {\n      clearScheduledTimeout(timeoutID, observer, stateFlags, { scheduleNext: false });\n    }\n  });\n\n  updateStartMeasureCallback(() => {\n    evalTBT = 0;\n    lastEndTime = 0;\n    markEntry = undefined;\n    firstLongTaskEntry = undefined;\n    updateChildrenProps({ status: 'pending', data: null });\n    createdObserver.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  });\n\n  return [\n    createdObserver,\n\n    () => {\n      stateFlags.useEffectRegistered = true;\n\n      return () => {\n        createdObserver.disconnect();\n        timeoutID = clearScheduledTimeout(timeoutID, createdObserver, stateFlags, {\n          scheduleNext: false,\n        });\n      };\n    },\n  ];\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { FC, ReactElement } from 'react';\nimport { cloneElement, useEffect, useMemo, useRef, useState } from 'react';\nimport { createObserver } from './createObserver';\nimport type {\n  CreateObserverResult,\n  MetricsComponentProps,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst { supportedEntryTypes } = PerformanceObserver;\nconst isSupported =\n  supportedEntryTypes &&\n  supportedEntryTypes.includes('mark') &&\n  supportedEntryTypes.includes('longtask');\n\nfunction isCreateObserverResultValid(r: CreateObserverResult | null): r is CreateObserverResult {\n  return isSupported;\n}\n\nexport const MeasureComponent: FC<\n  WrapMetricsComponentChildren & {\n    settings: UsePerfMetricsSettings;\n    updateStartMeasureCallback: (startMeasureCallback: () => void) => void;\n  }\n> = ({ children: nestedComponent, settings, updateStartMeasureCallback }) => {\n  const { measureFromCreating, name } = settings;\n\n  const [perfMarkName] = useState(() => getNextKey(name ?? 'start-use-perf-metrics'));\n  const [childrenProps, setChildrenProps] = useState<MetricsComponentProps>(() => {\n    if (isSupported) {\n      return { data: null, status: 'never' };\n    }\n\n    return {\n      data: null,\n      status: 'error',\n      error: Error('(usePerfObserver) The browser does not support the library'),\n    };\n  });\n  const firstTimeRunRec = useRef(true);\n  const [conditionalObserverResult] = useState(() =>\n    isSupported ? createObserver(perfMarkName, setChildrenProps, updateStartMeasureCallback) : null\n  );\n\n  if (\n    isCreateObserverResultValid(conditionalObserverResult) &&\n    firstTimeRunRec.current &&\n    measureFromCreating\n  ) {\n    const [observer] = conditionalObserverResult;\n    observer.observe({ entryTypes: ['mark', 'longtask'] });\n    performance.mark(perfMarkName);\n  }\n\n  useEffect(() => {\n    if (isCreateObserverResultValid(conditionalObserverResult)) {\n      const [, callback] = conditionalObserverResult;\n      firstTimeRunRec.current = false;\n\n      if (measureFromCreating) {\n        setChildrenProps({ status: 'pending', data: null });\n      }\n\n      return callback();\n    }\n\n    return undefined;\n  }, []);\n\n  const nestedComponentWithProps = useMemo(\n    () => cloneElement(nestedComponent as ReactElement<MetricsComponentProps>, childrenProps),\n    [childrenProps]\n  );\n\n  return nestedComponentWithProps;\n};\n","import React, { useRef, useState } from 'react';\nimport { MeasureComponent } from './MeasureComponent';\nimport type {\n  Measures,\n  MetricsComponentProps,\n  StartMeasure,\n  Status,\n  UsePerfMetricsReturn,\n  UsePerfMetricsSettings,\n  WrapMetricsComponentChildren,\n} from './PerfMetricsTypes';\n\nconst defSettings: UsePerfMetricsSettings = {\n  measureFromCreating: false,\n};\n\nexport function usePerfObserver(\n  settings: Partial<UsePerfMetricsSettings> = {}\n): UsePerfMetricsReturn {\n  const actualSettings = { ...defSettings, ...settings };\n  const startMeasureRec = useRef<StartMeasure>(() => undefined);\n\n  const [usePerfObserverReturn] = useState<UsePerfMetricsReturn>([\n    function WrapMetrics({ children }: WrapMetricsComponentChildren) {\n      return (\n        <MeasureComponent\n          {...{\n            settings: actualSettings,\n            updateStartMeasureCallback: (startMeasureCallback) => {\n              startMeasureRec.current = startMeasureCallback;\n            },\n          }}\n        >\n          {children}\n        </MeasureComponent>\n      );\n    },\n\n    () => startMeasureRec.current(),\n  ]);\n\n  return usePerfObserverReturn;\n}\n\nexport type { Measures, Status, MetricsComponentProps, UsePerfMetricsReturn };\n","import type { ButtonHTMLAttributes, CSSProperties, FC, MouseEventHandler } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = { width: 200, height: 20, display: 'block', marginRight: 5 };\n\nexport const Button: FC<{\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  addStyle?: CSSProperties;\n  type?: ButtonHTMLAttributes<HTMLButtonElement>['type'];\n  name?: string;\n}> = ({ onClick, addStyle, type = 'button', name = 'start' }) => {\n  const calcStyle = { ...style, ...addStyle };\n\n  return <button {...{ style: calcStyle, type, ...(onClick ? { onClick } : null) }}>{name}</button>;\n};\n","import type { ChangeEventHandler, CSSProperties, FC, FormEventHandler } from 'react';\nimport React from 'react';\n\nexport const InputField: FC<{\n  label: string;\n  onChange: ChangeEventHandler<HTMLInputElement>;\n  onSubmit?: FormEventHandler<HTMLFormElement>;\n  value?: string | number;\n  width?: number;\n  addStyle?: CSSProperties;\n  insertElementBefore?: JSX.Element;\n  insertElementAfter?: JSX.Element;\n}> = ({\n  label,\n  onChange,\n  onSubmit,\n  value = '',\n  width = 65,\n  addStyle,\n  insertElementBefore,\n  insertElementAfter,\n}) => {\n  const style: CSSProperties = { width };\n  return (\n    <form\n      {...{\n        onSubmit: (e) => {\n          e.preventDefault();\n          onSubmit?.(e);\n        },\n        style: { display: 'block', ...addStyle },\n      }}\n    >\n      {insertElementBefore}\n      <label>\n        {label}\n        <input {...{ type: 'text', onChange, value, style }} />\n      </label>\n      {insertElementAfter}\n    </form>\n  );\n};\n","import type { CSSProperties } from 'react';\n\nexport const buttonContainerStyle: CSSProperties = { display: 'flex', margin: '5px 5px 5px 0' };\n","import {\n  PerformanceInfo,\n  useAddRef,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { ChangeEventHandler, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport type ChooseGridProps = HookOrNotProp<'gridSize', number> & {\n  onGridChosen: (p: { gridSize: number }) => void;\n  moduleName: string;\n};\n\nexport const ChooseGrid: FC<ChooseGridProps> = (props) => {\n  const { moduleName } = props;\n  const gridSize = props.gridSize ?? props.useGridSize();\n  const [inputValue, setInputValue] = useState(`${gridSize}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver({ measureFromCreating: true });\n  const addRef = useAddRef();\n\n  const onChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const onSubmit = (): void => {\n    startMeasure();\n    const nextGridSize = parseInt(inputValue, 10);\n    props.onGridChosen({ gridSize: nextGridSize > 0 ? nextGridSize : gridSize });\n  };\n\n  return (\n    <div {...{ ref: addRef }}>\n      <InputField\n        {...{\n          label: 'input grid size: ',\n          onChange,\n          onSubmit,\n          value: inputValue,\n          addStyle: { ...buttonContainerStyle, marginBottom: '2px' },\n          insertElementAfter: (\n            <Button\n              {...{\n                type: 'submit',\n                name: 'change grid',\n                addStyle: { width: 'auto', margin: '3px 5px 0 10px' },\n              }}\n            />\n          ),\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ tags: [moduleName, gridSize] }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import {\n  PerformanceInfo,\n  useAddRef,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { buttonContainerStyle } from './styles';\n\nexport type DisableOrEnableRowsHook = () => (() => void) | undefined;\n\nexport const DisableOrEnableRowsButton: FC<{\n  useOnPushButton: DisableOrEnableRowsHook;\n  name: 'disable odd rows' | 'enable odd rows';\n  moduleName: string;\n}> = ({ useOnPushButton, name, moduleName }) => {\n  const onPushButton = useOnPushButton();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n  const addRef = useAddRef();\n\n  return (\n    <div {...{ style: buttonContainerStyle, ref: addRef }}>\n      <Button\n        {...{\n          onClick:\n            onPushButton &&\n            (() => {\n              startMeasure();\n              onPushButton();\n            }),\n          name,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ tags: [moduleName, name] }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import {\n  PerformanceInfo,\n  useAddRef,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { ChangeEvent, CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { Button } from './Button';\nimport { InputField } from './InputField';\nimport { buttonContainerStyle } from './styles';\n\nexport const ONE_HUNDRED_PERCENT = 100;\nconst DEF_PIXELS_PERCENT_TO_PAINT = 30;\nconst renderInfoContainerStyle: CSSProperties = { margin: '-5px 0 0 5px', height: 20 };\n\ntype MassivePaintCallback = (percentage: number) => void;\n\nexport type PaintRandomPixels = (\n  | {\n      paintRandomPixels: MassivePaintCallback;\n      usePaintRandomPixels?: undefined;\n    }\n  | {\n      usePaintRandomPixels:\n        | (() => MassivePaintCallback)\n        | (() => [MassivePaintCallback, JSX.Element[]]);\n      paintRandomPixels?: undefined;\n    }\n) & { moduleName: string };\n\nexport const MassivePaintButton: FC<PaintRandomPixels> = (props) => {\n  const { moduleName } = props;\n  let paintRandomPixels: MassivePaintCallback;\n  let painterComponents: JSX.Element[];\n  const addRef = useAddRef();\n\n  if (props.paintRandomPixels) {\n    [paintRandomPixels, painterComponents] = [props.paintRandomPixels, []];\n  } else {\n    const checkResultForPaintRandomPixels = props.usePaintRandomPixels();\n\n    [paintRandomPixels, painterComponents] = Array.isArray(checkResultForPaintRandomPixels)\n      ? checkResultForPaintRandomPixels\n      : [checkResultForPaintRandomPixels, []];\n  }\n\n  const [percentsInput, setPercentsInput] = useState(`${DEF_PIXELS_PERCENT_TO_PAINT}`);\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n\n  const startPaint = (): void => {\n    const percentsNumber = parseInt(percentsInput, 10);\n\n    if (percentsNumber >= 0 && percentsNumber <= ONE_HUNDRED_PERCENT) {\n      startMeasure();\n      paintRandomPixels(percentsNumber);\n    } else {\n      setPercentsInput('0');\n    }\n  };\n\n  const percentCallback = ({ target: { value: input } }: ChangeEvent<HTMLInputElement>): void => {\n    setPercentsInput(input);\n  };\n\n  return (\n    <>\n      <div {...{ ref: addRef }}>\n        <InputField\n          {...{\n            label: 'n: ',\n            value: percentsInput,\n            onChange: percentCallback,\n            onSubmit: startPaint,\n            width: 40,\n            addStyle: buttonContainerStyle,\n            insertElementBefore: <Button {...{ type: 'submit', name: createName('n') }} />,\n          }}\n        />\n        <div {...{ style: renderInfoContainerStyle }}>\n          <WrapDisplay>\n            <PerformanceInfo\n              // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n              {...{ tags: [moduleName, createName(percentsInput.padStart(3, '0'))] }}\n            />\n          </WrapDisplay>\n        </div>\n      </div>\n      {painterComponents}\n    </>\n  );\n};\n\nfunction createName(insert: string | number): string {\n  return `paint ${insert}% random pixels`;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n  PerformanceInfo,\n  useAddRef,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { usePerfObserver } from '@compare-react-state-management-solutions/use-perf-observer';\nimport type { FC } from 'react';\nimport React from 'react';\nimport { Button } from './Button';\nimport { HookOrNotProp } from './HookOrNotProp';\nimport { buttonContainerStyle } from './styles';\n\ntype MeasuredControlButtonProps = {\n  name: string;\n  moduleName: string;\n} & HookOrNotProp<'onPushButton'>;\n\nexport const MeasuredControlButton: FC<MeasuredControlButtonProps> = (props) => {\n  const { name, moduleName } = props;\n  const onPushButton = props.onPushButton ?? props.useOnPushButton();\n  const [WrapDisplay, startMeasure] = usePerfObserver();\n  const addRef = useAddRef();\n\n  return (\n    <div {...{ style: buttonContainerStyle, ref: addRef }}>\n      <Button\n        {...{\n          onClick: () => {\n            startMeasure();\n            onPushButton();\n          },\n          name,\n        }}\n      />\n      <WrapDisplay>\n        <PerformanceInfo {...{ tags: [moduleName, name] }} />\n      </WrapDisplay>\n    </div>\n  );\n};\n","import { useToBlock } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport type { ChooseGridProps } from './ChooseGrid';\nimport { ChooseGrid } from './ChooseGrid';\nimport { DisableOrEnableRowsButton, DisableOrEnableRowsHook } from './DisableOrEnableRowsButton';\nimport type { HookOrNotProp } from './HookOrNotProp';\nimport type { PaintRandomPixels } from './MassivePaintButton';\nimport { MassivePaintButton } from './MassivePaintButton';\nimport { MeasuredControlButton } from './MeasuredControlButton';\n\nexport const DEF_GRID_SIZE = 32;\n\nconst mainContainerStyle: CSSProperties = { margin: '10px 0 0 5px' };\nconst headlineStyle: CSSProperties = { margin: '0 0 10px' };\nconst blockedStyle: CSSProperties = { filter: 'blur(0.7px)' };\nconst lineStyle: CSSProperties = { height: 0, borderTop: '0.5px solid gray', margin: '15px 0' };\n\ntype ControlPanelProps = {\n  headline: string;\n  useDisableRows: DisableOrEnableRowsHook;\n  useEnableRows: DisableOrEnableRowsHook;\n  moduleName: string;\n} & HookOrNotProp<'repaintRow'> &\n  HookOrNotProp<'paintRandomSinglePixel'> &\n  PaintRandomPixels &\n  ChooseGridProps;\n\nexport const ControlPanel: FC<ControlPanelProps> = (props) => {\n  const { headline, moduleName, useDisableRows, useEnableRows } = props;\n  const toBlock = useToBlock();\n\n  return (\n    <div {...{ style: mainContainerStyle }}>\n      <div {...{ style: headlineStyle }}>\n        <strong>{headline}</strong>\n      </div>\n      <div {...{ style: { ...(toBlock ? blockedStyle : null) } }}>\n        <MeasuredControlButton\n          {...{\n            moduleName,\n            name: 're-paint',\n            ...(props.repaintRow\n              ? { onPushButton: props.repaintRow }\n              : { useOnPushButton: props.useRepaintRow }),\n          }}\n        />\n        <DisableOrEnableRowsButton\n          {...{\n            name: 'disable odd rows',\n            useOnPushButton: useDisableRows,\n            moduleName,\n          }}\n        />\n        <DisableOrEnableRowsButton\n          {...{\n            name: 'enable odd rows',\n            useOnPushButton: useEnableRows,\n            moduleName,\n          }}\n        />\n        <MeasuredControlButton\n          {...{\n            name: 'paint random pixel',\n            ...(props.paintRandomSinglePixel\n              ? { onPushButton: props.paintRandomSinglePixel }\n              : { useOnPushButton: props.usePaintRandomSinglePixel }),\n            moduleName,\n          }}\n        />\n        <MassivePaintButton\n          {...{\n            ...(props.paintRandomPixels\n              ? { paintRandomPixels: props.paintRandomPixels }\n              : { usePaintRandomPixels: props.usePaintRandomPixels }),\n            moduleName,\n          }}\n        />\n        <div {...{ style: lineStyle }} />\n        <ChooseGrid\n          {...{\n            onGridChosen: props.onGridChosen,\n            ...(props.gridSize === undefined\n              ? { useGridSize: props.useGridSize }\n              : { gridSize: props.gridSize }),\n            moduleName,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport const CONTROL_ACTIONS_ORDER = [\n  'change grid',\n  're-paint',\n  'disable odd rows',\n  'enable odd rows',\n  'paint random pixel',\n  'paint \\\\d+% random pixels',\n];\n","export function drawPixels(totalNumber: number, numberToDraw: number): number[] {\n  if (totalNumber < numberToDraw) {\n    throw Error('Number to draw must be less than total');\n  }\n\n  const [flagToWrite, numberToLeave] =\n    numberToDraw < totalNumber / 2 ? [true, totalNumber - numberToDraw] : [false, numberToDraw];\n  const pixels = Array(totalNumber)\n    .fill(null)\n    .map((_, i) => i);\n  const pickedPixels: number[] = [];\n\n  while (pixels.length > numberToLeave) {\n    const pickPixel = Math.floor(Math.random() * pixels.length);\n\n    if (flagToWrite) {\n      pickedPixels.push(pixels[pickPixel]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    pickPixel < pixels.length - 1 ? (pixels[pickPixel] = pixels.pop()!) : pixels.pop();\n  }\n\n  return flagToWrite ? pickedPixels : pixels;\n}\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\nconst range = 0xffffff;\nexport function getRandomColor(color: string): string {\n  let calcColor = Math.round(parseInt(color.slice(1), 16) + range * (Math.random() / 4 + 1 / 2));\n  calcColor = calcColor > range ? calcColor - range : calcColor;\n\n  return `#${calcColor.toString(16).padStart(6, '0')}`;\n}\n","import type { ChoiceForPixelAtom } from './StateInterface';\n\nlet storeAtoms = [] as ChoiceForPixelAtom[];\n\ninterface StoreAtomsMethods {\n  push: (newAtom: ChoiceForPixelAtom) => void;\n\n  get: (i: number) => ChoiceForPixelAtom | undefined;\n\n  reset: () => void;\n}\n\nexport const storeAtomsMethods: StoreAtomsMethods = {\n  push(newAtom) {\n    storeAtoms.push(newAtom);\n  },\n\n  get(i) {\n    return storeAtoms[i];\n  },\n\n  reset() {\n    storeAtoms = [];\n  },\n};\n","import type { ChoiceForPixelAtom } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixelAtom {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeAtomsMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { atom } from 'recoil';\nimport type { Atom, State } from '../State/StateInterface';\n\nexport const getNextAtom = <K extends keyof State>(prefix: K, defaultValue: State[K]): Atom<K> =>\n  atom({ key: getNextKey(prefix), default: defaultValue });\n","import type { RecoilState } from 'recoil';\n\nexport type Atom<K extends keyof State> = RecoilState<State[K]>;\n\nexport const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoiceKeyPrefixBase = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<\n  AlternativeForChoice,\n  HoldColorForAlternativeAtom | null\n>;\nexport type AlternativeForChoice = typeof alternativeForChoiceKeyPrefixBase;\nexport type HoldColorForAlternativeAtom = {\n  atom: Atom<ColorForAlternative>;\n};\n\nexport const gridSizeKey = 'grid-size';\n\nexport type GridSizeState = Record<GridSize, number>;\nexport type GridSize = typeof gridSizeKey;\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n\nexport type ChoiceForPixelAtom = Atom<ChoiceForPixel>;\nexport type ColorForAlternativeAtom = Atom<ColorForAlternative>;\nexport type AlternativeForChoiceAtom = Atom<AlternativeForChoice>;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport type { RecoilState } from 'recoil';\nimport { atom } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceAtom,\n  Atom,\n  ChoiceForPixelAtom,\n  ColorForAlternative,\n  ColorForAlternativeAtom,\n  PixelChoice,\n} from './StateInterface';\nimport {\n  alternativeForChoiceKeyPrefixBase,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const createColorForAlternativeAtom = (choice: PixelChoice): Atom<ColorForAlternative> =>\n  getNextAtom(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative,\n    getRandomColor(DEF_COLOR)\n  );\n\nexport const choiceForPixelPlaceholderAtom = atom({\n  key: choiceForPixelPlaceholderKey,\n  default: 0,\n}) as ChoiceForPixelAtom;\n\nexport const colorForAlternativePlaceholderAtom = atom({\n  key: colorForAlternativeKeyPrefix,\n  default: DEF_COLOR,\n}) as ColorForAlternativeAtom;\n\nlet gridSizeAtom = getNextAtom(gridSizeKey, DEF_GRID_SIZE);\nexport const getGridSizeAtom = (): RecoilState<number> => gridSizeAtom;\nexport const rememberActiveChoiceAtom = atom({ key: rememberActiveChoiceKey, default: 0 });\n\nconst alternativeForChoiceKeyPrefixes = ([0, 1] as const).map(\n  (c) => `${alternativeForChoiceKeyPrefixBase}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const createAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] =>\n  alternativeForChoiceKeyPrefixes.map((key, i) =>\n    getNextAtom(key, { atom: createColorForAlternativeAtom(i as PixelChoice) })\n  ) as [AlternativeForChoiceAtom, AlternativeForChoiceAtom];\n\nlet alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n\nexport const getAlternativeForChoiceAtoms = (): [\n  AlternativeForChoiceAtom,\n  AlternativeForChoiceAtom\n] => alternativeForChoiceAtoms;\n\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [refreshKey, createKey] = useState(createFreshKey);\n\n  const commandToCreateRefreshKey = ({ gridSize }: { gridSize: number }) => {\n    alternativeForChoiceAtoms = createAlternativeForChoiceAtoms();\n    gridSizeAtom = getNextAtom(gridSizeKey, gridSize);\n    createKey(createFreshKey);\n  };\n\n  return [refreshKey, commandToCreateRefreshKey];\n};\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { SetterOrUpdater, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  choiceForPixelPlaceholderAtom,\n  colorForAlternativePlaceholderAtom,\n  createColorForAlternativeAtom,\n  getAlternativeForChoiceAtoms,\n  getGridSizeAtom,\n  rememberActiveChoiceAtom,\n} from './State/State';\nimport type {\n  AlternativeForChoiceAtom,\n  ChoiceForPixelAtom,\n  ColorValue,\n  HoldColorForAlternativeAtom,\n  PixelChoice,\n} from './State/StateInterface';\nimport { storeAtomsMethods } from './State/storeAtomsMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\ntype ManageColorState = [ColorValue, SetterOrUpdater<ColorValue>];\n\nexport const useRepaintRow = (): (() => void) => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const alternatives = alternativeForChoiceAtoms.map(useAlternative) as [\n    HoldColorForAlternativeAtom | null,\n    HoldColorForAlternativeAtom | null\n  ];\n\n  const [activeChoice, setActiveChoice] = useRecoilState(rememberActiveChoiceAtom);\n  const colorsState = alternatives.map(useColorState) as [ManageColorState, ManageColorState];\n\n  return (): void => {\n    const prevColor = colorsState[activeChoice][0];\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    if (alternatives[nextPotentialChoice] !== null) {\n      setActiveChoice(nextPotentialChoice);\n    }\n\n    if (alternatives[activeChoice] !== null) {\n      colorsState[activeChoice][1](getRandomColor(prevColor));\n    }\n  };\n};\n\nfunction useAlternative(\n  altForChoiceAtom: AlternativeForChoiceAtom\n): HoldColorForAlternativeAtom | null {\n  return useRecoilValue(altForChoiceAtom);\n}\n\nfunction useColorState(alt: HoldColorForAlternativeAtom | null): ManageColorState {\n  return useRecoilState(alt?.atom ?? colorForAlternativePlaceholderAtom);\n}\n\nexport const useDisableRows = (): (() => void) | undefined => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n  const setActiveChoice = useSetRecoilState(rememberActiveChoiceAtom);\n\n  return possibleAlternative === null\n    ? undefined\n    : () => {\n        setAlternative(null);\n        setActiveChoice(0);\n      };\n};\n\nexport const useEnableRows = (): (() => void) | undefined => {\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const [possibleAlternative, setAlternative] = useRecoilState(alternativeForChoiceAtoms[1]);\n\n  return possibleAlternative === null\n    ? () => {\n        setAlternative({\n          atom: createColorForAlternativeAtom(1),\n        });\n      }\n    : undefined;\n};\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [atomToPaint, setAtomToPaint] = useState({ atom: choiceForPixelPlaceholderAtom });\n  const paintRandomPixel = useSetRecoilState(atomToPaint.atom);\n\n  useEffect(() => {\n    paintRandomPixel((prev) => (1 - prev) as PixelChoice);\n  }, [atomToPaint]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (): void => {\n    setAtomToPaint({ atom: drawPixelToPaint(gridSize ** 2) });\n  };\n};\n\nconst PixelToPaint: FC<{ pixelChoiceAtom: ChoiceForPixelAtom }> = ({ pixelChoiceAtom }) => {\n  const setChoice = useSetRecoilState(pixelChoiceAtom);\n\n  useEffect(() => {\n    setChoice((prevChoice) => (1 - prevChoice) as PixelChoice);\n  }, [setChoice]);\n\n  return <></>;\n};\n\nexport const usePaintRandomPixels = (): [(percentage: number) => void, JSX.Element[]] => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [pixelsToPaint, setPixelsToPaint] = useState<JSX.Element[]>([]);\n\n  useEffect(() => setPixelsToPaint((prevPixels) => (prevPixels.length > 0 ? [] : prevPixels)), [\n    pixelsToPaint,\n  ]);\n\n  return [\n    (percentage: number): void => {\n      const allPixelsNumber = gridSize ** 2;\n      const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n      setPixelsToPaint(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => (\n          <PixelToPaint\n            {...{\n              pixelChoiceAtom:\n                storeAtomsMethods.get(p) ??\n                (() => {\n                  throw Error('It must be defined');\n                })(),\n            }}\n            key={p}\n          />\n        ))\n      );\n    },\n    pixelsToPaint,\n  ];\n};\n\nexport const useGridSize = (): number => {\n  const gridSizeAtom = getGridSizeAtom();\n\n  return useRecoilValue(gridSizeAtom);\n};\n","import type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport enum ActionType {\n  CREATE_NEW_PIXEL_ENTRY = 'pixels/createNewPixelEntry',\n  SWITCH_PIXEL_CHOICE = 'pixels/switchPixelChoice',\n  SWITCH_MULTIPLE_PIXELS = 'pixels/switchMultiplePixels',\n  DISABLE_ROW = 'alternatives/disableRow',\n  ENABLE_ROW = 'alternatives/enableRow',\n  REPAINT_ROW = 'alternatives/repaintRow',\n}\n\nexport type ActionReturn<T extends ActionType = ActionType> =\n  | (T extends ActionType.CREATE_NEW_PIXEL_ENTRY\n      ? {\n          type: T;\n          payload: {\n            pixel: ChoiceForPixel;\n            choice: PixelChoice;\n          };\n        }\n      : never)\n  | (T extends ActionType.SWITCH_PIXEL_CHOICE\n      ? { type: T; payload: { pixel: ChoiceForPixel } }\n      : never)\n  | (T extends ActionType.SWITCH_MULTIPLE_PIXELS\n      ? { type: T; payload: { pixels: ChoiceForPixel[] } }\n      : never)\n  | (T extends ActionType.DISABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.ENABLE_ROW ? { type: T } : never)\n  | (T extends ActionType.REPAINT_ROW ? { type: T } : never);\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport type { ColorForAlternativeAtom } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlAtom: ColorForAlternativeAtom }> = ({ altControlAtom }) => {\n  const color = useRecoilValue(altControlAtom);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getNextAtom } from '../helpers/getNextAtom';\nimport { choiceForPixelPlaceholderAtom, getAlternativeForChoiceAtoms } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n  const [choiceForPixel, setChoiceForPixel] = useState(choiceForPixelPlaceholderAtom);\n  const choice = useRecoilValue(choiceForPixel);\n  const alternativeForChoiceAtoms = getAlternativeForChoiceAtoms();\n  const possibleStateAtom = useRecoilValue(alternativeForChoiceAtoms[choice]);\n\n  useEffect(() => {\n    const nextAtom = getNextAtom(choiceForPixelPlaceholderKey, defChoice);\n    storeAtomsMethods.push(nextAtom);\n    setChoiceForPixel(nextAtom);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleStateAtom && choiceForPixel !== choiceForPixelPlaceholderAtom && (\n        <Pixel {...{ altControlAtom: possibleStateAtom.atom }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { getGridSizeAtom } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeAtomsMethods } from '../State/storeAtomsMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ provideRef: (ref: HTMLElement) => void }> = ({ provideRef }) => {\n  const gridSizeAtom = getGridSizeAtom();\n  const gridSize = useRecoilValue(gridSizeAtom);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeAtomsMethods.reset();\n      setLines(currentLine);\n      provideRef(e);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport { useProvideModuleNameAndRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport {\n  useDisableRows,\n  useEnableRows,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useRefreshApp } from './State/State';\n\nexport const MODULE_NAME = 'recoil';\n\nconst containerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  margin: '10px 10px 0',\n};\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n  const { provideModuleNameAndRef } = useProvideModuleNameAndRef();\n\n  const provideRef = (e: HTMLElement): void => {\n    provideModuleNameAndRef([MODULE_NAME, e]);\n  };\n\n  return (\n    <RecoilRoot {...{ key: refreshKey }}>\n      <div {...{ style: containerStyle }}>\n        <PixelsStage {...{ provideRef }} />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"recoil\" library',\n            useRepaintRow,\n            useDisableRows,\n            useEnableRows,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateRefreshKey,\n            moduleName: MODULE_NAME,\n          }}\n        />\n      </div>\n    </RecoilRoot>\n  );\n};\n","import { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n  get: (i: number) => ChoiceForPixel | undefined;\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","import type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport type { ChoiceForPixel, PixelChoice } from './StateInterface';\n\nexport const createNewPixelEntryAction = (\n  pixel: ChoiceForPixel,\n  choice: PixelChoice\n): ActionReturn<ActionType.CREATE_NEW_PIXEL_ENTRY> => ({\n  type: ActionType.CREATE_NEW_PIXEL_ENTRY,\n  payload: { pixel, choice },\n});\n\nexport const switchPixelChoiceAction = (\n  pixel: ChoiceForPixel\n): ActionReturn<ActionType.SWITCH_PIXEL_CHOICE> => ({\n  type: ActionType.SWITCH_PIXEL_CHOICE,\n  payload: { pixel },\n});\n\nexport const switchMultiplePixelsAction = (\n  pixels: ChoiceForPixel[]\n): ActionReturn<ActionType.SWITCH_MULTIPLE_PIXELS> => ({\n  type: ActionType.SWITCH_MULTIPLE_PIXELS,\n  payload: { pixels },\n});\n\nexport const disableRowAction = (): ActionReturn<ActionType.DISABLE_ROW> => ({\n  type: ActionType.DISABLE_ROW,\n});\n\nexport const enableRowAction = (): ActionReturn<ActionType.ENABLE_ROW> => ({\n  type: ActionType.ENABLE_ROW,\n});\n\nexport const repaintRowAction = (): ActionReturn<ActionType.REPAINT_ROW> => ({\n  type: ActionType.REPAINT_ROW,\n});\n","import { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type { ActionReturn } from './actionTypes';\nimport { ActionType } from './actionTypes';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  initialState,\n} from './State';\nimport type {\n  AlternativeForChoiceState,\n  ChoiceForPixel,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\n\nlet initState: State;\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nexport const appReducer = (state = initState, action: ActionReturn): State => {\n  switch (action.type) {\n    case ActionType.CREATE_NEW_PIXEL_ENTRY: {\n      const {\n        payload: { choice, pixel },\n      } = action;\n\n      return { ...state, [pixel]: choice };\n    }\n\n    case ActionType.SWITCH_PIXEL_CHOICE: {\n      const {\n        payload: { pixel },\n      } = action;\n\n      return { ...state, ...updatePixel({} as State, pixel) };\n    }\n\n    case ActionType.SWITCH_MULTIPLE_PIXELS: {\n      const {\n        payload: { pixels },\n      } = action;\n\n      const stateUpdate = pixels.reduce(updatePixel, {} as State);\n\n      return { ...state, ...stateUpdate };\n    }\n\n    case ActionType.DISABLE_ROW: {\n      return { ...state, [alternativeForChoiceKeys[1]]: null, rememberActiveChoice: 0 };\n    }\n\n    case ActionType.ENABLE_ROW: {\n      return {\n        ...state,\n        ...(state[alternativeForChoiceKeys[1]] === null\n          ? createColorForAlternativeForChoiceEntry(1)\n          : null),\n      };\n    }\n\n    case ActionType.REPAINT_ROW: {\n      const { rememberActiveChoice: activeChoice } = state;\n      const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n      const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n      return {\n        ...state,\n        ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n          ? {}\n          : { rememberActiveChoice: nextPotentialChoice }),\n        ...(altKey === null ? {} : { [altKey]: getRandomColor(state[altKey]) }),\n      };\n    }\n\n    default:\n      return state;\n  }\n\n  function updatePixel(update: State, pixel: ChoiceForPixel) {\n    const prevChoice = state[pixel];\n\n    return { ...update, [pixel]: (1 - prevChoice) as PixelChoice };\n  }\n};\n\nexport const initializeState = (gridSize: number): void => {\n  initState = {\n    ...initialState,\n\n    ...([0, 1] as const).reduce(\n      (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n      {} as ColorForAlternativeState & AlternativeForChoiceState\n    ),\n\n    gridSize,\n  };\n};\n","import type { State } from './StateInterface';\n\nexport const createSelector = <K extends keyof State>(k: K): ((state: State) => State[K]) => (\n  state: State\n) => state[k];\n\nexport const getGridSize = createSelector('gridSize');\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport interface GridSizeState {\n  gridSize: number;\n}\n\nexport interface RememberActiveChoiceState {\n  rememberActiveChoice: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport { alternativeForChoicePlaceholderKey, colorForAlternativeKeyPrefix } from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const colorForAlternativeKey = getNextKey(\n    `${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative\n  );\n  const color = getRandomColor(DEF_COLOR);\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nexport const initialState = { rememberActiveChoice: 0 } as State;\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  disableRowAction,\n  enableRowAction,\n  repaintRowAction,\n  switchMultiplePixelsAction,\n  switchPixelChoiceAction,\n} from './State/actions';\nimport { createSelector, getGridSize } from './State/selectors';\nimport { alternativeForChoiceKeys } from './State/State';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const useRepaintRow = (): (() => void) => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(repaintRowAction());\n  };\n};\n\nexport const useDisableRows = (): (() => void) | undefined => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? undefined\n    : () => {\n        dispatch(disableRowAction());\n      };\n};\n\nexport const useEnableRows = (): (() => void) | undefined => {\n  const dispatch = useDispatch();\n\n  const possibleColor = useSelector(createSelector(alternativeForChoiceKeys[1]));\n\n  return possibleColor === null\n    ? () => {\n        dispatch(enableRowAction());\n      }\n    : undefined;\n};\n\nexport const usePaintRandomSinglePixel = (): (() => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return () => {\n    dispatch(switchPixelChoiceAction(drawPixelToPaint(gridSize ** 2)));\n  };\n};\n\nexport const usePaintRandomPixels = (): ((percentage: number) => void) => {\n  const dispatch = useDispatch();\n  const gridSize = useSelector(getGridSize);\n\n  return (percentage: number) => {\n    const allPixelsNumber = gridSize ** 2;\n    const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n    dispatch(\n      switchMultiplePixelsAction(\n        drawPixels(allPixelsNumber, pixelsNumberToPaint).map(\n          (p) =>\n            storeKeysMethods.get(p) ??\n            (() => {\n              throw Error('It must be defined');\n            })()\n        )\n      )\n    );\n  };\n};\n\nexport const useGridSize = (): number => useSelector(getGridSize);\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const pixel = storeKeysMethods.get(randomIndex);\n  if (!pixel) {\n    throw Error('It should be defined');\n  }\n\n  return pixel;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { createSelector } from '../State/selectors';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControl: ColorForAlternative }> = ({ altControl }) => {\n  const color = useSelector(createSelector(altControl));\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewPixelEntryAction } from '../State/actions';\nimport { createSelector } from '../State/selectors';\nimport { alternativeForChoiceKeys } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useSelector(createSelector(choiceForPixel));\n  const possibleAltControl = useSelector(createSelector(alternativeForChoiceKeys[choice]));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    dispatch(createNewPixelEntryAction(nextKey, defChoice));\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltControl && choiceForPixel[0] !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControl: possibleAltControl }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getGridSize } from '../State/selectors';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ provideRef: (ref: HTMLElement) => void }> = ({ provideRef }) => {\n  const gridSize = useSelector(getGridSize);\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n      provideRef(e);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { useState } from 'react';\nimport { createStore, Store } from 'redux';\nimport type { ActionReturn, ActionType } from './actionTypes';\nimport { appReducer, initializeState } from './reducer';\nimport type { State } from './StateInterface';\n\nexport const useCreateStore = (): [\n  Store<State, ActionReturn<ActionType>>,\n  string,\n  (p: { gridSize: number }) => void\n] => {\n  const [store, provideStore] = useState<Store<State, ActionReturn<ActionType>>>(() => {\n    initializeState(DEF_GRID_SIZE);\n\n    return createStore(appReducer);\n  });\n\n  const [refreshKey, setNewKey] = useState(createFreshKey);\n\n  const commandToCreateFreshStore = ({ gridSize }: { gridSize: number }): void => {\n    initializeState(gridSize);\n    provideStore(createStore(appReducer));\n    setNewKey(createFreshKey);\n  };\n\n  return [store, refreshKey, commandToCreateFreshStore];\n};\n\nfunction createFreshKey(): string {\n  return getNextKey('refresh-key');\n}\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport { useProvideModuleNameAndRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport {\n  useDisableRows,\n  useEnableRows,\n  useGridSize,\n  usePaintRandomPixels,\n  usePaintRandomSinglePixel,\n  useRepaintRow,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { useCreateStore } from './State/store';\n\nexport const MODULE_NAME = 'react-redux';\n\nconst containerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  margin: '10px 10px 0',\n};\n\nexport const App: FC = () => {\n  const [store, refreshKey, commandToCreateFreshStore] = useCreateStore();\n  const { provideModuleNameAndRef } = useProvideModuleNameAndRef();\n\n  const provideRef = (e: HTMLElement): void => {\n    provideModuleNameAndRef([MODULE_NAME, e]);\n  };\n\n  return (\n    <Provider {...{ store, key: refreshKey }}>\n      <div {...{ style: containerStyle }}>\n        <PixelsStage {...{ provideRef }} />\n        <ControlPanel\n          {...{\n            headline: 'Implemented using \"react-redux\" library',\n            useRepaintRow,\n            useDisableRows,\n            useEnableRows,\n            usePaintRandomSinglePixel,\n            usePaintRandomPixels,\n            useGridSize,\n            onGridChosen: commandToCreateFreshStore,\n            moduleName: MODULE_NAME,\n          }}\n        />\n      </div>\n    </Provider>\n  );\n};\n","import type { ChoiceForPixel } from './StateInterface';\n\nlet storeKeys = [] as ChoiceForPixel[];\n\ninterface StoreKeysMethods {\n  push: (newKey: ChoiceForPixel) => void;\n\n  get: (i: number) => ChoiceForPixel | undefined;\n\n  reset: () => void;\n}\n\nexport const storeKeysMethods: StoreKeysMethods = {\n  push(newKey) {\n    storeKeys.push(newKey);\n  },\n\n  get(i) {\n    return storeKeys[i];\n  },\n\n  reset() {\n    storeKeys = [];\n  },\n};\n","export const choiceForPixelPlaceholderKey = 'choice-for-pixel';\n\nexport type ChoiceForPixelState = Record<ChoiceForPixel, PixelChoice>;\nexport type ChoiceForPixel = typeof choiceForPixelPlaceholderKey;\nexport type PixelChoice = 0 | 1;\n\nexport const colorForAlternativeKeyPrefix = 'color-for-alternative';\n\nexport type ColorForAlternativeState = Record<ColorForAlternative, ColorValue>;\nexport type ColorForAlternative = typeof colorForAlternativeKeyPrefix;\nexport type ColorValue = string;\n\nexport const alternativeForChoicePlaceholderKey = 'alternative-for-choice';\n\nexport type AlternativeForChoiceState = Record<AlternativeForChoice, ColorForAlternative | null>;\nexport type AlternativeForChoice = typeof alternativeForChoicePlaceholderKey;\n\nexport const gridSizeKey = 'grid-size';\n\nexport interface GridSizeState {\n  [gridSizeKey]: number;\n}\n\nexport const rememberActiveChoiceKey = 'remember-active-choice';\n\nexport interface RememberActiveChoiceState {\n  [rememberActiveChoiceKey]: PixelChoice;\n}\n\nexport type State = ChoiceForPixelState &\n  ColorForAlternativeState &\n  AlternativeForChoiceState &\n  GridSizeState &\n  RememberActiveChoiceState;\n","import { DEF_GRID_SIZE } from '@compare-react-state-management-solutions/control-panel';\nimport { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { useState } from 'react';\nimport { goInterstate, Interstate } from 'use-interstate';\nimport type {\n  AlternativeForChoice,\n  AlternativeForChoiceState,\n  ColorForAlternative,\n  ColorForAlternativeState,\n  PixelChoice,\n  State,\n} from './StateInterface';\nimport {\n  alternativeForChoicePlaceholderKey,\n  choiceForPixelPlaceholderKey,\n  colorForAlternativeKeyPrefix,\n  gridSizeKey,\n  rememberActiveChoiceKey,\n} from './StateInterface';\n\nexport const DEF_COLOR = '#AAAAAA';\n\nexport const alternativeForChoiceKeys = [0, 1].map(\n  (c) => `${alternativeForChoicePlaceholderKey}-${c}`\n) as [AlternativeForChoice, AlternativeForChoice];\n\nexport const { initInterstate, useInterstate, readInterstate, setInterstate } = goInterstate<\n  State & Interstate\n>();\n\nexport const createColorForAlternativeForChoiceEntry = (\n  choice: PixelChoice\n): ColorForAlternativeState & AlternativeForChoiceState => {\n  const [colorForAlternativeKey, color] = [\n    getNextKey(`${colorForAlternativeKeyPrefix}-${choice}` as ColorForAlternative),\n    getRandomColor(DEF_COLOR),\n  ];\n\n  return {\n    [alternativeForChoiceKeys[choice]]: colorForAlternativeKey,\n    [colorForAlternativeKey]: color,\n  };\n};\n\nconst initialState = {\n  [choiceForPixelPlaceholderKey]: 0,\n  [gridSizeKey]: DEF_GRID_SIZE,\n  [rememberActiveChoiceKey]: 0,\n} as State;\n\ninitInterstate({ ...initialState, ...createColorForChoiceDefState() });\nconst createFreshKey = (): string => getNextKey('refresh-key');\n\nexport const useRefreshApp = (): [string, ({ gridSize }: { gridSize: number }) => void] => {\n  const [key, setKey] = useState(createFreshKey);\n\n  const commandToCreateFreshKey = ({ gridSize }: { gridSize: number }): void => {\n    initInterstate({\n      ...initialState,\n      ...createColorForChoiceDefState(),\n      [gridSizeKey]: gridSize,\n    });\n\n    setKey(createFreshKey);\n  };\n\n  return [key, commandToCreateFreshKey];\n};\n\nfunction createColorForChoiceDefState(): ColorForAlternativeState & AlternativeForChoiceState {\n  return ([0, 1] as const).reduce(\n    (entries, c) => ({ ...entries, ...createColorForAlternativeForChoiceEntry(c) }),\n    {} as ColorForAlternativeState & AlternativeForChoiceState\n  );\n}\n","import { drawPixels } from '@compare-react-state-management-solutions/draw-pixels';\nimport { getRandomColor } from '@compare-react-state-management-solutions/random-color';\nimport { drawPixelToPaint } from './helpers/drawPixelToPaint';\nimport {\n  alternativeForChoiceKeys,\n  createColorForAlternativeForChoiceEntry,\n  readInterstate,\n  setInterstate,\n  useInterstate,\n} from './State/State';\nimport type {\n  ColorForAlternativeState,\n  PixelChoice,\n  RememberActiveChoiceState,\n} from './State/StateInterface';\nimport { gridSizeKey, rememberActiveChoiceKey } from './State/StateInterface';\nimport { storeKeysMethods } from './State/storeKeysMethods';\n\nconst ONE_HUNDRED_PERCENT = 100;\n\nexport const repaintRow = (): void => {\n  setInterstate((state) => {\n    const { [rememberActiveChoiceKey]: activeChoice } = state;\n    const { [alternativeForChoiceKeys[activeChoice]]: altKey } = state;\n    const nextPotentialChoice = (1 - activeChoice) as PixelChoice;\n\n    return {\n      ...(state[alternativeForChoiceKeys[nextPotentialChoice]] === null\n        ? ({} as RememberActiveChoiceState)\n        : { [rememberActiveChoiceKey]: nextPotentialChoice }),\n      ...(altKey === null\n        ? ({} as ColorForAlternativeState)\n        : { [altKey]: getRandomColor(state[altKey]) }),\n    };\n  });\n};\n\nexport const useDisableRows = (): (() => void) | undefined =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? undefined\n      : () => {\n          setInterstate(() => ({\n            [alternativeForChoiceKeys[1]]: null,\n            [rememberActiveChoiceKey]: 0,\n          }));\n        }\n  );\n\nexport const useEnableRows = (): (() => void) | undefined =>\n  useInterstate.acceptSelector(({ [alternativeForChoiceKeys[1]]: possibleColor }) =>\n    possibleColor === null\n      ? () => {\n          setInterstate(() => createColorForAlternativeForChoiceEntry(1));\n        }\n      : undefined\n  );\n\nexport const paintRandomSinglePixel = (): void => {\n  setInterstate(\n    drawPixelToPaint(readInterstate(gridSizeKey) ** 2),\n    (prev) => (1 - prev) as PixelChoice\n  );\n};\n\nexport const paintRandomPixels = (percentage: number): void => {\n  const allPixelsNumber = readInterstate(gridSizeKey) ** 2;\n  const pixelsNumberToPaint = (allPixelsNumber * percentage) / ONE_HUNDRED_PERCENT;\n\n  drawPixels(allPixelsNumber, pixelsNumberToPaint).map((p) => {\n    setInterstate(\n      storeKeysMethods.get(p) ??\n        (() => {\n          throw Error('It must be defined');\n        })(),\n\n      (prevChoice) => (1 - prevChoice) as PixelChoice\n    );\n  });\n};\n","import type { ChoiceForPixel } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\n\nexport function drawPixelToPaint(totalNumber: number): ChoiceForPixel {\n  const randomIndex = Math.floor(Math.random() * totalNumber);\n  const atomToSet = storeKeysMethods.get(randomIndex);\n\n  if (!atomToSet) {\n    throw Error('It should be defined');\n  }\n\n  return atomToSet;\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { useInterstate } from '../State/State';\nimport type { ColorForAlternative } from '../State/StateInterface';\n\nconst style: CSSProperties = { height: '100%', width: '100%' };\n\nexport const Pixel: FC<{ altControlKey: ColorForAlternative }> = ({ altControlKey }) => {\n  const color = useInterstate(altControlKey);\n  const alteredStyle = { ...style, backgroundColor: color };\n\n  return <div {...{ style: alteredStyle }} />;\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport { alternativeForChoiceKeys, setInterstate, useInterstate } from '../State/State';\nimport type { ChoiceForPixel, PixelChoice } from '../State/StateInterface';\nimport { choiceForPixelPlaceholderKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { Pixel } from './Pixel';\n\nexport const ControlPixel: FC<{\n  pixelSize: string;\n  defChoice: PixelChoice;\n}> = ({ pixelSize, defChoice }) => {\n  const style: CSSProperties = { height: pixelSize, width: pixelSize };\n\n  const [choiceForPixel, setChoiceForPixel] = useState<ChoiceForPixel>(\n    choiceForPixelPlaceholderKey\n  );\n\n  const choice = useInterstate(choiceForPixel);\n  const possibleAltKey = useInterstate(alternativeForChoiceKeys[choice]);\n\n  useEffect(() => {\n    const nextKey = getNextKey(choiceForPixelPlaceholderKey);\n    storeKeysMethods.push(nextKey);\n    setInterstate(nextKey, defChoice);\n    setChoiceForPixel(nextKey);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div {...{ style }}>\n      {possibleAltKey && choiceForPixel !== choiceForPixelPlaceholderKey && (\n        <Pixel {...{ altControlKey: possibleAltKey }} />\n      )}\n    </div>\n  );\n};\n","import { getNextKey } from '@compare-react-state-management-solutions/get-next-key';\nimport type { CSSProperties, FC, ReactElement } from 'react';\nimport React, { useEffect, useState } from 'react';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { ControlPixel } from './ControlPixel';\n\nconst style: CSSProperties = { display: 'flex' };\n\nexport const PixelsLine: FC<{\n  pixelSize: string;\n  length: number;\n  defChoice: PixelChoice;\n}> = ({ children, length, pixelSize, defChoice }) => {\n  const [line, setLine] = useState<ReactElement[] | null>(null);\n\n  useEffect(() => {\n    const evalLine = Array(length)\n      .fill(null)\n      .map(() => <ControlPixel {...{ pixelSize, defChoice }} key={getNextKey('c-key')} />);\n\n    setLine(evalLine);\n  }, [defChoice, length, pixelSize]);\n\n  return (\n    <div>\n      <div {...{ style }}>{line}</div>\n      {children}\n    </div>\n  );\n};\n","import type { FC, ReactElement } from 'react';\nimport React, { useState } from 'react';\nimport { readInterstate } from '../State/State';\nimport type { PixelChoice } from '../State/StateInterface';\nimport { gridSizeKey } from '../State/StateInterface';\nimport { storeKeysMethods } from '../State/storeKeysMethods';\nimport { PixelsLine } from './PixelsLine';\n\nexport const PixelsStage: FC<{ provideRef: (ref: HTMLElement) => void }> = ({ provideRef }) => {\n  const [lines, setLines] = useState<ReactElement | null>(null);\n\n  const ref = (e: HTMLDivElement | null) => {\n    if (e && !lines) {\n      const gridSize = readInterstate(gridSizeKey);\n      const { height } = e.getBoundingClientRect();\n      const pixelSize = `${height / gridSize}px`;\n      let currentLine: ReactElement | null = null;\n\n      for (let i = 0; i < gridSize; i++) {\n        currentLine = (\n          <PixelsLine\n            {...{\n              length: gridSize,\n              pixelSize,\n              defChoice: ((gridSize + i + 1) % 2) as PixelChoice,\n            }}\n          >\n            {currentLine}\n          </PixelsLine>\n        );\n      }\n\n      storeKeysMethods.reset();\n      setLines(currentLine);\n      provideRef(e);\n    }\n  };\n\n  return <div {...{ style: { flexGrow: 1 }, ref }}>{lines}</div>;\n};\n","import { ControlPanel } from '@compare-react-state-management-solutions/control-panel';\nimport { useProvideModuleNameAndRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport {\n  paintRandomPixels,\n  paintRandomSinglePixel,\n  repaintRow,\n  useDisableRows,\n  useEnableRows,\n} from './controlStage';\nimport { PixelsStage } from './pixels-components/PixelsStage';\nimport { readInterstate, useRefreshApp } from './State/State';\nimport { gridSizeKey } from './State/StateInterface';\n\nexport const MODULE_NAME = 'use-interstate';\n\nconst containerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  margin: '10px 10px 0',\n};\n\nexport const App: FC = () => {\n  const [refreshKey, commandToCreateRefreshKey] = useRefreshApp();\n  const { provideModuleNameAndRef } = useProvideModuleNameAndRef();\n\n  const provideRef = (e: HTMLElement): void => {\n    provideModuleNameAndRef([MODULE_NAME, e]);\n  };\n\n  return (\n    <div {...{ style: containerStyle, key: refreshKey }}>\n      <PixelsStage {...{ provideRef }} />\n      <ControlPanel\n        {...{\n          headline: 'Implemented using \"use-interstate\" library',\n          repaintRow,\n          useDisableRows,\n          useEnableRows,\n          paintRandomSinglePixel,\n          paintRandomPixels,\n          gridSize: readInterstate(gridSizeKey),\n          onGridChosen: commandToCreateRefreshKey,\n          moduleName: MODULE_NAME,\n        }}\n      />\n    </div>\n  );\n};\n","import type { PerfInfoData } from '@compare-react-state-management-solutions/performance-info';\nimport type { Data, DataTable, GridEntry, ModuleEntry, PickRequired } from './InterpretData';\n\nexport interface NotCountFirstMeasureOptions {\n  notCountFirstMeasure: boolean;\n}\n\nexport type ProcessData = (\n  newData: PerfInfoData[],\n  options: NotCountFirstMeasureOptions\n) => DataTable;\n\nexport const createProcessData = (): {\n  processData: ProcessData;\n} => {\n  type DataMethodsTable = { [P in string]?: DataMethods };\n\n  interface DataMethods {\n    addData: AddData;\n  }\n\n  type AddData = (data: PerfInfoData, dataT: DataTable) => DataTable;\n\n  let positionIndex: number;\n  let dataTable: Readonly<DataTable>;\n  let dataMethodsTable: Readonly<DataMethodsTable>;\n  initTable();\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const processData: ProcessData = (newData, options) => {\n    newData.length === 0 && initTable();\n    const newSlice = newData.slice(positionIndex);\n    positionIndex = newData.length;\n\n    newSlice.forEach((data) => {\n      [dataTable, dataMethodsTable] = dataPipeline(data, [dataTable, dataMethodsTable], options);\n    });\n\n    return dataTable;\n  };\n\n  return { processData };\n\n  function initTable(): void {\n    positionIndex = 0;\n    dataTable = {};\n    dataMethodsTable = {};\n  }\n\n  function dataPipeline(\n    data: PerfInfoData,\n    [dataT, dataMethodsT]: [DataTable, DataMethodsTable],\n    options: NotCountFirstMeasureOptions\n  ): [DataTable, DataMethodsTable] {\n    const {\n      tags: [moduleName],\n    } = data;\n\n    const nextDataMethT = assureMethodsCreated(moduleName, dataMethodsT, options);\n    const {\n      [moduleName]: { addData },\n    } = nextDataMethT;\n\n    return [addData(data, dataT), nextDataMethT];\n  }\n\n  function assureMethodsCreated<M extends string>(\n    moduleName: M,\n    dataMethodsT: DataMethodsTable,\n    options: NotCountFirstMeasureOptions\n  ): PickRequired<DataMethodsTable, M> {\n    return (dataMethodsT[moduleName]\n      ? dataMethodsT\n      : { ...dataMethodsT, [moduleName]: createDataMethods(moduleName, options) }) as PickRequired<\n      DataMethodsTable,\n      M\n    >;\n  }\n\n  function createDataMethods(\n    moduleName: string,\n    { notCountFirstMeasure }: NotCountFirstMeasureOptions\n  ): DataMethods {\n    let currentGrid: number | null = null;\n    let firstRun = true;\n\n    const addData: AddData = (data, dataT) => {\n      const {\n        data: { TTI, TBT },\n        tags: [checkModuleName, ...restTags],\n      } = data;\n\n      if (checkModuleName !== moduleName) {\n        throw Error('wrong module name');\n      }\n\n      let entryName: string;\n\n      if (typeof restTags[0] === 'number') {\n        currentGrid = restTags[0];\n        entryName = 'change grid';\n      } else {\n        entryName = restTags[0];\n      }\n\n      if (currentGrid === null) {\n        throw Error('there is no information about the current grid size');\n      }\n\n      if (firstRun && notCountFirstMeasure) {\n        firstRun = false;\n\n        return { ...dataT, [moduleName]: {} };\n      }\n\n      const { [moduleName]: moduleEntry = {} as ModuleEntry } = dataT;\n      const { [currentGrid]: gridEntry = {} as GridEntry } = moduleEntry;\n\n      const {\n        [entryName]: dataEntry = { TTIs: [], TBTs: [] } as Pick<Data, 'TTIs' | 'TBTs'>,\n      } = gridEntry;\n\n      const [TTIs, TBTs] = [\n        [...dataEntry.TTIs, TTI],\n        [...dataEntry.TBTs, TBT],\n      ];\n\n      const [avTTI, avTBT] = [average(TTIs), average(TBTs)];\n\n      return {\n        ...dataT,\n        [moduleName]: {\n          ...moduleEntry,\n          [currentGrid]: {\n            ...gridEntry,\n            [entryName]: { ...dataEntry, TTIs, TBTs, avTTI, avTBT },\n          },\n        },\n      };\n\n      function average(x: number[]): number {\n        return x.reduce((sum, xi) => sum + xi) / x.length;\n      }\n    };\n\n    return { addData };\n  }\n};\n","import type { CSSProperties } from 'react';\n\nexport const rowContainerStyle: CSSProperties = {\n  display: 'flex',\n  marginRight: 30,\n};\n\nexport const borderBottom: CSSProperties = {\n  borderBottom: 'solid 0.5px',\n};\n\nexport const recordStyle: CSSProperties = {\n  width: '100%',\n  paddingRight: 5,\n};\n\nexport const recordNameStyle: CSSProperties = {\n  ...recordStyle,\n  fontSize: '0.8em',\n  lineHeight: '1.8em',\n};\n\nexport const recordNumbersStyle: CSSProperties = {\n  ...recordStyle,\n  textAlign: 'right',\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { borderBottom, recordNumbersStyle, recordStyle, rowContainerStyle } from './tableStyles';\n\nconst gridRowContainerStyle: CSSProperties = {\n  ...rowContainerStyle,\n  marginTop: 20,\n};\n\nconst gridTitleContainerStyle: CSSProperties = {\n  ...borderBottom,\n  fontStyle: 'italic',\n  fontWeight: 600,\n  fontSize: '0.9em',\n  display: 'flex',\n  paddingBottom: 3,\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const GridTitleRow: FC<{ moduleNames: string[]; gridTitle: number | string }> = ({\n  moduleNames,\n  gridTitle,\n}) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: gridRowContainerStyle }}>\n      {moduleNames.map((moduleN) => (\n        <div\n          {...{\n            style: {\n              ...gridTitleContainerStyle,\n              width: getRef(moduleN).getBoundingClientRect().width,\n            },\n          }}\n          key={moduleN}\n        >\n          <div {...{ style: recordStyle }}>{`Grid size: ${gridTitle}`}</div>\n          <div {...{ style: recordNumbersStyle }}>average TTI (ms)</div>\n          <div {...{ style: recordNumbersStyle }}>average TBT (ms)</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { rowContainerStyle } from './tableStyles';\n\nconst moduleNameContainerStyle: CSSProperties = {\n  fontWeight: 200,\n  fontVariantCaps: 'small-caps',\n  fontSize: '1.2em',\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const ModulesRow: FC<{ moduleNames: string[] }> = ({ moduleNames }) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: rowContainerStyle }}>\n      {moduleNames.map((moduleN) => (\n        <div\n          {...{\n            style: {\n              ...moduleNameContainerStyle,\n              width: getRef(moduleN).getBoundingClientRect().width,\n            },\n          }}\n          key={moduleN}\n        >\n          {moduleN}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useGetRef } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport type { DataTable } from '../InterpretData';\nimport {\n  borderBottom,\n  recordNameStyle,\n  recordNumbersStyle,\n  rowContainerStyle,\n} from './tableStyles';\n\nconst recordContainerStyle: CSSProperties = {\n  ...borderBottom,\n  display: 'flex',\n  paddingBottom: 3,\n  margin: '0 10px',\n  flexShrink: 0,\n};\n\nexport const RecordRow: FC<{\n  moduleNames: string[];\n  data: DataTable;\n  gridTitle: number | string;\n  entryTitle: string;\n}> = ({ moduleNames, data, gridTitle, entryTitle }) => {\n  const { getRef } = useGetRef();\n\n  return (\n    <div {...{ style: rowContainerStyle }}>\n      {moduleNames.map((moduleN) => {\n        const record = data[moduleN]?.[(gridTitle as unknown) as number]?.[entryTitle];\n\n        return (\n          <div\n            {...{\n              style: {\n                ...recordContainerStyle,\n                width: getRef(moduleN).getBoundingClientRect().width,\n              },\n            }}\n            key={moduleN}\n          >\n            <div {...{ style: recordNameStyle }}>\n              {`${entryTitle} `}\n              <span {...{ style: { fontStyle: 'italic' } }}>\n                {record ? `(${record.TTIs.length} tries)` : '(no data)'}\n              </span>\n            </div>\n            <div {...{ style: recordNumbersStyle }}>{record ? record.avTTI.toFixed(0) : '-'}</div>\n            <div {...{ style: recordNumbersStyle }}>{record ? record.avTBT.toFixed(0) : '-'}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\nimport { GridTitleRow } from './TableComponents/GridTitleRow';\nimport { ModulesRow } from './TableComponents/ModulesRow';\nimport { RecordRow } from './TableComponents/RecordRow';\n\nexport type DataTable<\n  M extends string = never,\n  G extends number = never,\n  D extends string = never\n> = PickRequired<\n  {\n    [P in string]?: ModuleEntry<G, D>;\n  },\n  M\n>;\n\nexport type ModuleEntry<G extends number = never, D extends string = never> = PickRequired<\n  {\n    [P in number]?: GridEntry<D>;\n  },\n  G\n>;\n\nexport type GridEntry<D extends string = never> = PickRequired<\n  {\n    [P in string]?: Data;\n  },\n  D\n>;\n\nexport type PickRequired<T, K> = T & { [P in keyof T & K]: {} };\n\nexport interface Data {\n  TTIs: number[];\n  TBTs: number[];\n  avTTI: number;\n  avTBT: number;\n}\n\nconst recordsContainerStyle: CSSProperties = { padding: 0, margin: '0 0 15px' };\n\nexport const InterpretData: FC<{ data: DataTable; recordsOrder: string[] }> = ({\n  data,\n  recordsOrder,\n}) => {\n  const moduleNames = Object.keys(data);\n\n  const gridSizesTable = moduleNames.reduce((gridSizesT, m) => {\n    const moduleTable = (data as DataTable<string>)[m];\n\n    return Object.keys(moduleTable).reduce(\n      (gST, g) => ({\n        ...gST,\n        [g]: eliminateDuplicates(\n          ...(gST[g] ?? []),\n          ...Object.keys((moduleTable as ModuleEntry<number>)[(g as unknown) as number])\n        ),\n      }),\n      gridSizesT\n    );\n  }, {} as { [P in string]?: string[] });\n\n  return (\n    <div {...{ style: { display: 'flex', flexDirection: 'column' } }}>\n      <ModulesRow {...{ moduleNames }} />\n      {Object.entries(gridSizesTable as { [P in string]: string[] }).map(\n        ([gridTitle, entryTitles]) => [\n          <GridTitleRow {...{ moduleNames, gridTitle }} key={gridTitle} />,\n\n          <div {...{ style: recordsContainerStyle }} key={`list-${gridTitle}`}>\n            {(recordsOrder.length\n              ? recordsOrder.reduce(\n                  (ordered, gauge) => [\n                    ...ordered,\n                    ...entryTitles.filter((t) => RegExp(gauge).test(t)).sort(),\n                  ],\n                  [] as string[]\n                )\n              : entryTitles.sort()\n            ).map((entryTitle) => (\n              <RecordRow {...{ moduleNames, data, gridTitle, entryTitle }} key={entryTitle} />\n            ))}\n          </div>,\n        ]\n      )}\n    </div>\n  );\n};\n\nfunction eliminateDuplicates(...arr: string[]): string[] {\n  return [...new Set(arr)];\n}\n","import type { CSSProperties, FC } from 'react';\nimport React from 'react';\n\nconst style: CSSProperties = {\n  borderBottom: '25px solid',\n  borderLeft: '15px solid transparent',\n  borderRight: '15px solid transparent',\n  boxSizing: 'content-box',\n  height: 0,\n  width: 50,\n  textAlign: 'center',\n  fontWeight: 500,\n  cursor: 'default',\n};\n\nexport const TabHeader: FC<{\n  name: string;\n  color: string;\n  onClick: () => void;\n  addStyle?: CSSProperties;\n}> = ({ name, color, onClick, addStyle = {} }) => (\n  <div\n    {...{\n      style: { ...style, ...addStyle, borderBottomColor: color },\n      role: 'button',\n      tabIndex: 0,\n      onClick,\n    }}\n    onKeyPress={onClick}\n  >\n    {name}\n  </div>\n);\n","import { CONTROL_ACTIONS_ORDER } from '@compare-react-state-management-solutions/control-panel';\nimport { useGetDataPool } from '@compare-react-state-management-solutions/performance-info';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { createProcessData, NotCountFirstMeasureOptions } from './createProcessData';\nimport { InterpretData } from './InterpretData';\nimport { TabHeader } from './TabHeader';\n\nexport const TAB_HEADER_HEIGHT = 25;\n\nconst PANEL_COLOR = 'yellow';\nconst PANEL_HEIGHT = '50vh';\n\nconst exteriorContainerStyle: CSSProperties = {\n  height: 0,\n};\n\nconst mainContainerBaseStyle: CSSProperties = {\n  position: 'relative',\n};\n\nconst commonBoxBaseStyle: CSSProperties = { backgroundColor: PANEL_COLOR };\nconst collapsedBoxStyle: CSSProperties = { ...commonBoxBaseStyle, height: 0, overflow: 'hidden' };\n\nconst expandedBoxStyle: CSSProperties = {\n  ...commonBoxBaseStyle,\n  padding: '10px 0',\n  height: PANEL_HEIGHT,\n  overflow: 'auto',\n};\n\nexport type InfoPanelOptions = NotCountFirstMeasureOptions;\n\nexport const InfoPanel: FC<{\n  recordsOrder?: string[];\n  options?: InfoPanelOptions;\n  zIndex?: number;\n}> = ({\n  recordsOrder = CONTROL_ACTIONS_ORDER,\n  options = { notCountFirstMeasure: false },\n  zIndex = 0,\n}) => {\n  const [collapsed, setCollapsed] = useState(true);\n  const { getDataPool } = useGetDataPool();\n  const [{ processData }] = useState(createProcessData);\n  const processedData = processData(getDataPool(), options);\n  const scrollWidth = document.documentElement.scrollWidth;\n  const clientWidth = document.documentElement.clientWidth;\n  const calcWidth = scrollWidth > clientWidth ? scrollWidth : '100%';\n\n  return (\n    <div {...{ style: exteriorContainerStyle }}>\n      {Object.entries(processedData).length === 0 || (\n        <div\n          {...{\n            style: {\n              ...mainContainerBaseStyle,\n              zIndex,\n              width: calcWidth,\n              bottom: collapsed\n                ? TAB_HEADER_HEIGHT + 1 - calculateScrollBarHeight()\n                : `calc(${PANEL_HEIGHT} + ${TAB_HEADER_HEIGHT}px - ${calculateScrollBarHeight().toFixed(\n                    0\n                  )}px`,\n            },\n          }}\n        >\n          <TabHeader\n            {...{\n              name: 'stat',\n              color: PANEL_COLOR,\n              addStyle: { margin: '0 auto', transform: 'translateY(1px)' },\n              onClick: () => {\n                setCollapsed((prevState) => !prevState);\n              },\n            }}\n          />\n          <div {...{ style: collapsed ? collapsedBoxStyle : expandedBoxStyle }}>\n            <InterpretData {...{ data: processedData, recordsOrder }} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction calculateScrollBarHeight(): number {\n  const { documentElement } = document;\n  documentElement.style.overflowX = 'scroll';\n  const heightWhenScroll = documentElement.clientHeight;\n  documentElement.style.overflowX = 'auto';\n  const actualHeight = documentElement.clientHeight;\n\n  return actualHeight - heightWhenScroll;\n}\n","import {\n  BlockingSpinner,\n  PerfInfoProvider,\n} from '@compare-react-state-management-solutions/performance-info';\nimport { App as RecoilApp } from '@compare-react-state-management-solutions/recoil-component';\nimport { App as ReduxHooksApp } from '@compare-react-state-management-solutions/redux-hooks-component';\nimport { App as UseInterstateApp } from '@compare-react-state-management-solutions/use-interstate-component';\nimport type { CSSProperties, FC } from 'react';\nimport React, { useState } from 'react';\nimport { InfoPanel, TAB_HEADER_HEIGHT } from './internal_packages/info-panel/InfoPanel';\nimport { version } from '../package.json';\n\nconst outerContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n};\n\nconst mainContainerStyle: CSSProperties = {\n  position: 'relative',\n  display: 'flex',\n  flexDirection: 'column',\n  paddingBottom: TAB_HEADER_HEIGHT,\n};\n\nconst versionInfoStyle: CSSProperties = { margin: '5px 0 0 10px', fontWeight: 'bold' };\n\nconst appContainerStyle: CSSProperties = {\n  display: 'flex',\n  flexGrow: 1,\n  marginRight: 30,\n};\n\nexport const AppInFlexBox: FC = () => {\n  const [viewportHeight, setViewportHeight] = useState<number | null>(null);\n\n  const calculateViewportHeight = (element: HTMLDivElement | null) => {\n    if (viewportHeight === null && element) {\n      const { documentElement } = document;\n      documentElement.style.overflowX = 'scroll';\n      setViewportHeight(documentElement.clientHeight);\n      documentElement.style.overflowX = 'auto';\n    }\n  };\n\n  return viewportHeight === null ? (\n    <div {...{ style: { visibility: 'hidden' }, ref: calculateViewportHeight }} />\n  ) : (\n    <PerfInfoProvider>\n      <div {...{ style: outerContainerStyle }}>\n        <div\n          {...{\n            style: { ...mainContainerStyle, height: viewportHeight },\n          }}\n        >\n          <div {...{ style: versionInfoStyle }}>{`v.${version}`}</div>\n\n          <div {...{ style: appContainerStyle }}>\n            <ReduxHooksApp />\n            <RecoilApp />\n            <UseInterstateApp />\n          </div>\n\n          <BlockingSpinner {...{ zIndex: 10 }} />\n        </div>\n\n        <InfoPanel\n          {...{\n            options: { notCountFirstMeasure: true },\n            zIndex: 20,\n          }}\n        />\n      </div>\n    </PerfInfoProvider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppInFlexBox } from './AppInFlexBox';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppInFlexBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}